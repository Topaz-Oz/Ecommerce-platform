generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//
// ENUMS
//

enum Role {
  CUSTOMER
  SELLER
  ENTERPRISE
  LOGISTICS
  ADMIN
}

enum DiscountType {
  PERCENT
  AMOUNT
}

enum PaymentMethod {
  VNPAY
  PAYPAL
  COD
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPING
  DELIVERED
  CANCELLED
}

enum LogisticsStatus {
  CREATED
  PICKED_UP
  IN_TRANSIT
  DELIVERED
  RETURNED
}

enum BehaviorType {
  VIEW
  ADD_TO_CART
  PURCHASE
  SEARCH
}

enum PromotionType {
  FLASH_SALE
  CAMPAIGN
}

//
// MODELS
//

model User {
  id                String   @id @default(cuid())
  email             String   @unique
  password          String
  name              String
  avatar            String?
  phone             String?
  role              Role
  isVerified        Boolean  @default(false)
  verificationToken String?
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  seller     Seller?
  enterprise Enterprise?
  logistics  LogisticsPartner?
  addresses  Address[]
  orders     Order[]
  reviews    Review[]
  behaviors  UserBehavior[]
}

model Address {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  label     String?
  fullName  String
  phone     String
  province  String
  district  String
  ward      String
  street    String
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

//
// SELLER
//

model Seller {
  id        String    @id @default(cuid())
  userId    String    @unique
  user      User      @relation(fields: [userId], references: [id])
  storeName String
  verified  Boolean   @default(false)
  rating    Float?
  products  Product[]
}

//
// ENTERPRISE
//

model Enterprise {
  id            String    @id @default(cuid())
  userId        String    @unique
  user          User      @relation(fields: [userId], references: [id])
  companyName   String
  taxCode       String?
  verified      Boolean   @default(false)
  officialBrand Boolean   @default(true)
  rating        Float?
  products      Product[]
}

//
// PRODUCT MANAGEMENT
//

model Product {
  id          String   @id @default(cuid())
  name        String
  description String
  categoryId  String
  category    Category @relation(fields: [categoryId], references: [id])

  // Người bán có thể là Seller hoặc Enterprise
  sellerId     String?
  seller       Seller?     @relation(fields: [sellerId], references: [id])
  enterpriseId String?
  enterprise   Enterprise? @relation(fields: [enterpriseId], references: [id])

  basePrice Float
  stock     Int
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  variants   ProductVariant[]
  reviews    Review[]
  orderItems OrderItem[]
  behaviors  UserBehavior[]
  promotions PromotionProduct[]
}

model ProductVariant {
  id        String  @id @default(cuid())
  productId String
  product   Product @relation(fields: [productId], references: [id])
  color     String?
  size      String?
  price     Float
  stock     Int
}

model Category {
  id         String              @id @default(cuid())
  name       String
  parentId   String?
  parent     Category?           @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children   Category[]          @relation("CategoryHierarchy")
  products   Product[]
  promotions PromotionCategory[]
}

model Review {
  id        String   @id @default(cuid())
  productId String
  userId    String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())

  product Product @relation(fields: [productId], references: [id])
  user    User    @relation(fields: [userId], references: [id])
}

//
// VOUCHER
//

model Voucher {
  id            String       @id @default(cuid())
  code          String       @unique
  discountType  DiscountType
  discountValue Float
  minOrderValue Float?
  startDate     DateTime
  endDate       DateTime
  usageLimit    Int?
  usedCount     Int          @default(0)
  orders        Order[]
}

//
// ORDER & PAYMENT
//

model Order {
  id          String      @id @default(cuid())
  userId      String
  user        User        @relation(fields: [userId], references: [id])
  totalAmount Float
  status      OrderStatus @default(PENDING)
  paymentId   String?
  shippingId  String?
  voucherId   String?
  createdAt   DateTime    @default(now())

  voucher         Voucher?         @relation(fields: [voucherId], references: [id])
  payment         Payment?
  orderItems      OrderItem[]
  logisticsOrders LogisticsOrder[]
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  variantId String?
  quantity  Int
  price     Float

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

model Payment {
  id            String        @id @default(cuid())
  orderId       String        @unique
  order         Order         @relation(fields: [orderId], references: [id])
  method        PaymentMethod
  status        PaymentStatus @default(PENDING)
  transactionId String?
  createdAt     DateTime      @default(now())
}

//
// LOGISTICS
//

model LogisticsPartner {
  id          String           @id @default(cuid())
  userId      String           @unique
  user        User             @relation(fields: [userId], references: [id])
  name        String
  apiEndpoint String?
  baseRate    Float
  rating      Float?
  orders      LogisticsOrder[]
}

model LogisticsOrder {
  id                 String          @id @default(cuid())
  orderId            String
  logisticsPartnerId String
  trackingCode       String
  status             LogisticsStatus @default(CREATED)
  estimatedDelivery  DateTime?
  updatedAt          DateTime        @updatedAt

  logisticsPartner LogisticsPartner @relation(fields: [logisticsPartnerId], references: [id])
  order            Order            @relation(fields: [orderId], references: [id])
}

//
// PERSONALIZATION
//

model UserBehavior {
  id        String       @id @default(cuid())
  userId    String
  productId String
  type      BehaviorType
  createdAt DateTime     @default(now())

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

//
// PROMOTIONS
//

model Promotion {
  id                 String        @id @default(cuid())
  type               PromotionType
  name               String
  description        String?
  startDate          DateTime
  endDate            DateTime
  discountPercentage Float?
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt

  products   PromotionProduct[]
  categories PromotionCategory[]
}

model PromotionProduct {
  id                 String @id @default(cuid())
  promotionId        String
  productId          String
  discountPercentage Float
  quantity           Int?
  soldQuantity       Int?   @default(0)

  promotion Promotion @relation(fields: [promotionId], references: [id])
  product   Product   @relation(fields: [productId], references: [id])
}

model PromotionCategory {
  id          String @id @default(cuid())
  promotionId String
  categoryId  String

  promotion Promotion @relation(fields: [promotionId], references: [id])
  category  Category  @relation(fields: [categoryId], references: [id])
}
