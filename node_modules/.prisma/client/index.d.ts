
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Address
 * 
 */
export type Address = $Result.DefaultSelection<Prisma.$AddressPayload>
/**
 * Model Seller
 * 
 */
export type Seller = $Result.DefaultSelection<Prisma.$SellerPayload>
/**
 * Model Enterprise
 * 
 */
export type Enterprise = $Result.DefaultSelection<Prisma.$EnterprisePayload>
/**
 * Model Product
 * 
 */
export type Product = $Result.DefaultSelection<Prisma.$ProductPayload>
/**
 * Model ProductVariant
 * 
 */
export type ProductVariant = $Result.DefaultSelection<Prisma.$ProductVariantPayload>
/**
 * Model Category
 * 
 */
export type Category = $Result.DefaultSelection<Prisma.$CategoryPayload>
/**
 * Model SellerProduct
 * 
 */
export type SellerProduct = $Result.DefaultSelection<Prisma.$SellerProductPayload>
/**
 * Model Review
 * 
 */
export type Review = $Result.DefaultSelection<Prisma.$ReviewPayload>
/**
 * Model Voucher
 * 
 */
export type Voucher = $Result.DefaultSelection<Prisma.$VoucherPayload>
/**
 * Model Order
 * 
 */
export type Order = $Result.DefaultSelection<Prisma.$OrderPayload>
/**
 * Model OrderItem
 * 
 */
export type OrderItem = $Result.DefaultSelection<Prisma.$OrderItemPayload>
/**
 * Model Payment
 * 
 */
export type Payment = $Result.DefaultSelection<Prisma.$PaymentPayload>
/**
 * Model LogisticsPartner
 * 
 */
export type LogisticsPartner = $Result.DefaultSelection<Prisma.$LogisticsPartnerPayload>
/**
 * Model Shipper
 * 
 */
export type Shipper = $Result.DefaultSelection<Prisma.$ShipperPayload>
/**
 * Model LogisticsOrder
 * 
 */
export type LogisticsOrder = $Result.DefaultSelection<Prisma.$LogisticsOrderPayload>
/**
 * Model UserBehavior
 * 
 */
export type UserBehavior = $Result.DefaultSelection<Prisma.$UserBehaviorPayload>
/**
 * Model Promotion
 * 
 */
export type Promotion = $Result.DefaultSelection<Prisma.$PromotionPayload>
/**
 * Model PromotionProduct
 * 
 */
export type PromotionProduct = $Result.DefaultSelection<Prisma.$PromotionProductPayload>
/**
 * Model PromotionCategory
 * 
 */
export type PromotionCategory = $Result.DefaultSelection<Prisma.$PromotionCategoryPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Role: {
  CUSTOMER: 'CUSTOMER',
  SELLER: 'SELLER',
  ENTERPRISE: 'ENTERPRISE',
  LOGISTICS: 'LOGISTICS',
  SHIPPER: 'SHIPPER',
  ADMIN: 'ADMIN'
};

export type Role = (typeof Role)[keyof typeof Role]


export const DiscountType: {
  PERCENT: 'PERCENT',
  AMOUNT: 'AMOUNT'
};

export type DiscountType = (typeof DiscountType)[keyof typeof DiscountType]


export const PaymentMethod: {
  VNPAY: 'VNPAY',
  PAYPAL: 'PAYPAL',
  COD: 'COD'
};

export type PaymentMethod = (typeof PaymentMethod)[keyof typeof PaymentMethod]


export const PaymentStatus: {
  PENDING: 'PENDING',
  SUCCESS: 'SUCCESS',
  FAILED: 'FAILED'
};

export type PaymentStatus = (typeof PaymentStatus)[keyof typeof PaymentStatus]


export const OrderStatus: {
  PENDING: 'PENDING',
  PROCESSING: 'PROCESSING',
  SHIPPING: 'SHIPPING',
  DELIVERED: 'DELIVERED',
  CANCELLED: 'CANCELLED'
};

export type OrderStatus = (typeof OrderStatus)[keyof typeof OrderStatus]


export const LogisticsStatus: {
  CREATED: 'CREATED',
  ASSIGNED: 'ASSIGNED',
  PICKED_UP: 'PICKED_UP',
  IN_TRANSIT: 'IN_TRANSIT',
  DELIVERED: 'DELIVERED',
  RETURNED: 'RETURNED',
  CANCELLED: 'CANCELLED'
};

export type LogisticsStatus = (typeof LogisticsStatus)[keyof typeof LogisticsStatus]


export const ShipperStatus: {
  AVAILABLE: 'AVAILABLE',
  BUSY: 'BUSY',
  OFFLINE: 'OFFLINE'
};

export type ShipperStatus = (typeof ShipperStatus)[keyof typeof ShipperStatus]


export const BehaviorType: {
  VIEW: 'VIEW',
  ADD_TO_CART: 'ADD_TO_CART',
  PURCHASE: 'PURCHASE',
  SEARCH: 'SEARCH'
};

export type BehaviorType = (typeof BehaviorType)[keyof typeof BehaviorType]


export const PromotionType: {
  FLASH_SALE: 'FLASH_SALE',
  CAMPAIGN: 'CAMPAIGN'
};

export type PromotionType = (typeof PromotionType)[keyof typeof PromotionType]

}

export type Role = $Enums.Role

export const Role: typeof $Enums.Role

export type DiscountType = $Enums.DiscountType

export const DiscountType: typeof $Enums.DiscountType

export type PaymentMethod = $Enums.PaymentMethod

export const PaymentMethod: typeof $Enums.PaymentMethod

export type PaymentStatus = $Enums.PaymentStatus

export const PaymentStatus: typeof $Enums.PaymentStatus

export type OrderStatus = $Enums.OrderStatus

export const OrderStatus: typeof $Enums.OrderStatus

export type LogisticsStatus = $Enums.LogisticsStatus

export const LogisticsStatus: typeof $Enums.LogisticsStatus

export type ShipperStatus = $Enums.ShipperStatus

export const ShipperStatus: typeof $Enums.ShipperStatus

export type BehaviorType = $Enums.BehaviorType

export const BehaviorType: typeof $Enums.BehaviorType

export type PromotionType = $Enums.PromotionType

export const PromotionType: typeof $Enums.PromotionType

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.address`: Exposes CRUD operations for the **Address** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Addresses
    * const addresses = await prisma.address.findMany()
    * ```
    */
  get address(): Prisma.AddressDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.seller`: Exposes CRUD operations for the **Seller** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sellers
    * const sellers = await prisma.seller.findMany()
    * ```
    */
  get seller(): Prisma.SellerDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.enterprise`: Exposes CRUD operations for the **Enterprise** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Enterprises
    * const enterprises = await prisma.enterprise.findMany()
    * ```
    */
  get enterprise(): Prisma.EnterpriseDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.product`: Exposes CRUD operations for the **Product** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Products
    * const products = await prisma.product.findMany()
    * ```
    */
  get product(): Prisma.ProductDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.productVariant`: Exposes CRUD operations for the **ProductVariant** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProductVariants
    * const productVariants = await prisma.productVariant.findMany()
    * ```
    */
  get productVariant(): Prisma.ProductVariantDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.category`: Exposes CRUD operations for the **Category** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categories
    * const categories = await prisma.category.findMany()
    * ```
    */
  get category(): Prisma.CategoryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.sellerProduct`: Exposes CRUD operations for the **SellerProduct** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SellerProducts
    * const sellerProducts = await prisma.sellerProduct.findMany()
    * ```
    */
  get sellerProduct(): Prisma.SellerProductDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.review`: Exposes CRUD operations for the **Review** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Reviews
    * const reviews = await prisma.review.findMany()
    * ```
    */
  get review(): Prisma.ReviewDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.voucher`: Exposes CRUD operations for the **Voucher** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Vouchers
    * const vouchers = await prisma.voucher.findMany()
    * ```
    */
  get voucher(): Prisma.VoucherDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.order`: Exposes CRUD operations for the **Order** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Orders
    * const orders = await prisma.order.findMany()
    * ```
    */
  get order(): Prisma.OrderDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.orderItem`: Exposes CRUD operations for the **OrderItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more OrderItems
    * const orderItems = await prisma.orderItem.findMany()
    * ```
    */
  get orderItem(): Prisma.OrderItemDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.payment`: Exposes CRUD operations for the **Payment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Payments
    * const payments = await prisma.payment.findMany()
    * ```
    */
  get payment(): Prisma.PaymentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.logisticsPartner`: Exposes CRUD operations for the **LogisticsPartner** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LogisticsPartners
    * const logisticsPartners = await prisma.logisticsPartner.findMany()
    * ```
    */
  get logisticsPartner(): Prisma.LogisticsPartnerDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.shipper`: Exposes CRUD operations for the **Shipper** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Shippers
    * const shippers = await prisma.shipper.findMany()
    * ```
    */
  get shipper(): Prisma.ShipperDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.logisticsOrder`: Exposes CRUD operations for the **LogisticsOrder** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LogisticsOrders
    * const logisticsOrders = await prisma.logisticsOrder.findMany()
    * ```
    */
  get logisticsOrder(): Prisma.LogisticsOrderDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userBehavior`: Exposes CRUD operations for the **UserBehavior** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserBehaviors
    * const userBehaviors = await prisma.userBehavior.findMany()
    * ```
    */
  get userBehavior(): Prisma.UserBehaviorDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.promotion`: Exposes CRUD operations for the **Promotion** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Promotions
    * const promotions = await prisma.promotion.findMany()
    * ```
    */
  get promotion(): Prisma.PromotionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.promotionProduct`: Exposes CRUD operations for the **PromotionProduct** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PromotionProducts
    * const promotionProducts = await prisma.promotionProduct.findMany()
    * ```
    */
  get promotionProduct(): Prisma.PromotionProductDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.promotionCategory`: Exposes CRUD operations for the **PromotionCategory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PromotionCategories
    * const promotionCategories = await prisma.promotionCategory.findMany()
    * ```
    */
  get promotionCategory(): Prisma.PromotionCategoryDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.17.0
   * Query Engine version: c0aafc03b8ef6cdced8654b9a817999e02457d6a
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Address: 'Address',
    Seller: 'Seller',
    Enterprise: 'Enterprise',
    Product: 'Product',
    ProductVariant: 'ProductVariant',
    Category: 'Category',
    SellerProduct: 'SellerProduct',
    Review: 'Review',
    Voucher: 'Voucher',
    Order: 'Order',
    OrderItem: 'OrderItem',
    Payment: 'Payment',
    LogisticsPartner: 'LogisticsPartner',
    Shipper: 'Shipper',
    LogisticsOrder: 'LogisticsOrder',
    UserBehavior: 'UserBehavior',
    Promotion: 'Promotion',
    PromotionProduct: 'PromotionProduct',
    PromotionCategory: 'PromotionCategory'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "address" | "seller" | "enterprise" | "product" | "productVariant" | "category" | "sellerProduct" | "review" | "voucher" | "order" | "orderItem" | "payment" | "logisticsPartner" | "shipper" | "logisticsOrder" | "userBehavior" | "promotion" | "promotionProduct" | "promotionCategory"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Address: {
        payload: Prisma.$AddressPayload<ExtArgs>
        fields: Prisma.AddressFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AddressFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddressPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AddressFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>
          }
          findFirst: {
            args: Prisma.AddressFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddressPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AddressFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>
          }
          findMany: {
            args: Prisma.AddressFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>[]
          }
          create: {
            args: Prisma.AddressCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>
          }
          createMany: {
            args: Prisma.AddressCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AddressCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>[]
          }
          delete: {
            args: Prisma.AddressDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>
          }
          update: {
            args: Prisma.AddressUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>
          }
          deleteMany: {
            args: Prisma.AddressDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AddressUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AddressUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>[]
          }
          upsert: {
            args: Prisma.AddressUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>
          }
          aggregate: {
            args: Prisma.AddressAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAddress>
          }
          groupBy: {
            args: Prisma.AddressGroupByArgs<ExtArgs>
            result: $Utils.Optional<AddressGroupByOutputType>[]
          }
          count: {
            args: Prisma.AddressCountArgs<ExtArgs>
            result: $Utils.Optional<AddressCountAggregateOutputType> | number
          }
        }
      }
      Seller: {
        payload: Prisma.$SellerPayload<ExtArgs>
        fields: Prisma.SellerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SellerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SellerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SellerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SellerPayload>
          }
          findFirst: {
            args: Prisma.SellerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SellerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SellerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SellerPayload>
          }
          findMany: {
            args: Prisma.SellerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SellerPayload>[]
          }
          create: {
            args: Prisma.SellerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SellerPayload>
          }
          createMany: {
            args: Prisma.SellerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SellerCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SellerPayload>[]
          }
          delete: {
            args: Prisma.SellerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SellerPayload>
          }
          update: {
            args: Prisma.SellerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SellerPayload>
          }
          deleteMany: {
            args: Prisma.SellerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SellerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SellerUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SellerPayload>[]
          }
          upsert: {
            args: Prisma.SellerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SellerPayload>
          }
          aggregate: {
            args: Prisma.SellerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSeller>
          }
          groupBy: {
            args: Prisma.SellerGroupByArgs<ExtArgs>
            result: $Utils.Optional<SellerGroupByOutputType>[]
          }
          count: {
            args: Prisma.SellerCountArgs<ExtArgs>
            result: $Utils.Optional<SellerCountAggregateOutputType> | number
          }
        }
      }
      Enterprise: {
        payload: Prisma.$EnterprisePayload<ExtArgs>
        fields: Prisma.EnterpriseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EnterpriseFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnterprisePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EnterpriseFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnterprisePayload>
          }
          findFirst: {
            args: Prisma.EnterpriseFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnterprisePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EnterpriseFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnterprisePayload>
          }
          findMany: {
            args: Prisma.EnterpriseFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnterprisePayload>[]
          }
          create: {
            args: Prisma.EnterpriseCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnterprisePayload>
          }
          createMany: {
            args: Prisma.EnterpriseCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EnterpriseCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnterprisePayload>[]
          }
          delete: {
            args: Prisma.EnterpriseDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnterprisePayload>
          }
          update: {
            args: Prisma.EnterpriseUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnterprisePayload>
          }
          deleteMany: {
            args: Prisma.EnterpriseDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EnterpriseUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.EnterpriseUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnterprisePayload>[]
          }
          upsert: {
            args: Prisma.EnterpriseUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnterprisePayload>
          }
          aggregate: {
            args: Prisma.EnterpriseAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEnterprise>
          }
          groupBy: {
            args: Prisma.EnterpriseGroupByArgs<ExtArgs>
            result: $Utils.Optional<EnterpriseGroupByOutputType>[]
          }
          count: {
            args: Prisma.EnterpriseCountArgs<ExtArgs>
            result: $Utils.Optional<EnterpriseCountAggregateOutputType> | number
          }
        }
      }
      Product: {
        payload: Prisma.$ProductPayload<ExtArgs>
        fields: Prisma.ProductFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProductFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProductFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          findFirst: {
            args: Prisma.ProductFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProductFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          findMany: {
            args: Prisma.ProductFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>[]
          }
          create: {
            args: Prisma.ProductCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          createMany: {
            args: Prisma.ProductCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProductCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>[]
          }
          delete: {
            args: Prisma.ProductDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          update: {
            args: Prisma.ProductUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          deleteMany: {
            args: Prisma.ProductDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProductUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProductUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>[]
          }
          upsert: {
            args: Prisma.ProductUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          aggregate: {
            args: Prisma.ProductAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProduct>
          }
          groupBy: {
            args: Prisma.ProductGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProductGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProductCountArgs<ExtArgs>
            result: $Utils.Optional<ProductCountAggregateOutputType> | number
          }
        }
      }
      ProductVariant: {
        payload: Prisma.$ProductVariantPayload<ExtArgs>
        fields: Prisma.ProductVariantFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProductVariantFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductVariantPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProductVariantFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductVariantPayload>
          }
          findFirst: {
            args: Prisma.ProductVariantFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductVariantPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProductVariantFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductVariantPayload>
          }
          findMany: {
            args: Prisma.ProductVariantFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductVariantPayload>[]
          }
          create: {
            args: Prisma.ProductVariantCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductVariantPayload>
          }
          createMany: {
            args: Prisma.ProductVariantCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProductVariantCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductVariantPayload>[]
          }
          delete: {
            args: Prisma.ProductVariantDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductVariantPayload>
          }
          update: {
            args: Prisma.ProductVariantUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductVariantPayload>
          }
          deleteMany: {
            args: Prisma.ProductVariantDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProductVariantUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProductVariantUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductVariantPayload>[]
          }
          upsert: {
            args: Prisma.ProductVariantUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductVariantPayload>
          }
          aggregate: {
            args: Prisma.ProductVariantAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProductVariant>
          }
          groupBy: {
            args: Prisma.ProductVariantGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProductVariantGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProductVariantCountArgs<ExtArgs>
            result: $Utils.Optional<ProductVariantCountAggregateOutputType> | number
          }
        }
      }
      Category: {
        payload: Prisma.$CategoryPayload<ExtArgs>
        fields: Prisma.CategoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CategoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CategoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          findFirst: {
            args: Prisma.CategoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CategoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          findMany: {
            args: Prisma.CategoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>[]
          }
          create: {
            args: Prisma.CategoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          createMany: {
            args: Prisma.CategoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CategoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>[]
          }
          delete: {
            args: Prisma.CategoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          update: {
            args: Prisma.CategoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          deleteMany: {
            args: Prisma.CategoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CategoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CategoryUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>[]
          }
          upsert: {
            args: Prisma.CategoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          aggregate: {
            args: Prisma.CategoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCategory>
          }
          groupBy: {
            args: Prisma.CategoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<CategoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.CategoryCountArgs<ExtArgs>
            result: $Utils.Optional<CategoryCountAggregateOutputType> | number
          }
        }
      }
      SellerProduct: {
        payload: Prisma.$SellerProductPayload<ExtArgs>
        fields: Prisma.SellerProductFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SellerProductFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SellerProductPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SellerProductFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SellerProductPayload>
          }
          findFirst: {
            args: Prisma.SellerProductFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SellerProductPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SellerProductFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SellerProductPayload>
          }
          findMany: {
            args: Prisma.SellerProductFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SellerProductPayload>[]
          }
          create: {
            args: Prisma.SellerProductCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SellerProductPayload>
          }
          createMany: {
            args: Prisma.SellerProductCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SellerProductCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SellerProductPayload>[]
          }
          delete: {
            args: Prisma.SellerProductDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SellerProductPayload>
          }
          update: {
            args: Prisma.SellerProductUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SellerProductPayload>
          }
          deleteMany: {
            args: Prisma.SellerProductDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SellerProductUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SellerProductUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SellerProductPayload>[]
          }
          upsert: {
            args: Prisma.SellerProductUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SellerProductPayload>
          }
          aggregate: {
            args: Prisma.SellerProductAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSellerProduct>
          }
          groupBy: {
            args: Prisma.SellerProductGroupByArgs<ExtArgs>
            result: $Utils.Optional<SellerProductGroupByOutputType>[]
          }
          count: {
            args: Prisma.SellerProductCountArgs<ExtArgs>
            result: $Utils.Optional<SellerProductCountAggregateOutputType> | number
          }
        }
      }
      Review: {
        payload: Prisma.$ReviewPayload<ExtArgs>
        fields: Prisma.ReviewFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReviewFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReviewFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          findFirst: {
            args: Prisma.ReviewFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReviewFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          findMany: {
            args: Prisma.ReviewFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>[]
          }
          create: {
            args: Prisma.ReviewCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          createMany: {
            args: Prisma.ReviewCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ReviewCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>[]
          }
          delete: {
            args: Prisma.ReviewDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          update: {
            args: Prisma.ReviewUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          deleteMany: {
            args: Prisma.ReviewDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ReviewUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ReviewUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>[]
          }
          upsert: {
            args: Prisma.ReviewUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          aggregate: {
            args: Prisma.ReviewAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReview>
          }
          groupBy: {
            args: Prisma.ReviewGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReviewGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReviewCountArgs<ExtArgs>
            result: $Utils.Optional<ReviewCountAggregateOutputType> | number
          }
        }
      }
      Voucher: {
        payload: Prisma.$VoucherPayload<ExtArgs>
        fields: Prisma.VoucherFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VoucherFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VoucherPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VoucherFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VoucherPayload>
          }
          findFirst: {
            args: Prisma.VoucherFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VoucherPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VoucherFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VoucherPayload>
          }
          findMany: {
            args: Prisma.VoucherFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VoucherPayload>[]
          }
          create: {
            args: Prisma.VoucherCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VoucherPayload>
          }
          createMany: {
            args: Prisma.VoucherCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.VoucherCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VoucherPayload>[]
          }
          delete: {
            args: Prisma.VoucherDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VoucherPayload>
          }
          update: {
            args: Prisma.VoucherUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VoucherPayload>
          }
          deleteMany: {
            args: Prisma.VoucherDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VoucherUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.VoucherUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VoucherPayload>[]
          }
          upsert: {
            args: Prisma.VoucherUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VoucherPayload>
          }
          aggregate: {
            args: Prisma.VoucherAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVoucher>
          }
          groupBy: {
            args: Prisma.VoucherGroupByArgs<ExtArgs>
            result: $Utils.Optional<VoucherGroupByOutputType>[]
          }
          count: {
            args: Prisma.VoucherCountArgs<ExtArgs>
            result: $Utils.Optional<VoucherCountAggregateOutputType> | number
          }
        }
      }
      Order: {
        payload: Prisma.$OrderPayload<ExtArgs>
        fields: Prisma.OrderFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OrderFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OrderFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          findFirst: {
            args: Prisma.OrderFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OrderFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          findMany: {
            args: Prisma.OrderFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>[]
          }
          create: {
            args: Prisma.OrderCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          createMany: {
            args: Prisma.OrderCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OrderCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>[]
          }
          delete: {
            args: Prisma.OrderDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          update: {
            args: Prisma.OrderUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          deleteMany: {
            args: Prisma.OrderDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OrderUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.OrderUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>[]
          }
          upsert: {
            args: Prisma.OrderUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          aggregate: {
            args: Prisma.OrderAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOrder>
          }
          groupBy: {
            args: Prisma.OrderGroupByArgs<ExtArgs>
            result: $Utils.Optional<OrderGroupByOutputType>[]
          }
          count: {
            args: Prisma.OrderCountArgs<ExtArgs>
            result: $Utils.Optional<OrderCountAggregateOutputType> | number
          }
        }
      }
      OrderItem: {
        payload: Prisma.$OrderItemPayload<ExtArgs>
        fields: Prisma.OrderItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OrderItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OrderItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload>
          }
          findFirst: {
            args: Prisma.OrderItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OrderItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload>
          }
          findMany: {
            args: Prisma.OrderItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload>[]
          }
          create: {
            args: Prisma.OrderItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload>
          }
          createMany: {
            args: Prisma.OrderItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OrderItemCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload>[]
          }
          delete: {
            args: Prisma.OrderItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload>
          }
          update: {
            args: Prisma.OrderItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload>
          }
          deleteMany: {
            args: Prisma.OrderItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OrderItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.OrderItemUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload>[]
          }
          upsert: {
            args: Prisma.OrderItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload>
          }
          aggregate: {
            args: Prisma.OrderItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOrderItem>
          }
          groupBy: {
            args: Prisma.OrderItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<OrderItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.OrderItemCountArgs<ExtArgs>
            result: $Utils.Optional<OrderItemCountAggregateOutputType> | number
          }
        }
      }
      Payment: {
        payload: Prisma.$PaymentPayload<ExtArgs>
        fields: Prisma.PaymentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PaymentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PaymentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          findFirst: {
            args: Prisma.PaymentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PaymentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          findMany: {
            args: Prisma.PaymentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>[]
          }
          create: {
            args: Prisma.PaymentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          createMany: {
            args: Prisma.PaymentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PaymentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>[]
          }
          delete: {
            args: Prisma.PaymentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          update: {
            args: Prisma.PaymentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          deleteMany: {
            args: Prisma.PaymentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PaymentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PaymentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>[]
          }
          upsert: {
            args: Prisma.PaymentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          aggregate: {
            args: Prisma.PaymentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePayment>
          }
          groupBy: {
            args: Prisma.PaymentGroupByArgs<ExtArgs>
            result: $Utils.Optional<PaymentGroupByOutputType>[]
          }
          count: {
            args: Prisma.PaymentCountArgs<ExtArgs>
            result: $Utils.Optional<PaymentCountAggregateOutputType> | number
          }
        }
      }
      LogisticsPartner: {
        payload: Prisma.$LogisticsPartnerPayload<ExtArgs>
        fields: Prisma.LogisticsPartnerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LogisticsPartnerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogisticsPartnerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LogisticsPartnerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogisticsPartnerPayload>
          }
          findFirst: {
            args: Prisma.LogisticsPartnerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogisticsPartnerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LogisticsPartnerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogisticsPartnerPayload>
          }
          findMany: {
            args: Prisma.LogisticsPartnerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogisticsPartnerPayload>[]
          }
          create: {
            args: Prisma.LogisticsPartnerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogisticsPartnerPayload>
          }
          createMany: {
            args: Prisma.LogisticsPartnerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LogisticsPartnerCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogisticsPartnerPayload>[]
          }
          delete: {
            args: Prisma.LogisticsPartnerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogisticsPartnerPayload>
          }
          update: {
            args: Prisma.LogisticsPartnerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogisticsPartnerPayload>
          }
          deleteMany: {
            args: Prisma.LogisticsPartnerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LogisticsPartnerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.LogisticsPartnerUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogisticsPartnerPayload>[]
          }
          upsert: {
            args: Prisma.LogisticsPartnerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogisticsPartnerPayload>
          }
          aggregate: {
            args: Prisma.LogisticsPartnerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLogisticsPartner>
          }
          groupBy: {
            args: Prisma.LogisticsPartnerGroupByArgs<ExtArgs>
            result: $Utils.Optional<LogisticsPartnerGroupByOutputType>[]
          }
          count: {
            args: Prisma.LogisticsPartnerCountArgs<ExtArgs>
            result: $Utils.Optional<LogisticsPartnerCountAggregateOutputType> | number
          }
        }
      }
      Shipper: {
        payload: Prisma.$ShipperPayload<ExtArgs>
        fields: Prisma.ShipperFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ShipperFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShipperPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ShipperFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShipperPayload>
          }
          findFirst: {
            args: Prisma.ShipperFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShipperPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ShipperFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShipperPayload>
          }
          findMany: {
            args: Prisma.ShipperFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShipperPayload>[]
          }
          create: {
            args: Prisma.ShipperCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShipperPayload>
          }
          createMany: {
            args: Prisma.ShipperCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ShipperCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShipperPayload>[]
          }
          delete: {
            args: Prisma.ShipperDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShipperPayload>
          }
          update: {
            args: Prisma.ShipperUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShipperPayload>
          }
          deleteMany: {
            args: Prisma.ShipperDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ShipperUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ShipperUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShipperPayload>[]
          }
          upsert: {
            args: Prisma.ShipperUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShipperPayload>
          }
          aggregate: {
            args: Prisma.ShipperAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateShipper>
          }
          groupBy: {
            args: Prisma.ShipperGroupByArgs<ExtArgs>
            result: $Utils.Optional<ShipperGroupByOutputType>[]
          }
          count: {
            args: Prisma.ShipperCountArgs<ExtArgs>
            result: $Utils.Optional<ShipperCountAggregateOutputType> | number
          }
        }
      }
      LogisticsOrder: {
        payload: Prisma.$LogisticsOrderPayload<ExtArgs>
        fields: Prisma.LogisticsOrderFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LogisticsOrderFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogisticsOrderPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LogisticsOrderFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogisticsOrderPayload>
          }
          findFirst: {
            args: Prisma.LogisticsOrderFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogisticsOrderPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LogisticsOrderFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogisticsOrderPayload>
          }
          findMany: {
            args: Prisma.LogisticsOrderFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogisticsOrderPayload>[]
          }
          create: {
            args: Prisma.LogisticsOrderCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogisticsOrderPayload>
          }
          createMany: {
            args: Prisma.LogisticsOrderCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LogisticsOrderCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogisticsOrderPayload>[]
          }
          delete: {
            args: Prisma.LogisticsOrderDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogisticsOrderPayload>
          }
          update: {
            args: Prisma.LogisticsOrderUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogisticsOrderPayload>
          }
          deleteMany: {
            args: Prisma.LogisticsOrderDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LogisticsOrderUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.LogisticsOrderUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogisticsOrderPayload>[]
          }
          upsert: {
            args: Prisma.LogisticsOrderUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogisticsOrderPayload>
          }
          aggregate: {
            args: Prisma.LogisticsOrderAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLogisticsOrder>
          }
          groupBy: {
            args: Prisma.LogisticsOrderGroupByArgs<ExtArgs>
            result: $Utils.Optional<LogisticsOrderGroupByOutputType>[]
          }
          count: {
            args: Prisma.LogisticsOrderCountArgs<ExtArgs>
            result: $Utils.Optional<LogisticsOrderCountAggregateOutputType> | number
          }
        }
      }
      UserBehavior: {
        payload: Prisma.$UserBehaviorPayload<ExtArgs>
        fields: Prisma.UserBehaviorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserBehaviorFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserBehaviorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserBehaviorFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserBehaviorPayload>
          }
          findFirst: {
            args: Prisma.UserBehaviorFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserBehaviorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserBehaviorFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserBehaviorPayload>
          }
          findMany: {
            args: Prisma.UserBehaviorFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserBehaviorPayload>[]
          }
          create: {
            args: Prisma.UserBehaviorCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserBehaviorPayload>
          }
          createMany: {
            args: Prisma.UserBehaviorCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserBehaviorCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserBehaviorPayload>[]
          }
          delete: {
            args: Prisma.UserBehaviorDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserBehaviorPayload>
          }
          update: {
            args: Prisma.UserBehaviorUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserBehaviorPayload>
          }
          deleteMany: {
            args: Prisma.UserBehaviorDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserBehaviorUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserBehaviorUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserBehaviorPayload>[]
          }
          upsert: {
            args: Prisma.UserBehaviorUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserBehaviorPayload>
          }
          aggregate: {
            args: Prisma.UserBehaviorAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserBehavior>
          }
          groupBy: {
            args: Prisma.UserBehaviorGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserBehaviorGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserBehaviorCountArgs<ExtArgs>
            result: $Utils.Optional<UserBehaviorCountAggregateOutputType> | number
          }
        }
      }
      Promotion: {
        payload: Prisma.$PromotionPayload<ExtArgs>
        fields: Prisma.PromotionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PromotionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromotionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PromotionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromotionPayload>
          }
          findFirst: {
            args: Prisma.PromotionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromotionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PromotionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromotionPayload>
          }
          findMany: {
            args: Prisma.PromotionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromotionPayload>[]
          }
          create: {
            args: Prisma.PromotionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromotionPayload>
          }
          createMany: {
            args: Prisma.PromotionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PromotionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromotionPayload>[]
          }
          delete: {
            args: Prisma.PromotionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromotionPayload>
          }
          update: {
            args: Prisma.PromotionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromotionPayload>
          }
          deleteMany: {
            args: Prisma.PromotionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PromotionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PromotionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromotionPayload>[]
          }
          upsert: {
            args: Prisma.PromotionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromotionPayload>
          }
          aggregate: {
            args: Prisma.PromotionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePromotion>
          }
          groupBy: {
            args: Prisma.PromotionGroupByArgs<ExtArgs>
            result: $Utils.Optional<PromotionGroupByOutputType>[]
          }
          count: {
            args: Prisma.PromotionCountArgs<ExtArgs>
            result: $Utils.Optional<PromotionCountAggregateOutputType> | number
          }
        }
      }
      PromotionProduct: {
        payload: Prisma.$PromotionProductPayload<ExtArgs>
        fields: Prisma.PromotionProductFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PromotionProductFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromotionProductPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PromotionProductFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromotionProductPayload>
          }
          findFirst: {
            args: Prisma.PromotionProductFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromotionProductPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PromotionProductFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromotionProductPayload>
          }
          findMany: {
            args: Prisma.PromotionProductFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromotionProductPayload>[]
          }
          create: {
            args: Prisma.PromotionProductCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromotionProductPayload>
          }
          createMany: {
            args: Prisma.PromotionProductCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PromotionProductCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromotionProductPayload>[]
          }
          delete: {
            args: Prisma.PromotionProductDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromotionProductPayload>
          }
          update: {
            args: Prisma.PromotionProductUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromotionProductPayload>
          }
          deleteMany: {
            args: Prisma.PromotionProductDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PromotionProductUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PromotionProductUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromotionProductPayload>[]
          }
          upsert: {
            args: Prisma.PromotionProductUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromotionProductPayload>
          }
          aggregate: {
            args: Prisma.PromotionProductAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePromotionProduct>
          }
          groupBy: {
            args: Prisma.PromotionProductGroupByArgs<ExtArgs>
            result: $Utils.Optional<PromotionProductGroupByOutputType>[]
          }
          count: {
            args: Prisma.PromotionProductCountArgs<ExtArgs>
            result: $Utils.Optional<PromotionProductCountAggregateOutputType> | number
          }
        }
      }
      PromotionCategory: {
        payload: Prisma.$PromotionCategoryPayload<ExtArgs>
        fields: Prisma.PromotionCategoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PromotionCategoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromotionCategoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PromotionCategoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromotionCategoryPayload>
          }
          findFirst: {
            args: Prisma.PromotionCategoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromotionCategoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PromotionCategoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromotionCategoryPayload>
          }
          findMany: {
            args: Prisma.PromotionCategoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromotionCategoryPayload>[]
          }
          create: {
            args: Prisma.PromotionCategoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromotionCategoryPayload>
          }
          createMany: {
            args: Prisma.PromotionCategoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PromotionCategoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromotionCategoryPayload>[]
          }
          delete: {
            args: Prisma.PromotionCategoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromotionCategoryPayload>
          }
          update: {
            args: Prisma.PromotionCategoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromotionCategoryPayload>
          }
          deleteMany: {
            args: Prisma.PromotionCategoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PromotionCategoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PromotionCategoryUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromotionCategoryPayload>[]
          }
          upsert: {
            args: Prisma.PromotionCategoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromotionCategoryPayload>
          }
          aggregate: {
            args: Prisma.PromotionCategoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePromotionCategory>
          }
          groupBy: {
            args: Prisma.PromotionCategoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<PromotionCategoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.PromotionCategoryCountArgs<ExtArgs>
            result: $Utils.Optional<PromotionCategoryCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Instance of a Driver Adapter, e.g., like one provided by `@prisma/adapter-planetscale`
     */
    adapter?: runtime.SqlDriverAdapterFactory | null
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    address?: AddressOmit
    seller?: SellerOmit
    enterprise?: EnterpriseOmit
    product?: ProductOmit
    productVariant?: ProductVariantOmit
    category?: CategoryOmit
    sellerProduct?: SellerProductOmit
    review?: ReviewOmit
    voucher?: VoucherOmit
    order?: OrderOmit
    orderItem?: OrderItemOmit
    payment?: PaymentOmit
    logisticsPartner?: LogisticsPartnerOmit
    shipper?: ShipperOmit
    logisticsOrder?: LogisticsOrderOmit
    userBehavior?: UserBehaviorOmit
    promotion?: PromotionOmit
    promotionProduct?: PromotionProductOmit
    promotionCategory?: PromotionCategoryOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    addresses: number
    orders: number
    reviews: number
    behaviors: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    addresses?: boolean | UserCountOutputTypeCountAddressesArgs
    orders?: boolean | UserCountOutputTypeCountOrdersArgs
    reviews?: boolean | UserCountOutputTypeCountReviewsArgs
    behaviors?: boolean | UserCountOutputTypeCountBehaviorsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAddressesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AddressWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountReviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReviewWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountBehaviorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserBehaviorWhereInput
  }


  /**
   * Count Type SellerCountOutputType
   */

  export type SellerCountOutputType = {
    products: number
    sellerProducts: number
  }

  export type SellerCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    products?: boolean | SellerCountOutputTypeCountProductsArgs
    sellerProducts?: boolean | SellerCountOutputTypeCountSellerProductsArgs
  }

  // Custom InputTypes
  /**
   * SellerCountOutputType without action
   */
  export type SellerCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SellerCountOutputType
     */
    select?: SellerCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SellerCountOutputType without action
   */
  export type SellerCountOutputTypeCountProductsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductWhereInput
  }

  /**
   * SellerCountOutputType without action
   */
  export type SellerCountOutputTypeCountSellerProductsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SellerProductWhereInput
  }


  /**
   * Count Type EnterpriseCountOutputType
   */

  export type EnterpriseCountOutputType = {
    products: number
  }

  export type EnterpriseCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    products?: boolean | EnterpriseCountOutputTypeCountProductsArgs
  }

  // Custom InputTypes
  /**
   * EnterpriseCountOutputType without action
   */
  export type EnterpriseCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EnterpriseCountOutputType
     */
    select?: EnterpriseCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * EnterpriseCountOutputType without action
   */
  export type EnterpriseCountOutputTypeCountProductsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductWhereInput
  }


  /**
   * Count Type ProductCountOutputType
   */

  export type ProductCountOutputType = {
    variants: number
    reviews: number
    orderItems: number
    behaviors: number
    promotions: number
    sellerProducts: number
  }

  export type ProductCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    variants?: boolean | ProductCountOutputTypeCountVariantsArgs
    reviews?: boolean | ProductCountOutputTypeCountReviewsArgs
    orderItems?: boolean | ProductCountOutputTypeCountOrderItemsArgs
    behaviors?: boolean | ProductCountOutputTypeCountBehaviorsArgs
    promotions?: boolean | ProductCountOutputTypeCountPromotionsArgs
    sellerProducts?: boolean | ProductCountOutputTypeCountSellerProductsArgs
  }

  // Custom InputTypes
  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductCountOutputType
     */
    select?: ProductCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountVariantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductVariantWhereInput
  }

  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountReviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReviewWhereInput
  }

  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountOrderItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderItemWhereInput
  }

  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountBehaviorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserBehaviorWhereInput
  }

  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountPromotionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PromotionProductWhereInput
  }

  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountSellerProductsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SellerProductWhereInput
  }


  /**
   * Count Type CategoryCountOutputType
   */

  export type CategoryCountOutputType = {
    children: number
    products: number
    promotions: number
  }

  export type CategoryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    children?: boolean | CategoryCountOutputTypeCountChildrenArgs
    products?: boolean | CategoryCountOutputTypeCountProductsArgs
    promotions?: boolean | CategoryCountOutputTypeCountPromotionsArgs
  }

  // Custom InputTypes
  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryCountOutputType
     */
    select?: CategoryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeCountChildrenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoryWhereInput
  }

  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeCountProductsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductWhereInput
  }

  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeCountPromotionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PromotionCategoryWhereInput
  }


  /**
   * Count Type VoucherCountOutputType
   */

  export type VoucherCountOutputType = {
    orders: number
  }

  export type VoucherCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    orders?: boolean | VoucherCountOutputTypeCountOrdersArgs
  }

  // Custom InputTypes
  /**
   * VoucherCountOutputType without action
   */
  export type VoucherCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VoucherCountOutputType
     */
    select?: VoucherCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * VoucherCountOutputType without action
   */
  export type VoucherCountOutputTypeCountOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderWhereInput
  }


  /**
   * Count Type OrderCountOutputType
   */

  export type OrderCountOutputType = {
    orderItems: number
    logisticsOrders: number
  }

  export type OrderCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    orderItems?: boolean | OrderCountOutputTypeCountOrderItemsArgs
    logisticsOrders?: boolean | OrderCountOutputTypeCountLogisticsOrdersArgs
  }

  // Custom InputTypes
  /**
   * OrderCountOutputType without action
   */
  export type OrderCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderCountOutputType
     */
    select?: OrderCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * OrderCountOutputType without action
   */
  export type OrderCountOutputTypeCountOrderItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderItemWhereInput
  }

  /**
   * OrderCountOutputType without action
   */
  export type OrderCountOutputTypeCountLogisticsOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LogisticsOrderWhereInput
  }


  /**
   * Count Type LogisticsPartnerCountOutputType
   */

  export type LogisticsPartnerCountOutputType = {
    shippers: number
    orders: number
  }

  export type LogisticsPartnerCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    shippers?: boolean | LogisticsPartnerCountOutputTypeCountShippersArgs
    orders?: boolean | LogisticsPartnerCountOutputTypeCountOrdersArgs
  }

  // Custom InputTypes
  /**
   * LogisticsPartnerCountOutputType without action
   */
  export type LogisticsPartnerCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LogisticsPartnerCountOutputType
     */
    select?: LogisticsPartnerCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * LogisticsPartnerCountOutputType without action
   */
  export type LogisticsPartnerCountOutputTypeCountShippersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ShipperWhereInput
  }

  /**
   * LogisticsPartnerCountOutputType without action
   */
  export type LogisticsPartnerCountOutputTypeCountOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LogisticsOrderWhereInput
  }


  /**
   * Count Type ShipperCountOutputType
   */

  export type ShipperCountOutputType = {
    assignedOrders: number
  }

  export type ShipperCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assignedOrders?: boolean | ShipperCountOutputTypeCountAssignedOrdersArgs
  }

  // Custom InputTypes
  /**
   * ShipperCountOutputType without action
   */
  export type ShipperCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShipperCountOutputType
     */
    select?: ShipperCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ShipperCountOutputType without action
   */
  export type ShipperCountOutputTypeCountAssignedOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LogisticsOrderWhereInput
  }


  /**
   * Count Type PromotionCountOutputType
   */

  export type PromotionCountOutputType = {
    products: number
    categories: number
  }

  export type PromotionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    products?: boolean | PromotionCountOutputTypeCountProductsArgs
    categories?: boolean | PromotionCountOutputTypeCountCategoriesArgs
  }

  // Custom InputTypes
  /**
   * PromotionCountOutputType without action
   */
  export type PromotionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PromotionCountOutputType
     */
    select?: PromotionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PromotionCountOutputType without action
   */
  export type PromotionCountOutputTypeCountProductsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PromotionProductWhereInput
  }

  /**
   * PromotionCountOutputType without action
   */
  export type PromotionCountOutputTypeCountCategoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PromotionCategoryWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    name: string | null
    avatar: string | null
    phone: string | null
    role: $Enums.Role | null
    isVerified: boolean | null
    verificationToken: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    name: string | null
    avatar: string | null
    phone: string | null
    role: $Enums.Role | null
    isVerified: boolean | null
    verificationToken: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    password: number
    name: number
    avatar: number
    phone: number
    role: number
    isVerified: number
    verificationToken: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    avatar?: true
    phone?: true
    role?: true
    isVerified?: true
    verificationToken?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    avatar?: true
    phone?: true
    role?: true
    isVerified?: true
    verificationToken?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    avatar?: true
    phone?: true
    role?: true
    isVerified?: true
    verificationToken?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    password: string
    name: string
    avatar: string | null
    phone: string | null
    role: $Enums.Role
    isVerified: boolean
    verificationToken: string | null
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    avatar?: boolean
    phone?: boolean
    role?: boolean
    isVerified?: boolean
    verificationToken?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    seller?: boolean | User$sellerArgs<ExtArgs>
    enterprise?: boolean | User$enterpriseArgs<ExtArgs>
    logistics?: boolean | User$logisticsArgs<ExtArgs>
    addresses?: boolean | User$addressesArgs<ExtArgs>
    orders?: boolean | User$ordersArgs<ExtArgs>
    reviews?: boolean | User$reviewsArgs<ExtArgs>
    behaviors?: boolean | User$behaviorsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    avatar?: boolean
    phone?: boolean
    role?: boolean
    isVerified?: boolean
    verificationToken?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    avatar?: boolean
    phone?: boolean
    role?: boolean
    isVerified?: boolean
    verificationToken?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    avatar?: boolean
    phone?: boolean
    role?: boolean
    isVerified?: boolean
    verificationToken?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "password" | "name" | "avatar" | "phone" | "role" | "isVerified" | "verificationToken" | "isActive" | "createdAt" | "updatedAt", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    seller?: boolean | User$sellerArgs<ExtArgs>
    enterprise?: boolean | User$enterpriseArgs<ExtArgs>
    logistics?: boolean | User$logisticsArgs<ExtArgs>
    addresses?: boolean | User$addressesArgs<ExtArgs>
    orders?: boolean | User$ordersArgs<ExtArgs>
    reviews?: boolean | User$reviewsArgs<ExtArgs>
    behaviors?: boolean | User$behaviorsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      seller: Prisma.$SellerPayload<ExtArgs> | null
      enterprise: Prisma.$EnterprisePayload<ExtArgs> | null
      logistics: Prisma.$LogisticsPartnerPayload<ExtArgs> | null
      addresses: Prisma.$AddressPayload<ExtArgs>[]
      orders: Prisma.$OrderPayload<ExtArgs>[]
      reviews: Prisma.$ReviewPayload<ExtArgs>[]
      behaviors: Prisma.$UserBehaviorPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      password: string
      name: string
      avatar: string | null
      phone: string | null
      role: $Enums.Role
      isVerified: boolean
      verificationToken: string | null
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    seller<T extends User$sellerArgs<ExtArgs> = {}>(args?: Subset<T, User$sellerArgs<ExtArgs>>): Prisma__SellerClient<$Result.GetResult<Prisma.$SellerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    enterprise<T extends User$enterpriseArgs<ExtArgs> = {}>(args?: Subset<T, User$enterpriseArgs<ExtArgs>>): Prisma__EnterpriseClient<$Result.GetResult<Prisma.$EnterprisePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    logistics<T extends User$logisticsArgs<ExtArgs> = {}>(args?: Subset<T, User$logisticsArgs<ExtArgs>>): Prisma__LogisticsPartnerClient<$Result.GetResult<Prisma.$LogisticsPartnerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    addresses<T extends User$addressesArgs<ExtArgs> = {}>(args?: Subset<T, User$addressesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    orders<T extends User$ordersArgs<ExtArgs> = {}>(args?: Subset<T, User$ordersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    reviews<T extends User$reviewsArgs<ExtArgs> = {}>(args?: Subset<T, User$reviewsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    behaviors<T extends User$behaviorsArgs<ExtArgs> = {}>(args?: Subset<T, User$behaviorsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserBehaviorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly avatar: FieldRef<"User", 'String'>
    readonly phone: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'Role'>
    readonly isVerified: FieldRef<"User", 'Boolean'>
    readonly verificationToken: FieldRef<"User", 'String'>
    readonly isActive: FieldRef<"User", 'Boolean'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.seller
   */
  export type User$sellerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Seller
     */
    select?: SellerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Seller
     */
    omit?: SellerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SellerInclude<ExtArgs> | null
    where?: SellerWhereInput
  }

  /**
   * User.enterprise
   */
  export type User$enterpriseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enterprise
     */
    select?: EnterpriseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Enterprise
     */
    omit?: EnterpriseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnterpriseInclude<ExtArgs> | null
    where?: EnterpriseWhereInput
  }

  /**
   * User.logistics
   */
  export type User$logisticsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LogisticsPartner
     */
    select?: LogisticsPartnerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LogisticsPartner
     */
    omit?: LogisticsPartnerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogisticsPartnerInclude<ExtArgs> | null
    where?: LogisticsPartnerWhereInput
  }

  /**
   * User.addresses
   */
  export type User$addressesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Address
     */
    omit?: AddressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
    where?: AddressWhereInput
    orderBy?: AddressOrderByWithRelationInput | AddressOrderByWithRelationInput[]
    cursor?: AddressWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AddressScalarFieldEnum | AddressScalarFieldEnum[]
  }

  /**
   * User.orders
   */
  export type User$ordersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    where?: OrderWhereInput
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    cursor?: OrderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * User.reviews
   */
  export type User$reviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    where?: ReviewWhereInput
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    cursor?: ReviewWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }

  /**
   * User.behaviors
   */
  export type User$behaviorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBehavior
     */
    select?: UserBehaviorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserBehavior
     */
    omit?: UserBehaviorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBehaviorInclude<ExtArgs> | null
    where?: UserBehaviorWhereInput
    orderBy?: UserBehaviorOrderByWithRelationInput | UserBehaviorOrderByWithRelationInput[]
    cursor?: UserBehaviorWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserBehaviorScalarFieldEnum | UserBehaviorScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Address
   */

  export type AggregateAddress = {
    _count: AddressCountAggregateOutputType | null
    _min: AddressMinAggregateOutputType | null
    _max: AddressMaxAggregateOutputType | null
  }

  export type AddressMinAggregateOutputType = {
    id: string | null
    userId: string | null
    label: string | null
    fullName: string | null
    phone: string | null
    province: string | null
    district: string | null
    ward: string | null
    street: string | null
    isDefault: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AddressMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    label: string | null
    fullName: string | null
    phone: string | null
    province: string | null
    district: string | null
    ward: string | null
    street: string | null
    isDefault: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AddressCountAggregateOutputType = {
    id: number
    userId: number
    label: number
    fullName: number
    phone: number
    province: number
    district: number
    ward: number
    street: number
    isDefault: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AddressMinAggregateInputType = {
    id?: true
    userId?: true
    label?: true
    fullName?: true
    phone?: true
    province?: true
    district?: true
    ward?: true
    street?: true
    isDefault?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AddressMaxAggregateInputType = {
    id?: true
    userId?: true
    label?: true
    fullName?: true
    phone?: true
    province?: true
    district?: true
    ward?: true
    street?: true
    isDefault?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AddressCountAggregateInputType = {
    id?: true
    userId?: true
    label?: true
    fullName?: true
    phone?: true
    province?: true
    district?: true
    ward?: true
    street?: true
    isDefault?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AddressAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Address to aggregate.
     */
    where?: AddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Addresses to fetch.
     */
    orderBy?: AddressOrderByWithRelationInput | AddressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Addresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Addresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Addresses
    **/
    _count?: true | AddressCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AddressMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AddressMaxAggregateInputType
  }

  export type GetAddressAggregateType<T extends AddressAggregateArgs> = {
        [P in keyof T & keyof AggregateAddress]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAddress[P]>
      : GetScalarType<T[P], AggregateAddress[P]>
  }




  export type AddressGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AddressWhereInput
    orderBy?: AddressOrderByWithAggregationInput | AddressOrderByWithAggregationInput[]
    by: AddressScalarFieldEnum[] | AddressScalarFieldEnum
    having?: AddressScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AddressCountAggregateInputType | true
    _min?: AddressMinAggregateInputType
    _max?: AddressMaxAggregateInputType
  }

  export type AddressGroupByOutputType = {
    id: string
    userId: string
    label: string | null
    fullName: string
    phone: string
    province: string
    district: string
    ward: string
    street: string
    isDefault: boolean
    createdAt: Date
    updatedAt: Date
    _count: AddressCountAggregateOutputType | null
    _min: AddressMinAggregateOutputType | null
    _max: AddressMaxAggregateOutputType | null
  }

  type GetAddressGroupByPayload<T extends AddressGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AddressGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AddressGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AddressGroupByOutputType[P]>
            : GetScalarType<T[P], AddressGroupByOutputType[P]>
        }
      >
    >


  export type AddressSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    label?: boolean
    fullName?: boolean
    phone?: boolean
    province?: boolean
    district?: boolean
    ward?: boolean
    street?: boolean
    isDefault?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["address"]>

  export type AddressSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    label?: boolean
    fullName?: boolean
    phone?: boolean
    province?: boolean
    district?: boolean
    ward?: boolean
    street?: boolean
    isDefault?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["address"]>

  export type AddressSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    label?: boolean
    fullName?: boolean
    phone?: boolean
    province?: boolean
    district?: boolean
    ward?: boolean
    street?: boolean
    isDefault?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["address"]>

  export type AddressSelectScalar = {
    id?: boolean
    userId?: boolean
    label?: boolean
    fullName?: boolean
    phone?: boolean
    province?: boolean
    district?: boolean
    ward?: boolean
    street?: boolean
    isDefault?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AddressOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "label" | "fullName" | "phone" | "province" | "district" | "ward" | "street" | "isDefault" | "createdAt" | "updatedAt", ExtArgs["result"]["address"]>
  export type AddressInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AddressIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AddressIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $AddressPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Address"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      label: string | null
      fullName: string
      phone: string
      province: string
      district: string
      ward: string
      street: string
      isDefault: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["address"]>
    composites: {}
  }

  type AddressGetPayload<S extends boolean | null | undefined | AddressDefaultArgs> = $Result.GetResult<Prisma.$AddressPayload, S>

  type AddressCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AddressFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AddressCountAggregateInputType | true
    }

  export interface AddressDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Address'], meta: { name: 'Address' } }
    /**
     * Find zero or one Address that matches the filter.
     * @param {AddressFindUniqueArgs} args - Arguments to find a Address
     * @example
     * // Get one Address
     * const address = await prisma.address.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AddressFindUniqueArgs>(args: SelectSubset<T, AddressFindUniqueArgs<ExtArgs>>): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Address that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AddressFindUniqueOrThrowArgs} args - Arguments to find a Address
     * @example
     * // Get one Address
     * const address = await prisma.address.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AddressFindUniqueOrThrowArgs>(args: SelectSubset<T, AddressFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Address that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressFindFirstArgs} args - Arguments to find a Address
     * @example
     * // Get one Address
     * const address = await prisma.address.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AddressFindFirstArgs>(args?: SelectSubset<T, AddressFindFirstArgs<ExtArgs>>): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Address that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressFindFirstOrThrowArgs} args - Arguments to find a Address
     * @example
     * // Get one Address
     * const address = await prisma.address.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AddressFindFirstOrThrowArgs>(args?: SelectSubset<T, AddressFindFirstOrThrowArgs<ExtArgs>>): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Addresses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Addresses
     * const addresses = await prisma.address.findMany()
     * 
     * // Get first 10 Addresses
     * const addresses = await prisma.address.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const addressWithIdOnly = await prisma.address.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AddressFindManyArgs>(args?: SelectSubset<T, AddressFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Address.
     * @param {AddressCreateArgs} args - Arguments to create a Address.
     * @example
     * // Create one Address
     * const Address = await prisma.address.create({
     *   data: {
     *     // ... data to create a Address
     *   }
     * })
     * 
     */
    create<T extends AddressCreateArgs>(args: SelectSubset<T, AddressCreateArgs<ExtArgs>>): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Addresses.
     * @param {AddressCreateManyArgs} args - Arguments to create many Addresses.
     * @example
     * // Create many Addresses
     * const address = await prisma.address.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AddressCreateManyArgs>(args?: SelectSubset<T, AddressCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Addresses and returns the data saved in the database.
     * @param {AddressCreateManyAndReturnArgs} args - Arguments to create many Addresses.
     * @example
     * // Create many Addresses
     * const address = await prisma.address.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Addresses and only return the `id`
     * const addressWithIdOnly = await prisma.address.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AddressCreateManyAndReturnArgs>(args?: SelectSubset<T, AddressCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Address.
     * @param {AddressDeleteArgs} args - Arguments to delete one Address.
     * @example
     * // Delete one Address
     * const Address = await prisma.address.delete({
     *   where: {
     *     // ... filter to delete one Address
     *   }
     * })
     * 
     */
    delete<T extends AddressDeleteArgs>(args: SelectSubset<T, AddressDeleteArgs<ExtArgs>>): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Address.
     * @param {AddressUpdateArgs} args - Arguments to update one Address.
     * @example
     * // Update one Address
     * const address = await prisma.address.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AddressUpdateArgs>(args: SelectSubset<T, AddressUpdateArgs<ExtArgs>>): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Addresses.
     * @param {AddressDeleteManyArgs} args - Arguments to filter Addresses to delete.
     * @example
     * // Delete a few Addresses
     * const { count } = await prisma.address.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AddressDeleteManyArgs>(args?: SelectSubset<T, AddressDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Addresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Addresses
     * const address = await prisma.address.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AddressUpdateManyArgs>(args: SelectSubset<T, AddressUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Addresses and returns the data updated in the database.
     * @param {AddressUpdateManyAndReturnArgs} args - Arguments to update many Addresses.
     * @example
     * // Update many Addresses
     * const address = await prisma.address.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Addresses and only return the `id`
     * const addressWithIdOnly = await prisma.address.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AddressUpdateManyAndReturnArgs>(args: SelectSubset<T, AddressUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Address.
     * @param {AddressUpsertArgs} args - Arguments to update or create a Address.
     * @example
     * // Update or create a Address
     * const address = await prisma.address.upsert({
     *   create: {
     *     // ... data to create a Address
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Address we want to update
     *   }
     * })
     */
    upsert<T extends AddressUpsertArgs>(args: SelectSubset<T, AddressUpsertArgs<ExtArgs>>): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Addresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressCountArgs} args - Arguments to filter Addresses to count.
     * @example
     * // Count the number of Addresses
     * const count = await prisma.address.count({
     *   where: {
     *     // ... the filter for the Addresses we want to count
     *   }
     * })
    **/
    count<T extends AddressCountArgs>(
      args?: Subset<T, AddressCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AddressCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Address.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AddressAggregateArgs>(args: Subset<T, AddressAggregateArgs>): Prisma.PrismaPromise<GetAddressAggregateType<T>>

    /**
     * Group by Address.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AddressGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AddressGroupByArgs['orderBy'] }
        : { orderBy?: AddressGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AddressGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAddressGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Address model
   */
  readonly fields: AddressFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Address.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AddressClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Address model
   */
  interface AddressFieldRefs {
    readonly id: FieldRef<"Address", 'String'>
    readonly userId: FieldRef<"Address", 'String'>
    readonly label: FieldRef<"Address", 'String'>
    readonly fullName: FieldRef<"Address", 'String'>
    readonly phone: FieldRef<"Address", 'String'>
    readonly province: FieldRef<"Address", 'String'>
    readonly district: FieldRef<"Address", 'String'>
    readonly ward: FieldRef<"Address", 'String'>
    readonly street: FieldRef<"Address", 'String'>
    readonly isDefault: FieldRef<"Address", 'Boolean'>
    readonly createdAt: FieldRef<"Address", 'DateTime'>
    readonly updatedAt: FieldRef<"Address", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Address findUnique
   */
  export type AddressFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Address
     */
    omit?: AddressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * Filter, which Address to fetch.
     */
    where: AddressWhereUniqueInput
  }

  /**
   * Address findUniqueOrThrow
   */
  export type AddressFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Address
     */
    omit?: AddressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * Filter, which Address to fetch.
     */
    where: AddressWhereUniqueInput
  }

  /**
   * Address findFirst
   */
  export type AddressFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Address
     */
    omit?: AddressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * Filter, which Address to fetch.
     */
    where?: AddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Addresses to fetch.
     */
    orderBy?: AddressOrderByWithRelationInput | AddressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Addresses.
     */
    cursor?: AddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Addresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Addresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Addresses.
     */
    distinct?: AddressScalarFieldEnum | AddressScalarFieldEnum[]
  }

  /**
   * Address findFirstOrThrow
   */
  export type AddressFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Address
     */
    omit?: AddressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * Filter, which Address to fetch.
     */
    where?: AddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Addresses to fetch.
     */
    orderBy?: AddressOrderByWithRelationInput | AddressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Addresses.
     */
    cursor?: AddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Addresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Addresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Addresses.
     */
    distinct?: AddressScalarFieldEnum | AddressScalarFieldEnum[]
  }

  /**
   * Address findMany
   */
  export type AddressFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Address
     */
    omit?: AddressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * Filter, which Addresses to fetch.
     */
    where?: AddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Addresses to fetch.
     */
    orderBy?: AddressOrderByWithRelationInput | AddressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Addresses.
     */
    cursor?: AddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Addresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Addresses.
     */
    skip?: number
    distinct?: AddressScalarFieldEnum | AddressScalarFieldEnum[]
  }

  /**
   * Address create
   */
  export type AddressCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Address
     */
    omit?: AddressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * The data needed to create a Address.
     */
    data: XOR<AddressCreateInput, AddressUncheckedCreateInput>
  }

  /**
   * Address createMany
   */
  export type AddressCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Addresses.
     */
    data: AddressCreateManyInput | AddressCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Address createManyAndReturn
   */
  export type AddressCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Address
     */
    omit?: AddressOmit<ExtArgs> | null
    /**
     * The data used to create many Addresses.
     */
    data: AddressCreateManyInput | AddressCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Address update
   */
  export type AddressUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Address
     */
    omit?: AddressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * The data needed to update a Address.
     */
    data: XOR<AddressUpdateInput, AddressUncheckedUpdateInput>
    /**
     * Choose, which Address to update.
     */
    where: AddressWhereUniqueInput
  }

  /**
   * Address updateMany
   */
  export type AddressUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Addresses.
     */
    data: XOR<AddressUpdateManyMutationInput, AddressUncheckedUpdateManyInput>
    /**
     * Filter which Addresses to update
     */
    where?: AddressWhereInput
    /**
     * Limit how many Addresses to update.
     */
    limit?: number
  }

  /**
   * Address updateManyAndReturn
   */
  export type AddressUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Address
     */
    omit?: AddressOmit<ExtArgs> | null
    /**
     * The data used to update Addresses.
     */
    data: XOR<AddressUpdateManyMutationInput, AddressUncheckedUpdateManyInput>
    /**
     * Filter which Addresses to update
     */
    where?: AddressWhereInput
    /**
     * Limit how many Addresses to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Address upsert
   */
  export type AddressUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Address
     */
    omit?: AddressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * The filter to search for the Address to update in case it exists.
     */
    where: AddressWhereUniqueInput
    /**
     * In case the Address found by the `where` argument doesn't exist, create a new Address with this data.
     */
    create: XOR<AddressCreateInput, AddressUncheckedCreateInput>
    /**
     * In case the Address was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AddressUpdateInput, AddressUncheckedUpdateInput>
  }

  /**
   * Address delete
   */
  export type AddressDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Address
     */
    omit?: AddressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * Filter which Address to delete.
     */
    where: AddressWhereUniqueInput
  }

  /**
   * Address deleteMany
   */
  export type AddressDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Addresses to delete
     */
    where?: AddressWhereInput
    /**
     * Limit how many Addresses to delete.
     */
    limit?: number
  }

  /**
   * Address without action
   */
  export type AddressDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Address
     */
    omit?: AddressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
  }


  /**
   * Model Seller
   */

  export type AggregateSeller = {
    _count: SellerCountAggregateOutputType | null
    _avg: SellerAvgAggregateOutputType | null
    _sum: SellerSumAggregateOutputType | null
    _min: SellerMinAggregateOutputType | null
    _max: SellerMaxAggregateOutputType | null
  }

  export type SellerAvgAggregateOutputType = {
    rating: number | null
  }

  export type SellerSumAggregateOutputType = {
    rating: number | null
  }

  export type SellerMinAggregateOutputType = {
    id: string | null
    userId: string | null
    storeName: string | null
    verified: boolean | null
    rating: number | null
  }

  export type SellerMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    storeName: string | null
    verified: boolean | null
    rating: number | null
  }

  export type SellerCountAggregateOutputType = {
    id: number
    userId: number
    storeName: number
    verified: number
    rating: number
    _all: number
  }


  export type SellerAvgAggregateInputType = {
    rating?: true
  }

  export type SellerSumAggregateInputType = {
    rating?: true
  }

  export type SellerMinAggregateInputType = {
    id?: true
    userId?: true
    storeName?: true
    verified?: true
    rating?: true
  }

  export type SellerMaxAggregateInputType = {
    id?: true
    userId?: true
    storeName?: true
    verified?: true
    rating?: true
  }

  export type SellerCountAggregateInputType = {
    id?: true
    userId?: true
    storeName?: true
    verified?: true
    rating?: true
    _all?: true
  }

  export type SellerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Seller to aggregate.
     */
    where?: SellerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sellers to fetch.
     */
    orderBy?: SellerOrderByWithRelationInput | SellerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SellerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sellers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sellers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sellers
    **/
    _count?: true | SellerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SellerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SellerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SellerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SellerMaxAggregateInputType
  }

  export type GetSellerAggregateType<T extends SellerAggregateArgs> = {
        [P in keyof T & keyof AggregateSeller]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSeller[P]>
      : GetScalarType<T[P], AggregateSeller[P]>
  }




  export type SellerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SellerWhereInput
    orderBy?: SellerOrderByWithAggregationInput | SellerOrderByWithAggregationInput[]
    by: SellerScalarFieldEnum[] | SellerScalarFieldEnum
    having?: SellerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SellerCountAggregateInputType | true
    _avg?: SellerAvgAggregateInputType
    _sum?: SellerSumAggregateInputType
    _min?: SellerMinAggregateInputType
    _max?: SellerMaxAggregateInputType
  }

  export type SellerGroupByOutputType = {
    id: string
    userId: string
    storeName: string
    verified: boolean
    rating: number | null
    _count: SellerCountAggregateOutputType | null
    _avg: SellerAvgAggregateOutputType | null
    _sum: SellerSumAggregateOutputType | null
    _min: SellerMinAggregateOutputType | null
    _max: SellerMaxAggregateOutputType | null
  }

  type GetSellerGroupByPayload<T extends SellerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SellerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SellerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SellerGroupByOutputType[P]>
            : GetScalarType<T[P], SellerGroupByOutputType[P]>
        }
      >
    >


  export type SellerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    storeName?: boolean
    verified?: boolean
    rating?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    products?: boolean | Seller$productsArgs<ExtArgs>
    sellerProducts?: boolean | Seller$sellerProductsArgs<ExtArgs>
    _count?: boolean | SellerCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["seller"]>

  export type SellerSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    storeName?: boolean
    verified?: boolean
    rating?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["seller"]>

  export type SellerSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    storeName?: boolean
    verified?: boolean
    rating?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["seller"]>

  export type SellerSelectScalar = {
    id?: boolean
    userId?: boolean
    storeName?: boolean
    verified?: boolean
    rating?: boolean
  }

  export type SellerOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "storeName" | "verified" | "rating", ExtArgs["result"]["seller"]>
  export type SellerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    products?: boolean | Seller$productsArgs<ExtArgs>
    sellerProducts?: boolean | Seller$sellerProductsArgs<ExtArgs>
    _count?: boolean | SellerCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SellerIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SellerIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $SellerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Seller"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      products: Prisma.$ProductPayload<ExtArgs>[]
      sellerProducts: Prisma.$SellerProductPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      storeName: string
      verified: boolean
      rating: number | null
    }, ExtArgs["result"]["seller"]>
    composites: {}
  }

  type SellerGetPayload<S extends boolean | null | undefined | SellerDefaultArgs> = $Result.GetResult<Prisma.$SellerPayload, S>

  type SellerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SellerFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SellerCountAggregateInputType | true
    }

  export interface SellerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Seller'], meta: { name: 'Seller' } }
    /**
     * Find zero or one Seller that matches the filter.
     * @param {SellerFindUniqueArgs} args - Arguments to find a Seller
     * @example
     * // Get one Seller
     * const seller = await prisma.seller.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SellerFindUniqueArgs>(args: SelectSubset<T, SellerFindUniqueArgs<ExtArgs>>): Prisma__SellerClient<$Result.GetResult<Prisma.$SellerPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Seller that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SellerFindUniqueOrThrowArgs} args - Arguments to find a Seller
     * @example
     * // Get one Seller
     * const seller = await prisma.seller.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SellerFindUniqueOrThrowArgs>(args: SelectSubset<T, SellerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SellerClient<$Result.GetResult<Prisma.$SellerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Seller that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SellerFindFirstArgs} args - Arguments to find a Seller
     * @example
     * // Get one Seller
     * const seller = await prisma.seller.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SellerFindFirstArgs>(args?: SelectSubset<T, SellerFindFirstArgs<ExtArgs>>): Prisma__SellerClient<$Result.GetResult<Prisma.$SellerPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Seller that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SellerFindFirstOrThrowArgs} args - Arguments to find a Seller
     * @example
     * // Get one Seller
     * const seller = await prisma.seller.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SellerFindFirstOrThrowArgs>(args?: SelectSubset<T, SellerFindFirstOrThrowArgs<ExtArgs>>): Prisma__SellerClient<$Result.GetResult<Prisma.$SellerPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Sellers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SellerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sellers
     * const sellers = await prisma.seller.findMany()
     * 
     * // Get first 10 Sellers
     * const sellers = await prisma.seller.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sellerWithIdOnly = await prisma.seller.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SellerFindManyArgs>(args?: SelectSubset<T, SellerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SellerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Seller.
     * @param {SellerCreateArgs} args - Arguments to create a Seller.
     * @example
     * // Create one Seller
     * const Seller = await prisma.seller.create({
     *   data: {
     *     // ... data to create a Seller
     *   }
     * })
     * 
     */
    create<T extends SellerCreateArgs>(args: SelectSubset<T, SellerCreateArgs<ExtArgs>>): Prisma__SellerClient<$Result.GetResult<Prisma.$SellerPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Sellers.
     * @param {SellerCreateManyArgs} args - Arguments to create many Sellers.
     * @example
     * // Create many Sellers
     * const seller = await prisma.seller.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SellerCreateManyArgs>(args?: SelectSubset<T, SellerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Sellers and returns the data saved in the database.
     * @param {SellerCreateManyAndReturnArgs} args - Arguments to create many Sellers.
     * @example
     * // Create many Sellers
     * const seller = await prisma.seller.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Sellers and only return the `id`
     * const sellerWithIdOnly = await prisma.seller.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SellerCreateManyAndReturnArgs>(args?: SelectSubset<T, SellerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SellerPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Seller.
     * @param {SellerDeleteArgs} args - Arguments to delete one Seller.
     * @example
     * // Delete one Seller
     * const Seller = await prisma.seller.delete({
     *   where: {
     *     // ... filter to delete one Seller
     *   }
     * })
     * 
     */
    delete<T extends SellerDeleteArgs>(args: SelectSubset<T, SellerDeleteArgs<ExtArgs>>): Prisma__SellerClient<$Result.GetResult<Prisma.$SellerPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Seller.
     * @param {SellerUpdateArgs} args - Arguments to update one Seller.
     * @example
     * // Update one Seller
     * const seller = await prisma.seller.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SellerUpdateArgs>(args: SelectSubset<T, SellerUpdateArgs<ExtArgs>>): Prisma__SellerClient<$Result.GetResult<Prisma.$SellerPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Sellers.
     * @param {SellerDeleteManyArgs} args - Arguments to filter Sellers to delete.
     * @example
     * // Delete a few Sellers
     * const { count } = await prisma.seller.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SellerDeleteManyArgs>(args?: SelectSubset<T, SellerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sellers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SellerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sellers
     * const seller = await prisma.seller.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SellerUpdateManyArgs>(args: SelectSubset<T, SellerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sellers and returns the data updated in the database.
     * @param {SellerUpdateManyAndReturnArgs} args - Arguments to update many Sellers.
     * @example
     * // Update many Sellers
     * const seller = await prisma.seller.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Sellers and only return the `id`
     * const sellerWithIdOnly = await prisma.seller.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SellerUpdateManyAndReturnArgs>(args: SelectSubset<T, SellerUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SellerPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Seller.
     * @param {SellerUpsertArgs} args - Arguments to update or create a Seller.
     * @example
     * // Update or create a Seller
     * const seller = await prisma.seller.upsert({
     *   create: {
     *     // ... data to create a Seller
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Seller we want to update
     *   }
     * })
     */
    upsert<T extends SellerUpsertArgs>(args: SelectSubset<T, SellerUpsertArgs<ExtArgs>>): Prisma__SellerClient<$Result.GetResult<Prisma.$SellerPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Sellers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SellerCountArgs} args - Arguments to filter Sellers to count.
     * @example
     * // Count the number of Sellers
     * const count = await prisma.seller.count({
     *   where: {
     *     // ... the filter for the Sellers we want to count
     *   }
     * })
    **/
    count<T extends SellerCountArgs>(
      args?: Subset<T, SellerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SellerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Seller.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SellerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SellerAggregateArgs>(args: Subset<T, SellerAggregateArgs>): Prisma.PrismaPromise<GetSellerAggregateType<T>>

    /**
     * Group by Seller.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SellerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SellerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SellerGroupByArgs['orderBy'] }
        : { orderBy?: SellerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SellerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSellerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Seller model
   */
  readonly fields: SellerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Seller.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SellerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    products<T extends Seller$productsArgs<ExtArgs> = {}>(args?: Subset<T, Seller$productsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    sellerProducts<T extends Seller$sellerProductsArgs<ExtArgs> = {}>(args?: Subset<T, Seller$sellerProductsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SellerProductPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Seller model
   */
  interface SellerFieldRefs {
    readonly id: FieldRef<"Seller", 'String'>
    readonly userId: FieldRef<"Seller", 'String'>
    readonly storeName: FieldRef<"Seller", 'String'>
    readonly verified: FieldRef<"Seller", 'Boolean'>
    readonly rating: FieldRef<"Seller", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * Seller findUnique
   */
  export type SellerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Seller
     */
    select?: SellerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Seller
     */
    omit?: SellerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SellerInclude<ExtArgs> | null
    /**
     * Filter, which Seller to fetch.
     */
    where: SellerWhereUniqueInput
  }

  /**
   * Seller findUniqueOrThrow
   */
  export type SellerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Seller
     */
    select?: SellerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Seller
     */
    omit?: SellerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SellerInclude<ExtArgs> | null
    /**
     * Filter, which Seller to fetch.
     */
    where: SellerWhereUniqueInput
  }

  /**
   * Seller findFirst
   */
  export type SellerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Seller
     */
    select?: SellerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Seller
     */
    omit?: SellerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SellerInclude<ExtArgs> | null
    /**
     * Filter, which Seller to fetch.
     */
    where?: SellerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sellers to fetch.
     */
    orderBy?: SellerOrderByWithRelationInput | SellerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sellers.
     */
    cursor?: SellerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sellers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sellers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sellers.
     */
    distinct?: SellerScalarFieldEnum | SellerScalarFieldEnum[]
  }

  /**
   * Seller findFirstOrThrow
   */
  export type SellerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Seller
     */
    select?: SellerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Seller
     */
    omit?: SellerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SellerInclude<ExtArgs> | null
    /**
     * Filter, which Seller to fetch.
     */
    where?: SellerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sellers to fetch.
     */
    orderBy?: SellerOrderByWithRelationInput | SellerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sellers.
     */
    cursor?: SellerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sellers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sellers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sellers.
     */
    distinct?: SellerScalarFieldEnum | SellerScalarFieldEnum[]
  }

  /**
   * Seller findMany
   */
  export type SellerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Seller
     */
    select?: SellerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Seller
     */
    omit?: SellerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SellerInclude<ExtArgs> | null
    /**
     * Filter, which Sellers to fetch.
     */
    where?: SellerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sellers to fetch.
     */
    orderBy?: SellerOrderByWithRelationInput | SellerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sellers.
     */
    cursor?: SellerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sellers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sellers.
     */
    skip?: number
    distinct?: SellerScalarFieldEnum | SellerScalarFieldEnum[]
  }

  /**
   * Seller create
   */
  export type SellerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Seller
     */
    select?: SellerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Seller
     */
    omit?: SellerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SellerInclude<ExtArgs> | null
    /**
     * The data needed to create a Seller.
     */
    data: XOR<SellerCreateInput, SellerUncheckedCreateInput>
  }

  /**
   * Seller createMany
   */
  export type SellerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sellers.
     */
    data: SellerCreateManyInput | SellerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Seller createManyAndReturn
   */
  export type SellerCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Seller
     */
    select?: SellerSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Seller
     */
    omit?: SellerOmit<ExtArgs> | null
    /**
     * The data used to create many Sellers.
     */
    data: SellerCreateManyInput | SellerCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SellerIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Seller update
   */
  export type SellerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Seller
     */
    select?: SellerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Seller
     */
    omit?: SellerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SellerInclude<ExtArgs> | null
    /**
     * The data needed to update a Seller.
     */
    data: XOR<SellerUpdateInput, SellerUncheckedUpdateInput>
    /**
     * Choose, which Seller to update.
     */
    where: SellerWhereUniqueInput
  }

  /**
   * Seller updateMany
   */
  export type SellerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sellers.
     */
    data: XOR<SellerUpdateManyMutationInput, SellerUncheckedUpdateManyInput>
    /**
     * Filter which Sellers to update
     */
    where?: SellerWhereInput
    /**
     * Limit how many Sellers to update.
     */
    limit?: number
  }

  /**
   * Seller updateManyAndReturn
   */
  export type SellerUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Seller
     */
    select?: SellerSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Seller
     */
    omit?: SellerOmit<ExtArgs> | null
    /**
     * The data used to update Sellers.
     */
    data: XOR<SellerUpdateManyMutationInput, SellerUncheckedUpdateManyInput>
    /**
     * Filter which Sellers to update
     */
    where?: SellerWhereInput
    /**
     * Limit how many Sellers to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SellerIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Seller upsert
   */
  export type SellerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Seller
     */
    select?: SellerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Seller
     */
    omit?: SellerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SellerInclude<ExtArgs> | null
    /**
     * The filter to search for the Seller to update in case it exists.
     */
    where: SellerWhereUniqueInput
    /**
     * In case the Seller found by the `where` argument doesn't exist, create a new Seller with this data.
     */
    create: XOR<SellerCreateInput, SellerUncheckedCreateInput>
    /**
     * In case the Seller was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SellerUpdateInput, SellerUncheckedUpdateInput>
  }

  /**
   * Seller delete
   */
  export type SellerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Seller
     */
    select?: SellerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Seller
     */
    omit?: SellerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SellerInclude<ExtArgs> | null
    /**
     * Filter which Seller to delete.
     */
    where: SellerWhereUniqueInput
  }

  /**
   * Seller deleteMany
   */
  export type SellerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sellers to delete
     */
    where?: SellerWhereInput
    /**
     * Limit how many Sellers to delete.
     */
    limit?: number
  }

  /**
   * Seller.products
   */
  export type Seller$productsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    where?: ProductWhereInput
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    cursor?: ProductWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Seller.sellerProducts
   */
  export type Seller$sellerProductsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SellerProduct
     */
    select?: SellerProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SellerProduct
     */
    omit?: SellerProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SellerProductInclude<ExtArgs> | null
    where?: SellerProductWhereInput
    orderBy?: SellerProductOrderByWithRelationInput | SellerProductOrderByWithRelationInput[]
    cursor?: SellerProductWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SellerProductScalarFieldEnum | SellerProductScalarFieldEnum[]
  }

  /**
   * Seller without action
   */
  export type SellerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Seller
     */
    select?: SellerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Seller
     */
    omit?: SellerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SellerInclude<ExtArgs> | null
  }


  /**
   * Model Enterprise
   */

  export type AggregateEnterprise = {
    _count: EnterpriseCountAggregateOutputType | null
    _avg: EnterpriseAvgAggregateOutputType | null
    _sum: EnterpriseSumAggregateOutputType | null
    _min: EnterpriseMinAggregateOutputType | null
    _max: EnterpriseMaxAggregateOutputType | null
  }

  export type EnterpriseAvgAggregateOutputType = {
    rating: number | null
  }

  export type EnterpriseSumAggregateOutputType = {
    rating: number | null
  }

  export type EnterpriseMinAggregateOutputType = {
    id: string | null
    userId: string | null
    companyName: string | null
    taxCode: string | null
    verified: boolean | null
    officialBrand: boolean | null
    rating: number | null
  }

  export type EnterpriseMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    companyName: string | null
    taxCode: string | null
    verified: boolean | null
    officialBrand: boolean | null
    rating: number | null
  }

  export type EnterpriseCountAggregateOutputType = {
    id: number
    userId: number
    companyName: number
    taxCode: number
    verified: number
    officialBrand: number
    rating: number
    _all: number
  }


  export type EnterpriseAvgAggregateInputType = {
    rating?: true
  }

  export type EnterpriseSumAggregateInputType = {
    rating?: true
  }

  export type EnterpriseMinAggregateInputType = {
    id?: true
    userId?: true
    companyName?: true
    taxCode?: true
    verified?: true
    officialBrand?: true
    rating?: true
  }

  export type EnterpriseMaxAggregateInputType = {
    id?: true
    userId?: true
    companyName?: true
    taxCode?: true
    verified?: true
    officialBrand?: true
    rating?: true
  }

  export type EnterpriseCountAggregateInputType = {
    id?: true
    userId?: true
    companyName?: true
    taxCode?: true
    verified?: true
    officialBrand?: true
    rating?: true
    _all?: true
  }

  export type EnterpriseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Enterprise to aggregate.
     */
    where?: EnterpriseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Enterprises to fetch.
     */
    orderBy?: EnterpriseOrderByWithRelationInput | EnterpriseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EnterpriseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Enterprises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Enterprises.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Enterprises
    **/
    _count?: true | EnterpriseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EnterpriseAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EnterpriseSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EnterpriseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EnterpriseMaxAggregateInputType
  }

  export type GetEnterpriseAggregateType<T extends EnterpriseAggregateArgs> = {
        [P in keyof T & keyof AggregateEnterprise]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEnterprise[P]>
      : GetScalarType<T[P], AggregateEnterprise[P]>
  }




  export type EnterpriseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EnterpriseWhereInput
    orderBy?: EnterpriseOrderByWithAggregationInput | EnterpriseOrderByWithAggregationInput[]
    by: EnterpriseScalarFieldEnum[] | EnterpriseScalarFieldEnum
    having?: EnterpriseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EnterpriseCountAggregateInputType | true
    _avg?: EnterpriseAvgAggregateInputType
    _sum?: EnterpriseSumAggregateInputType
    _min?: EnterpriseMinAggregateInputType
    _max?: EnterpriseMaxAggregateInputType
  }

  export type EnterpriseGroupByOutputType = {
    id: string
    userId: string
    companyName: string
    taxCode: string | null
    verified: boolean
    officialBrand: boolean
    rating: number | null
    _count: EnterpriseCountAggregateOutputType | null
    _avg: EnterpriseAvgAggregateOutputType | null
    _sum: EnterpriseSumAggregateOutputType | null
    _min: EnterpriseMinAggregateOutputType | null
    _max: EnterpriseMaxAggregateOutputType | null
  }

  type GetEnterpriseGroupByPayload<T extends EnterpriseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EnterpriseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EnterpriseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EnterpriseGroupByOutputType[P]>
            : GetScalarType<T[P], EnterpriseGroupByOutputType[P]>
        }
      >
    >


  export type EnterpriseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    companyName?: boolean
    taxCode?: boolean
    verified?: boolean
    officialBrand?: boolean
    rating?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    products?: boolean | Enterprise$productsArgs<ExtArgs>
    _count?: boolean | EnterpriseCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["enterprise"]>

  export type EnterpriseSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    companyName?: boolean
    taxCode?: boolean
    verified?: boolean
    officialBrand?: boolean
    rating?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["enterprise"]>

  export type EnterpriseSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    companyName?: boolean
    taxCode?: boolean
    verified?: boolean
    officialBrand?: boolean
    rating?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["enterprise"]>

  export type EnterpriseSelectScalar = {
    id?: boolean
    userId?: boolean
    companyName?: boolean
    taxCode?: boolean
    verified?: boolean
    officialBrand?: boolean
    rating?: boolean
  }

  export type EnterpriseOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "companyName" | "taxCode" | "verified" | "officialBrand" | "rating", ExtArgs["result"]["enterprise"]>
  export type EnterpriseInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    products?: boolean | Enterprise$productsArgs<ExtArgs>
    _count?: boolean | EnterpriseCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type EnterpriseIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type EnterpriseIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $EnterprisePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Enterprise"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      products: Prisma.$ProductPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      companyName: string
      taxCode: string | null
      verified: boolean
      officialBrand: boolean
      rating: number | null
    }, ExtArgs["result"]["enterprise"]>
    composites: {}
  }

  type EnterpriseGetPayload<S extends boolean | null | undefined | EnterpriseDefaultArgs> = $Result.GetResult<Prisma.$EnterprisePayload, S>

  type EnterpriseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EnterpriseFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EnterpriseCountAggregateInputType | true
    }

  export interface EnterpriseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Enterprise'], meta: { name: 'Enterprise' } }
    /**
     * Find zero or one Enterprise that matches the filter.
     * @param {EnterpriseFindUniqueArgs} args - Arguments to find a Enterprise
     * @example
     * // Get one Enterprise
     * const enterprise = await prisma.enterprise.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EnterpriseFindUniqueArgs>(args: SelectSubset<T, EnterpriseFindUniqueArgs<ExtArgs>>): Prisma__EnterpriseClient<$Result.GetResult<Prisma.$EnterprisePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Enterprise that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EnterpriseFindUniqueOrThrowArgs} args - Arguments to find a Enterprise
     * @example
     * // Get one Enterprise
     * const enterprise = await prisma.enterprise.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EnterpriseFindUniqueOrThrowArgs>(args: SelectSubset<T, EnterpriseFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EnterpriseClient<$Result.GetResult<Prisma.$EnterprisePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Enterprise that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnterpriseFindFirstArgs} args - Arguments to find a Enterprise
     * @example
     * // Get one Enterprise
     * const enterprise = await prisma.enterprise.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EnterpriseFindFirstArgs>(args?: SelectSubset<T, EnterpriseFindFirstArgs<ExtArgs>>): Prisma__EnterpriseClient<$Result.GetResult<Prisma.$EnterprisePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Enterprise that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnterpriseFindFirstOrThrowArgs} args - Arguments to find a Enterprise
     * @example
     * // Get one Enterprise
     * const enterprise = await prisma.enterprise.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EnterpriseFindFirstOrThrowArgs>(args?: SelectSubset<T, EnterpriseFindFirstOrThrowArgs<ExtArgs>>): Prisma__EnterpriseClient<$Result.GetResult<Prisma.$EnterprisePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Enterprises that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnterpriseFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Enterprises
     * const enterprises = await prisma.enterprise.findMany()
     * 
     * // Get first 10 Enterprises
     * const enterprises = await prisma.enterprise.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const enterpriseWithIdOnly = await prisma.enterprise.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EnterpriseFindManyArgs>(args?: SelectSubset<T, EnterpriseFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EnterprisePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Enterprise.
     * @param {EnterpriseCreateArgs} args - Arguments to create a Enterprise.
     * @example
     * // Create one Enterprise
     * const Enterprise = await prisma.enterprise.create({
     *   data: {
     *     // ... data to create a Enterprise
     *   }
     * })
     * 
     */
    create<T extends EnterpriseCreateArgs>(args: SelectSubset<T, EnterpriseCreateArgs<ExtArgs>>): Prisma__EnterpriseClient<$Result.GetResult<Prisma.$EnterprisePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Enterprises.
     * @param {EnterpriseCreateManyArgs} args - Arguments to create many Enterprises.
     * @example
     * // Create many Enterprises
     * const enterprise = await prisma.enterprise.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EnterpriseCreateManyArgs>(args?: SelectSubset<T, EnterpriseCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Enterprises and returns the data saved in the database.
     * @param {EnterpriseCreateManyAndReturnArgs} args - Arguments to create many Enterprises.
     * @example
     * // Create many Enterprises
     * const enterprise = await prisma.enterprise.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Enterprises and only return the `id`
     * const enterpriseWithIdOnly = await prisma.enterprise.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EnterpriseCreateManyAndReturnArgs>(args?: SelectSubset<T, EnterpriseCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EnterprisePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Enterprise.
     * @param {EnterpriseDeleteArgs} args - Arguments to delete one Enterprise.
     * @example
     * // Delete one Enterprise
     * const Enterprise = await prisma.enterprise.delete({
     *   where: {
     *     // ... filter to delete one Enterprise
     *   }
     * })
     * 
     */
    delete<T extends EnterpriseDeleteArgs>(args: SelectSubset<T, EnterpriseDeleteArgs<ExtArgs>>): Prisma__EnterpriseClient<$Result.GetResult<Prisma.$EnterprisePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Enterprise.
     * @param {EnterpriseUpdateArgs} args - Arguments to update one Enterprise.
     * @example
     * // Update one Enterprise
     * const enterprise = await prisma.enterprise.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EnterpriseUpdateArgs>(args: SelectSubset<T, EnterpriseUpdateArgs<ExtArgs>>): Prisma__EnterpriseClient<$Result.GetResult<Prisma.$EnterprisePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Enterprises.
     * @param {EnterpriseDeleteManyArgs} args - Arguments to filter Enterprises to delete.
     * @example
     * // Delete a few Enterprises
     * const { count } = await prisma.enterprise.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EnterpriseDeleteManyArgs>(args?: SelectSubset<T, EnterpriseDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Enterprises.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnterpriseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Enterprises
     * const enterprise = await prisma.enterprise.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EnterpriseUpdateManyArgs>(args: SelectSubset<T, EnterpriseUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Enterprises and returns the data updated in the database.
     * @param {EnterpriseUpdateManyAndReturnArgs} args - Arguments to update many Enterprises.
     * @example
     * // Update many Enterprises
     * const enterprise = await prisma.enterprise.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Enterprises and only return the `id`
     * const enterpriseWithIdOnly = await prisma.enterprise.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends EnterpriseUpdateManyAndReturnArgs>(args: SelectSubset<T, EnterpriseUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EnterprisePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Enterprise.
     * @param {EnterpriseUpsertArgs} args - Arguments to update or create a Enterprise.
     * @example
     * // Update or create a Enterprise
     * const enterprise = await prisma.enterprise.upsert({
     *   create: {
     *     // ... data to create a Enterprise
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Enterprise we want to update
     *   }
     * })
     */
    upsert<T extends EnterpriseUpsertArgs>(args: SelectSubset<T, EnterpriseUpsertArgs<ExtArgs>>): Prisma__EnterpriseClient<$Result.GetResult<Prisma.$EnterprisePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Enterprises.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnterpriseCountArgs} args - Arguments to filter Enterprises to count.
     * @example
     * // Count the number of Enterprises
     * const count = await prisma.enterprise.count({
     *   where: {
     *     // ... the filter for the Enterprises we want to count
     *   }
     * })
    **/
    count<T extends EnterpriseCountArgs>(
      args?: Subset<T, EnterpriseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EnterpriseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Enterprise.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnterpriseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EnterpriseAggregateArgs>(args: Subset<T, EnterpriseAggregateArgs>): Prisma.PrismaPromise<GetEnterpriseAggregateType<T>>

    /**
     * Group by Enterprise.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnterpriseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EnterpriseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EnterpriseGroupByArgs['orderBy'] }
        : { orderBy?: EnterpriseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EnterpriseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEnterpriseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Enterprise model
   */
  readonly fields: EnterpriseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Enterprise.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EnterpriseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    products<T extends Enterprise$productsArgs<ExtArgs> = {}>(args?: Subset<T, Enterprise$productsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Enterprise model
   */
  interface EnterpriseFieldRefs {
    readonly id: FieldRef<"Enterprise", 'String'>
    readonly userId: FieldRef<"Enterprise", 'String'>
    readonly companyName: FieldRef<"Enterprise", 'String'>
    readonly taxCode: FieldRef<"Enterprise", 'String'>
    readonly verified: FieldRef<"Enterprise", 'Boolean'>
    readonly officialBrand: FieldRef<"Enterprise", 'Boolean'>
    readonly rating: FieldRef<"Enterprise", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * Enterprise findUnique
   */
  export type EnterpriseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enterprise
     */
    select?: EnterpriseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Enterprise
     */
    omit?: EnterpriseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnterpriseInclude<ExtArgs> | null
    /**
     * Filter, which Enterprise to fetch.
     */
    where: EnterpriseWhereUniqueInput
  }

  /**
   * Enterprise findUniqueOrThrow
   */
  export type EnterpriseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enterprise
     */
    select?: EnterpriseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Enterprise
     */
    omit?: EnterpriseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnterpriseInclude<ExtArgs> | null
    /**
     * Filter, which Enterprise to fetch.
     */
    where: EnterpriseWhereUniqueInput
  }

  /**
   * Enterprise findFirst
   */
  export type EnterpriseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enterprise
     */
    select?: EnterpriseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Enterprise
     */
    omit?: EnterpriseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnterpriseInclude<ExtArgs> | null
    /**
     * Filter, which Enterprise to fetch.
     */
    where?: EnterpriseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Enterprises to fetch.
     */
    orderBy?: EnterpriseOrderByWithRelationInput | EnterpriseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Enterprises.
     */
    cursor?: EnterpriseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Enterprises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Enterprises.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Enterprises.
     */
    distinct?: EnterpriseScalarFieldEnum | EnterpriseScalarFieldEnum[]
  }

  /**
   * Enterprise findFirstOrThrow
   */
  export type EnterpriseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enterprise
     */
    select?: EnterpriseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Enterprise
     */
    omit?: EnterpriseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnterpriseInclude<ExtArgs> | null
    /**
     * Filter, which Enterprise to fetch.
     */
    where?: EnterpriseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Enterprises to fetch.
     */
    orderBy?: EnterpriseOrderByWithRelationInput | EnterpriseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Enterprises.
     */
    cursor?: EnterpriseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Enterprises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Enterprises.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Enterprises.
     */
    distinct?: EnterpriseScalarFieldEnum | EnterpriseScalarFieldEnum[]
  }

  /**
   * Enterprise findMany
   */
  export type EnterpriseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enterprise
     */
    select?: EnterpriseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Enterprise
     */
    omit?: EnterpriseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnterpriseInclude<ExtArgs> | null
    /**
     * Filter, which Enterprises to fetch.
     */
    where?: EnterpriseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Enterprises to fetch.
     */
    orderBy?: EnterpriseOrderByWithRelationInput | EnterpriseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Enterprises.
     */
    cursor?: EnterpriseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Enterprises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Enterprises.
     */
    skip?: number
    distinct?: EnterpriseScalarFieldEnum | EnterpriseScalarFieldEnum[]
  }

  /**
   * Enterprise create
   */
  export type EnterpriseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enterprise
     */
    select?: EnterpriseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Enterprise
     */
    omit?: EnterpriseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnterpriseInclude<ExtArgs> | null
    /**
     * The data needed to create a Enterprise.
     */
    data: XOR<EnterpriseCreateInput, EnterpriseUncheckedCreateInput>
  }

  /**
   * Enterprise createMany
   */
  export type EnterpriseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Enterprises.
     */
    data: EnterpriseCreateManyInput | EnterpriseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Enterprise createManyAndReturn
   */
  export type EnterpriseCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enterprise
     */
    select?: EnterpriseSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Enterprise
     */
    omit?: EnterpriseOmit<ExtArgs> | null
    /**
     * The data used to create many Enterprises.
     */
    data: EnterpriseCreateManyInput | EnterpriseCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnterpriseIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Enterprise update
   */
  export type EnterpriseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enterprise
     */
    select?: EnterpriseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Enterprise
     */
    omit?: EnterpriseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnterpriseInclude<ExtArgs> | null
    /**
     * The data needed to update a Enterprise.
     */
    data: XOR<EnterpriseUpdateInput, EnterpriseUncheckedUpdateInput>
    /**
     * Choose, which Enterprise to update.
     */
    where: EnterpriseWhereUniqueInput
  }

  /**
   * Enterprise updateMany
   */
  export type EnterpriseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Enterprises.
     */
    data: XOR<EnterpriseUpdateManyMutationInput, EnterpriseUncheckedUpdateManyInput>
    /**
     * Filter which Enterprises to update
     */
    where?: EnterpriseWhereInput
    /**
     * Limit how many Enterprises to update.
     */
    limit?: number
  }

  /**
   * Enterprise updateManyAndReturn
   */
  export type EnterpriseUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enterprise
     */
    select?: EnterpriseSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Enterprise
     */
    omit?: EnterpriseOmit<ExtArgs> | null
    /**
     * The data used to update Enterprises.
     */
    data: XOR<EnterpriseUpdateManyMutationInput, EnterpriseUncheckedUpdateManyInput>
    /**
     * Filter which Enterprises to update
     */
    where?: EnterpriseWhereInput
    /**
     * Limit how many Enterprises to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnterpriseIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Enterprise upsert
   */
  export type EnterpriseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enterprise
     */
    select?: EnterpriseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Enterprise
     */
    omit?: EnterpriseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnterpriseInclude<ExtArgs> | null
    /**
     * The filter to search for the Enterprise to update in case it exists.
     */
    where: EnterpriseWhereUniqueInput
    /**
     * In case the Enterprise found by the `where` argument doesn't exist, create a new Enterprise with this data.
     */
    create: XOR<EnterpriseCreateInput, EnterpriseUncheckedCreateInput>
    /**
     * In case the Enterprise was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EnterpriseUpdateInput, EnterpriseUncheckedUpdateInput>
  }

  /**
   * Enterprise delete
   */
  export type EnterpriseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enterprise
     */
    select?: EnterpriseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Enterprise
     */
    omit?: EnterpriseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnterpriseInclude<ExtArgs> | null
    /**
     * Filter which Enterprise to delete.
     */
    where: EnterpriseWhereUniqueInput
  }

  /**
   * Enterprise deleteMany
   */
  export type EnterpriseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Enterprises to delete
     */
    where?: EnterpriseWhereInput
    /**
     * Limit how many Enterprises to delete.
     */
    limit?: number
  }

  /**
   * Enterprise.products
   */
  export type Enterprise$productsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    where?: ProductWhereInput
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    cursor?: ProductWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Enterprise without action
   */
  export type EnterpriseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enterprise
     */
    select?: EnterpriseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Enterprise
     */
    omit?: EnterpriseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnterpriseInclude<ExtArgs> | null
  }


  /**
   * Model Product
   */

  export type AggregateProduct = {
    _count: ProductCountAggregateOutputType | null
    _avg: ProductAvgAggregateOutputType | null
    _sum: ProductSumAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  export type ProductAvgAggregateOutputType = {
    basePrice: number | null
    stock: number | null
  }

  export type ProductSumAggregateOutputType = {
    basePrice: number | null
    stock: number | null
  }

  export type ProductMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    categoryId: string | null
    sellerId: string | null
    enterpriseId: string | null
    basePrice: number | null
    stock: number | null
    active: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProductMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    categoryId: string | null
    sellerId: string | null
    enterpriseId: string | null
    basePrice: number | null
    stock: number | null
    active: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProductCountAggregateOutputType = {
    id: number
    name: number
    description: number
    categoryId: number
    sellerId: number
    enterpriseId: number
    basePrice: number
    stock: number
    active: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ProductAvgAggregateInputType = {
    basePrice?: true
    stock?: true
  }

  export type ProductSumAggregateInputType = {
    basePrice?: true
    stock?: true
  }

  export type ProductMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    categoryId?: true
    sellerId?: true
    enterpriseId?: true
    basePrice?: true
    stock?: true
    active?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProductMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    categoryId?: true
    sellerId?: true
    enterpriseId?: true
    basePrice?: true
    stock?: true
    active?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProductCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    categoryId?: true
    sellerId?: true
    enterpriseId?: true
    basePrice?: true
    stock?: true
    active?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ProductAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Product to aggregate.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Products
    **/
    _count?: true | ProductCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductMaxAggregateInputType
  }

  export type GetProductAggregateType<T extends ProductAggregateArgs> = {
        [P in keyof T & keyof AggregateProduct]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProduct[P]>
      : GetScalarType<T[P], AggregateProduct[P]>
  }




  export type ProductGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductWhereInput
    orderBy?: ProductOrderByWithAggregationInput | ProductOrderByWithAggregationInput[]
    by: ProductScalarFieldEnum[] | ProductScalarFieldEnum
    having?: ProductScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductCountAggregateInputType | true
    _avg?: ProductAvgAggregateInputType
    _sum?: ProductSumAggregateInputType
    _min?: ProductMinAggregateInputType
    _max?: ProductMaxAggregateInputType
  }

  export type ProductGroupByOutputType = {
    id: string
    name: string
    description: string
    categoryId: string
    sellerId: string | null
    enterpriseId: string | null
    basePrice: number
    stock: number
    active: boolean
    createdAt: Date
    updatedAt: Date
    _count: ProductCountAggregateOutputType | null
    _avg: ProductAvgAggregateOutputType | null
    _sum: ProductSumAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  type GetProductGroupByPayload<T extends ProductGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductGroupByOutputType[P]>
            : GetScalarType<T[P], ProductGroupByOutputType[P]>
        }
      >
    >


  export type ProductSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    categoryId?: boolean
    sellerId?: boolean
    enterpriseId?: boolean
    basePrice?: boolean
    stock?: boolean
    active?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    category?: boolean | CategoryDefaultArgs<ExtArgs>
    seller?: boolean | Product$sellerArgs<ExtArgs>
    enterprise?: boolean | Product$enterpriseArgs<ExtArgs>
    variants?: boolean | Product$variantsArgs<ExtArgs>
    reviews?: boolean | Product$reviewsArgs<ExtArgs>
    orderItems?: boolean | Product$orderItemsArgs<ExtArgs>
    behaviors?: boolean | Product$behaviorsArgs<ExtArgs>
    promotions?: boolean | Product$promotionsArgs<ExtArgs>
    sellerProducts?: boolean | Product$sellerProductsArgs<ExtArgs>
    _count?: boolean | ProductCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["product"]>

  export type ProductSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    categoryId?: boolean
    sellerId?: boolean
    enterpriseId?: boolean
    basePrice?: boolean
    stock?: boolean
    active?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    category?: boolean | CategoryDefaultArgs<ExtArgs>
    seller?: boolean | Product$sellerArgs<ExtArgs>
    enterprise?: boolean | Product$enterpriseArgs<ExtArgs>
  }, ExtArgs["result"]["product"]>

  export type ProductSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    categoryId?: boolean
    sellerId?: boolean
    enterpriseId?: boolean
    basePrice?: boolean
    stock?: boolean
    active?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    category?: boolean | CategoryDefaultArgs<ExtArgs>
    seller?: boolean | Product$sellerArgs<ExtArgs>
    enterprise?: boolean | Product$enterpriseArgs<ExtArgs>
  }, ExtArgs["result"]["product"]>

  export type ProductSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    categoryId?: boolean
    sellerId?: boolean
    enterpriseId?: boolean
    basePrice?: boolean
    stock?: boolean
    active?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ProductOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "categoryId" | "sellerId" | "enterpriseId" | "basePrice" | "stock" | "active" | "createdAt" | "updatedAt", ExtArgs["result"]["product"]>
  export type ProductInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    category?: boolean | CategoryDefaultArgs<ExtArgs>
    seller?: boolean | Product$sellerArgs<ExtArgs>
    enterprise?: boolean | Product$enterpriseArgs<ExtArgs>
    variants?: boolean | Product$variantsArgs<ExtArgs>
    reviews?: boolean | Product$reviewsArgs<ExtArgs>
    orderItems?: boolean | Product$orderItemsArgs<ExtArgs>
    behaviors?: boolean | Product$behaviorsArgs<ExtArgs>
    promotions?: boolean | Product$promotionsArgs<ExtArgs>
    sellerProducts?: boolean | Product$sellerProductsArgs<ExtArgs>
    _count?: boolean | ProductCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ProductIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    category?: boolean | CategoryDefaultArgs<ExtArgs>
    seller?: boolean | Product$sellerArgs<ExtArgs>
    enterprise?: boolean | Product$enterpriseArgs<ExtArgs>
  }
  export type ProductIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    category?: boolean | CategoryDefaultArgs<ExtArgs>
    seller?: boolean | Product$sellerArgs<ExtArgs>
    enterprise?: boolean | Product$enterpriseArgs<ExtArgs>
  }

  export type $ProductPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Product"
    objects: {
      category: Prisma.$CategoryPayload<ExtArgs>
      seller: Prisma.$SellerPayload<ExtArgs> | null
      enterprise: Prisma.$EnterprisePayload<ExtArgs> | null
      variants: Prisma.$ProductVariantPayload<ExtArgs>[]
      reviews: Prisma.$ReviewPayload<ExtArgs>[]
      orderItems: Prisma.$OrderItemPayload<ExtArgs>[]
      behaviors: Prisma.$UserBehaviorPayload<ExtArgs>[]
      promotions: Prisma.$PromotionProductPayload<ExtArgs>[]
      sellerProducts: Prisma.$SellerProductPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string
      categoryId: string
      sellerId: string | null
      enterpriseId: string | null
      basePrice: number
      stock: number
      active: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["product"]>
    composites: {}
  }

  type ProductGetPayload<S extends boolean | null | undefined | ProductDefaultArgs> = $Result.GetResult<Prisma.$ProductPayload, S>

  type ProductCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProductFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProductCountAggregateInputType | true
    }

  export interface ProductDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Product'], meta: { name: 'Product' } }
    /**
     * Find zero or one Product that matches the filter.
     * @param {ProductFindUniqueArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProductFindUniqueArgs>(args: SelectSubset<T, ProductFindUniqueArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Product that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProductFindUniqueOrThrowArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProductFindUniqueOrThrowArgs>(args: SelectSubset<T, ProductFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Product that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindFirstArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProductFindFirstArgs>(args?: SelectSubset<T, ProductFindFirstArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Product that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindFirstOrThrowArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProductFindFirstOrThrowArgs>(args?: SelectSubset<T, ProductFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Products that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Products
     * const products = await prisma.product.findMany()
     * 
     * // Get first 10 Products
     * const products = await prisma.product.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productWithIdOnly = await prisma.product.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProductFindManyArgs>(args?: SelectSubset<T, ProductFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Product.
     * @param {ProductCreateArgs} args - Arguments to create a Product.
     * @example
     * // Create one Product
     * const Product = await prisma.product.create({
     *   data: {
     *     // ... data to create a Product
     *   }
     * })
     * 
     */
    create<T extends ProductCreateArgs>(args: SelectSubset<T, ProductCreateArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Products.
     * @param {ProductCreateManyArgs} args - Arguments to create many Products.
     * @example
     * // Create many Products
     * const product = await prisma.product.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProductCreateManyArgs>(args?: SelectSubset<T, ProductCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Products and returns the data saved in the database.
     * @param {ProductCreateManyAndReturnArgs} args - Arguments to create many Products.
     * @example
     * // Create many Products
     * const product = await prisma.product.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Products and only return the `id`
     * const productWithIdOnly = await prisma.product.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProductCreateManyAndReturnArgs>(args?: SelectSubset<T, ProductCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Product.
     * @param {ProductDeleteArgs} args - Arguments to delete one Product.
     * @example
     * // Delete one Product
     * const Product = await prisma.product.delete({
     *   where: {
     *     // ... filter to delete one Product
     *   }
     * })
     * 
     */
    delete<T extends ProductDeleteArgs>(args: SelectSubset<T, ProductDeleteArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Product.
     * @param {ProductUpdateArgs} args - Arguments to update one Product.
     * @example
     * // Update one Product
     * const product = await prisma.product.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProductUpdateArgs>(args: SelectSubset<T, ProductUpdateArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Products.
     * @param {ProductDeleteManyArgs} args - Arguments to filter Products to delete.
     * @example
     * // Delete a few Products
     * const { count } = await prisma.product.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProductDeleteManyArgs>(args?: SelectSubset<T, ProductDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Products
     * const product = await prisma.product.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProductUpdateManyArgs>(args: SelectSubset<T, ProductUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Products and returns the data updated in the database.
     * @param {ProductUpdateManyAndReturnArgs} args - Arguments to update many Products.
     * @example
     * // Update many Products
     * const product = await prisma.product.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Products and only return the `id`
     * const productWithIdOnly = await prisma.product.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProductUpdateManyAndReturnArgs>(args: SelectSubset<T, ProductUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Product.
     * @param {ProductUpsertArgs} args - Arguments to update or create a Product.
     * @example
     * // Update or create a Product
     * const product = await prisma.product.upsert({
     *   create: {
     *     // ... data to create a Product
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Product we want to update
     *   }
     * })
     */
    upsert<T extends ProductUpsertArgs>(args: SelectSubset<T, ProductUpsertArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductCountArgs} args - Arguments to filter Products to count.
     * @example
     * // Count the number of Products
     * const count = await prisma.product.count({
     *   where: {
     *     // ... the filter for the Products we want to count
     *   }
     * })
    **/
    count<T extends ProductCountArgs>(
      args?: Subset<T, ProductCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductAggregateArgs>(args: Subset<T, ProductAggregateArgs>): Prisma.PrismaPromise<GetProductAggregateType<T>>

    /**
     * Group by Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductGroupByArgs['orderBy'] }
        : { orderBy?: ProductGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Product model
   */
  readonly fields: ProductFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Product.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProductClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    category<T extends CategoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CategoryDefaultArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    seller<T extends Product$sellerArgs<ExtArgs> = {}>(args?: Subset<T, Product$sellerArgs<ExtArgs>>): Prisma__SellerClient<$Result.GetResult<Prisma.$SellerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    enterprise<T extends Product$enterpriseArgs<ExtArgs> = {}>(args?: Subset<T, Product$enterpriseArgs<ExtArgs>>): Prisma__EnterpriseClient<$Result.GetResult<Prisma.$EnterprisePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    variants<T extends Product$variantsArgs<ExtArgs> = {}>(args?: Subset<T, Product$variantsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductVariantPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    reviews<T extends Product$reviewsArgs<ExtArgs> = {}>(args?: Subset<T, Product$reviewsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    orderItems<T extends Product$orderItemsArgs<ExtArgs> = {}>(args?: Subset<T, Product$orderItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    behaviors<T extends Product$behaviorsArgs<ExtArgs> = {}>(args?: Subset<T, Product$behaviorsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserBehaviorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    promotions<T extends Product$promotionsArgs<ExtArgs> = {}>(args?: Subset<T, Product$promotionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PromotionProductPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    sellerProducts<T extends Product$sellerProductsArgs<ExtArgs> = {}>(args?: Subset<T, Product$sellerProductsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SellerProductPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Product model
   */
  interface ProductFieldRefs {
    readonly id: FieldRef<"Product", 'String'>
    readonly name: FieldRef<"Product", 'String'>
    readonly description: FieldRef<"Product", 'String'>
    readonly categoryId: FieldRef<"Product", 'String'>
    readonly sellerId: FieldRef<"Product", 'String'>
    readonly enterpriseId: FieldRef<"Product", 'String'>
    readonly basePrice: FieldRef<"Product", 'Float'>
    readonly stock: FieldRef<"Product", 'Int'>
    readonly active: FieldRef<"Product", 'Boolean'>
    readonly createdAt: FieldRef<"Product", 'DateTime'>
    readonly updatedAt: FieldRef<"Product", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Product findUnique
   */
  export type ProductFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product findUniqueOrThrow
   */
  export type ProductFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product findFirst
   */
  export type ProductFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Products.
     */
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Product findFirstOrThrow
   */
  export type ProductFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Products.
     */
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Product findMany
   */
  export type ProductFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Products to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Product create
   */
  export type ProductCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * The data needed to create a Product.
     */
    data: XOR<ProductCreateInput, ProductUncheckedCreateInput>
  }

  /**
   * Product createMany
   */
  export type ProductCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Products.
     */
    data: ProductCreateManyInput | ProductCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Product createManyAndReturn
   */
  export type ProductCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * The data used to create many Products.
     */
    data: ProductCreateManyInput | ProductCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Product update
   */
  export type ProductUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * The data needed to update a Product.
     */
    data: XOR<ProductUpdateInput, ProductUncheckedUpdateInput>
    /**
     * Choose, which Product to update.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product updateMany
   */
  export type ProductUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Products.
     */
    data: XOR<ProductUpdateManyMutationInput, ProductUncheckedUpdateManyInput>
    /**
     * Filter which Products to update
     */
    where?: ProductWhereInput
    /**
     * Limit how many Products to update.
     */
    limit?: number
  }

  /**
   * Product updateManyAndReturn
   */
  export type ProductUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * The data used to update Products.
     */
    data: XOR<ProductUpdateManyMutationInput, ProductUncheckedUpdateManyInput>
    /**
     * Filter which Products to update
     */
    where?: ProductWhereInput
    /**
     * Limit how many Products to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Product upsert
   */
  export type ProductUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * The filter to search for the Product to update in case it exists.
     */
    where: ProductWhereUniqueInput
    /**
     * In case the Product found by the `where` argument doesn't exist, create a new Product with this data.
     */
    create: XOR<ProductCreateInput, ProductUncheckedCreateInput>
    /**
     * In case the Product was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProductUpdateInput, ProductUncheckedUpdateInput>
  }

  /**
   * Product delete
   */
  export type ProductDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter which Product to delete.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product deleteMany
   */
  export type ProductDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Products to delete
     */
    where?: ProductWhereInput
    /**
     * Limit how many Products to delete.
     */
    limit?: number
  }

  /**
   * Product.seller
   */
  export type Product$sellerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Seller
     */
    select?: SellerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Seller
     */
    omit?: SellerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SellerInclude<ExtArgs> | null
    where?: SellerWhereInput
  }

  /**
   * Product.enterprise
   */
  export type Product$enterpriseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enterprise
     */
    select?: EnterpriseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Enterprise
     */
    omit?: EnterpriseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnterpriseInclude<ExtArgs> | null
    where?: EnterpriseWhereInput
  }

  /**
   * Product.variants
   */
  export type Product$variantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductVariant
     */
    select?: ProductVariantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductVariant
     */
    omit?: ProductVariantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductVariantInclude<ExtArgs> | null
    where?: ProductVariantWhereInput
    orderBy?: ProductVariantOrderByWithRelationInput | ProductVariantOrderByWithRelationInput[]
    cursor?: ProductVariantWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductVariantScalarFieldEnum | ProductVariantScalarFieldEnum[]
  }

  /**
   * Product.reviews
   */
  export type Product$reviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    where?: ReviewWhereInput
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    cursor?: ReviewWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }

  /**
   * Product.orderItems
   */
  export type Product$orderItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    where?: OrderItemWhereInput
    orderBy?: OrderItemOrderByWithRelationInput | OrderItemOrderByWithRelationInput[]
    cursor?: OrderItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderItemScalarFieldEnum | OrderItemScalarFieldEnum[]
  }

  /**
   * Product.behaviors
   */
  export type Product$behaviorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBehavior
     */
    select?: UserBehaviorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserBehavior
     */
    omit?: UserBehaviorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBehaviorInclude<ExtArgs> | null
    where?: UserBehaviorWhereInput
    orderBy?: UserBehaviorOrderByWithRelationInput | UserBehaviorOrderByWithRelationInput[]
    cursor?: UserBehaviorWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserBehaviorScalarFieldEnum | UserBehaviorScalarFieldEnum[]
  }

  /**
   * Product.promotions
   */
  export type Product$promotionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PromotionProduct
     */
    select?: PromotionProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PromotionProduct
     */
    omit?: PromotionProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PromotionProductInclude<ExtArgs> | null
    where?: PromotionProductWhereInput
    orderBy?: PromotionProductOrderByWithRelationInput | PromotionProductOrderByWithRelationInput[]
    cursor?: PromotionProductWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PromotionProductScalarFieldEnum | PromotionProductScalarFieldEnum[]
  }

  /**
   * Product.sellerProducts
   */
  export type Product$sellerProductsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SellerProduct
     */
    select?: SellerProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SellerProduct
     */
    omit?: SellerProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SellerProductInclude<ExtArgs> | null
    where?: SellerProductWhereInput
    orderBy?: SellerProductOrderByWithRelationInput | SellerProductOrderByWithRelationInput[]
    cursor?: SellerProductWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SellerProductScalarFieldEnum | SellerProductScalarFieldEnum[]
  }

  /**
   * Product without action
   */
  export type ProductDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
  }


  /**
   * Model ProductVariant
   */

  export type AggregateProductVariant = {
    _count: ProductVariantCountAggregateOutputType | null
    _avg: ProductVariantAvgAggregateOutputType | null
    _sum: ProductVariantSumAggregateOutputType | null
    _min: ProductVariantMinAggregateOutputType | null
    _max: ProductVariantMaxAggregateOutputType | null
  }

  export type ProductVariantAvgAggregateOutputType = {
    price: number | null
    stock: number | null
  }

  export type ProductVariantSumAggregateOutputType = {
    price: number | null
    stock: number | null
  }

  export type ProductVariantMinAggregateOutputType = {
    id: string | null
    productId: string | null
    color: string | null
    size: string | null
    price: number | null
    stock: number | null
  }

  export type ProductVariantMaxAggregateOutputType = {
    id: string | null
    productId: string | null
    color: string | null
    size: string | null
    price: number | null
    stock: number | null
  }

  export type ProductVariantCountAggregateOutputType = {
    id: number
    productId: number
    color: number
    size: number
    price: number
    stock: number
    _all: number
  }


  export type ProductVariantAvgAggregateInputType = {
    price?: true
    stock?: true
  }

  export type ProductVariantSumAggregateInputType = {
    price?: true
    stock?: true
  }

  export type ProductVariantMinAggregateInputType = {
    id?: true
    productId?: true
    color?: true
    size?: true
    price?: true
    stock?: true
  }

  export type ProductVariantMaxAggregateInputType = {
    id?: true
    productId?: true
    color?: true
    size?: true
    price?: true
    stock?: true
  }

  export type ProductVariantCountAggregateInputType = {
    id?: true
    productId?: true
    color?: true
    size?: true
    price?: true
    stock?: true
    _all?: true
  }

  export type ProductVariantAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProductVariant to aggregate.
     */
    where?: ProductVariantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductVariants to fetch.
     */
    orderBy?: ProductVariantOrderByWithRelationInput | ProductVariantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProductVariantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductVariants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductVariants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProductVariants
    **/
    _count?: true | ProductVariantCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductVariantAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductVariantSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductVariantMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductVariantMaxAggregateInputType
  }

  export type GetProductVariantAggregateType<T extends ProductVariantAggregateArgs> = {
        [P in keyof T & keyof AggregateProductVariant]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProductVariant[P]>
      : GetScalarType<T[P], AggregateProductVariant[P]>
  }




  export type ProductVariantGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductVariantWhereInput
    orderBy?: ProductVariantOrderByWithAggregationInput | ProductVariantOrderByWithAggregationInput[]
    by: ProductVariantScalarFieldEnum[] | ProductVariantScalarFieldEnum
    having?: ProductVariantScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductVariantCountAggregateInputType | true
    _avg?: ProductVariantAvgAggregateInputType
    _sum?: ProductVariantSumAggregateInputType
    _min?: ProductVariantMinAggregateInputType
    _max?: ProductVariantMaxAggregateInputType
  }

  export type ProductVariantGroupByOutputType = {
    id: string
    productId: string
    color: string | null
    size: string | null
    price: number
    stock: number
    _count: ProductVariantCountAggregateOutputType | null
    _avg: ProductVariantAvgAggregateOutputType | null
    _sum: ProductVariantSumAggregateOutputType | null
    _min: ProductVariantMinAggregateOutputType | null
    _max: ProductVariantMaxAggregateOutputType | null
  }

  type GetProductVariantGroupByPayload<T extends ProductVariantGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductVariantGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductVariantGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductVariantGroupByOutputType[P]>
            : GetScalarType<T[P], ProductVariantGroupByOutputType[P]>
        }
      >
    >


  export type ProductVariantSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    productId?: boolean
    color?: boolean
    size?: boolean
    price?: boolean
    stock?: boolean
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["productVariant"]>

  export type ProductVariantSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    productId?: boolean
    color?: boolean
    size?: boolean
    price?: boolean
    stock?: boolean
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["productVariant"]>

  export type ProductVariantSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    productId?: boolean
    color?: boolean
    size?: boolean
    price?: boolean
    stock?: boolean
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["productVariant"]>

  export type ProductVariantSelectScalar = {
    id?: boolean
    productId?: boolean
    color?: boolean
    size?: boolean
    price?: boolean
    stock?: boolean
  }

  export type ProductVariantOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "productId" | "color" | "size" | "price" | "stock", ExtArgs["result"]["productVariant"]>
  export type ProductVariantInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }
  export type ProductVariantIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }
  export type ProductVariantIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }

  export type $ProductVariantPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProductVariant"
    objects: {
      product: Prisma.$ProductPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      productId: string
      color: string | null
      size: string | null
      price: number
      stock: number
    }, ExtArgs["result"]["productVariant"]>
    composites: {}
  }

  type ProductVariantGetPayload<S extends boolean | null | undefined | ProductVariantDefaultArgs> = $Result.GetResult<Prisma.$ProductVariantPayload, S>

  type ProductVariantCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProductVariantFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProductVariantCountAggregateInputType | true
    }

  export interface ProductVariantDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProductVariant'], meta: { name: 'ProductVariant' } }
    /**
     * Find zero or one ProductVariant that matches the filter.
     * @param {ProductVariantFindUniqueArgs} args - Arguments to find a ProductVariant
     * @example
     * // Get one ProductVariant
     * const productVariant = await prisma.productVariant.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProductVariantFindUniqueArgs>(args: SelectSubset<T, ProductVariantFindUniqueArgs<ExtArgs>>): Prisma__ProductVariantClient<$Result.GetResult<Prisma.$ProductVariantPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ProductVariant that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProductVariantFindUniqueOrThrowArgs} args - Arguments to find a ProductVariant
     * @example
     * // Get one ProductVariant
     * const productVariant = await prisma.productVariant.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProductVariantFindUniqueOrThrowArgs>(args: SelectSubset<T, ProductVariantFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProductVariantClient<$Result.GetResult<Prisma.$ProductVariantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProductVariant that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductVariantFindFirstArgs} args - Arguments to find a ProductVariant
     * @example
     * // Get one ProductVariant
     * const productVariant = await prisma.productVariant.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProductVariantFindFirstArgs>(args?: SelectSubset<T, ProductVariantFindFirstArgs<ExtArgs>>): Prisma__ProductVariantClient<$Result.GetResult<Prisma.$ProductVariantPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProductVariant that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductVariantFindFirstOrThrowArgs} args - Arguments to find a ProductVariant
     * @example
     * // Get one ProductVariant
     * const productVariant = await prisma.productVariant.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProductVariantFindFirstOrThrowArgs>(args?: SelectSubset<T, ProductVariantFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProductVariantClient<$Result.GetResult<Prisma.$ProductVariantPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ProductVariants that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductVariantFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProductVariants
     * const productVariants = await prisma.productVariant.findMany()
     * 
     * // Get first 10 ProductVariants
     * const productVariants = await prisma.productVariant.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productVariantWithIdOnly = await prisma.productVariant.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProductVariantFindManyArgs>(args?: SelectSubset<T, ProductVariantFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductVariantPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ProductVariant.
     * @param {ProductVariantCreateArgs} args - Arguments to create a ProductVariant.
     * @example
     * // Create one ProductVariant
     * const ProductVariant = await prisma.productVariant.create({
     *   data: {
     *     // ... data to create a ProductVariant
     *   }
     * })
     * 
     */
    create<T extends ProductVariantCreateArgs>(args: SelectSubset<T, ProductVariantCreateArgs<ExtArgs>>): Prisma__ProductVariantClient<$Result.GetResult<Prisma.$ProductVariantPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ProductVariants.
     * @param {ProductVariantCreateManyArgs} args - Arguments to create many ProductVariants.
     * @example
     * // Create many ProductVariants
     * const productVariant = await prisma.productVariant.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProductVariantCreateManyArgs>(args?: SelectSubset<T, ProductVariantCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ProductVariants and returns the data saved in the database.
     * @param {ProductVariantCreateManyAndReturnArgs} args - Arguments to create many ProductVariants.
     * @example
     * // Create many ProductVariants
     * const productVariant = await prisma.productVariant.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ProductVariants and only return the `id`
     * const productVariantWithIdOnly = await prisma.productVariant.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProductVariantCreateManyAndReturnArgs>(args?: SelectSubset<T, ProductVariantCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductVariantPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ProductVariant.
     * @param {ProductVariantDeleteArgs} args - Arguments to delete one ProductVariant.
     * @example
     * // Delete one ProductVariant
     * const ProductVariant = await prisma.productVariant.delete({
     *   where: {
     *     // ... filter to delete one ProductVariant
     *   }
     * })
     * 
     */
    delete<T extends ProductVariantDeleteArgs>(args: SelectSubset<T, ProductVariantDeleteArgs<ExtArgs>>): Prisma__ProductVariantClient<$Result.GetResult<Prisma.$ProductVariantPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ProductVariant.
     * @param {ProductVariantUpdateArgs} args - Arguments to update one ProductVariant.
     * @example
     * // Update one ProductVariant
     * const productVariant = await prisma.productVariant.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProductVariantUpdateArgs>(args: SelectSubset<T, ProductVariantUpdateArgs<ExtArgs>>): Prisma__ProductVariantClient<$Result.GetResult<Prisma.$ProductVariantPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ProductVariants.
     * @param {ProductVariantDeleteManyArgs} args - Arguments to filter ProductVariants to delete.
     * @example
     * // Delete a few ProductVariants
     * const { count } = await prisma.productVariant.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProductVariantDeleteManyArgs>(args?: SelectSubset<T, ProductVariantDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProductVariants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductVariantUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProductVariants
     * const productVariant = await prisma.productVariant.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProductVariantUpdateManyArgs>(args: SelectSubset<T, ProductVariantUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProductVariants and returns the data updated in the database.
     * @param {ProductVariantUpdateManyAndReturnArgs} args - Arguments to update many ProductVariants.
     * @example
     * // Update many ProductVariants
     * const productVariant = await prisma.productVariant.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ProductVariants and only return the `id`
     * const productVariantWithIdOnly = await prisma.productVariant.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProductVariantUpdateManyAndReturnArgs>(args: SelectSubset<T, ProductVariantUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductVariantPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ProductVariant.
     * @param {ProductVariantUpsertArgs} args - Arguments to update or create a ProductVariant.
     * @example
     * // Update or create a ProductVariant
     * const productVariant = await prisma.productVariant.upsert({
     *   create: {
     *     // ... data to create a ProductVariant
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProductVariant we want to update
     *   }
     * })
     */
    upsert<T extends ProductVariantUpsertArgs>(args: SelectSubset<T, ProductVariantUpsertArgs<ExtArgs>>): Prisma__ProductVariantClient<$Result.GetResult<Prisma.$ProductVariantPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ProductVariants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductVariantCountArgs} args - Arguments to filter ProductVariants to count.
     * @example
     * // Count the number of ProductVariants
     * const count = await prisma.productVariant.count({
     *   where: {
     *     // ... the filter for the ProductVariants we want to count
     *   }
     * })
    **/
    count<T extends ProductVariantCountArgs>(
      args?: Subset<T, ProductVariantCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductVariantCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProductVariant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductVariantAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductVariantAggregateArgs>(args: Subset<T, ProductVariantAggregateArgs>): Prisma.PrismaPromise<GetProductVariantAggregateType<T>>

    /**
     * Group by ProductVariant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductVariantGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductVariantGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductVariantGroupByArgs['orderBy'] }
        : { orderBy?: ProductVariantGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductVariantGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductVariantGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProductVariant model
   */
  readonly fields: ProductVariantFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProductVariant.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProductVariantClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    product<T extends ProductDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProductDefaultArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ProductVariant model
   */
  interface ProductVariantFieldRefs {
    readonly id: FieldRef<"ProductVariant", 'String'>
    readonly productId: FieldRef<"ProductVariant", 'String'>
    readonly color: FieldRef<"ProductVariant", 'String'>
    readonly size: FieldRef<"ProductVariant", 'String'>
    readonly price: FieldRef<"ProductVariant", 'Float'>
    readonly stock: FieldRef<"ProductVariant", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * ProductVariant findUnique
   */
  export type ProductVariantFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductVariant
     */
    select?: ProductVariantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductVariant
     */
    omit?: ProductVariantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductVariantInclude<ExtArgs> | null
    /**
     * Filter, which ProductVariant to fetch.
     */
    where: ProductVariantWhereUniqueInput
  }

  /**
   * ProductVariant findUniqueOrThrow
   */
  export type ProductVariantFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductVariant
     */
    select?: ProductVariantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductVariant
     */
    omit?: ProductVariantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductVariantInclude<ExtArgs> | null
    /**
     * Filter, which ProductVariant to fetch.
     */
    where: ProductVariantWhereUniqueInput
  }

  /**
   * ProductVariant findFirst
   */
  export type ProductVariantFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductVariant
     */
    select?: ProductVariantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductVariant
     */
    omit?: ProductVariantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductVariantInclude<ExtArgs> | null
    /**
     * Filter, which ProductVariant to fetch.
     */
    where?: ProductVariantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductVariants to fetch.
     */
    orderBy?: ProductVariantOrderByWithRelationInput | ProductVariantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProductVariants.
     */
    cursor?: ProductVariantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductVariants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductVariants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProductVariants.
     */
    distinct?: ProductVariantScalarFieldEnum | ProductVariantScalarFieldEnum[]
  }

  /**
   * ProductVariant findFirstOrThrow
   */
  export type ProductVariantFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductVariant
     */
    select?: ProductVariantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductVariant
     */
    omit?: ProductVariantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductVariantInclude<ExtArgs> | null
    /**
     * Filter, which ProductVariant to fetch.
     */
    where?: ProductVariantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductVariants to fetch.
     */
    orderBy?: ProductVariantOrderByWithRelationInput | ProductVariantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProductVariants.
     */
    cursor?: ProductVariantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductVariants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductVariants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProductVariants.
     */
    distinct?: ProductVariantScalarFieldEnum | ProductVariantScalarFieldEnum[]
  }

  /**
   * ProductVariant findMany
   */
  export type ProductVariantFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductVariant
     */
    select?: ProductVariantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductVariant
     */
    omit?: ProductVariantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductVariantInclude<ExtArgs> | null
    /**
     * Filter, which ProductVariants to fetch.
     */
    where?: ProductVariantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductVariants to fetch.
     */
    orderBy?: ProductVariantOrderByWithRelationInput | ProductVariantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProductVariants.
     */
    cursor?: ProductVariantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductVariants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductVariants.
     */
    skip?: number
    distinct?: ProductVariantScalarFieldEnum | ProductVariantScalarFieldEnum[]
  }

  /**
   * ProductVariant create
   */
  export type ProductVariantCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductVariant
     */
    select?: ProductVariantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductVariant
     */
    omit?: ProductVariantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductVariantInclude<ExtArgs> | null
    /**
     * The data needed to create a ProductVariant.
     */
    data: XOR<ProductVariantCreateInput, ProductVariantUncheckedCreateInput>
  }

  /**
   * ProductVariant createMany
   */
  export type ProductVariantCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProductVariants.
     */
    data: ProductVariantCreateManyInput | ProductVariantCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ProductVariant createManyAndReturn
   */
  export type ProductVariantCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductVariant
     */
    select?: ProductVariantSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ProductVariant
     */
    omit?: ProductVariantOmit<ExtArgs> | null
    /**
     * The data used to create many ProductVariants.
     */
    data: ProductVariantCreateManyInput | ProductVariantCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductVariantIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ProductVariant update
   */
  export type ProductVariantUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductVariant
     */
    select?: ProductVariantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductVariant
     */
    omit?: ProductVariantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductVariantInclude<ExtArgs> | null
    /**
     * The data needed to update a ProductVariant.
     */
    data: XOR<ProductVariantUpdateInput, ProductVariantUncheckedUpdateInput>
    /**
     * Choose, which ProductVariant to update.
     */
    where: ProductVariantWhereUniqueInput
  }

  /**
   * ProductVariant updateMany
   */
  export type ProductVariantUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProductVariants.
     */
    data: XOR<ProductVariantUpdateManyMutationInput, ProductVariantUncheckedUpdateManyInput>
    /**
     * Filter which ProductVariants to update
     */
    where?: ProductVariantWhereInput
    /**
     * Limit how many ProductVariants to update.
     */
    limit?: number
  }

  /**
   * ProductVariant updateManyAndReturn
   */
  export type ProductVariantUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductVariant
     */
    select?: ProductVariantSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ProductVariant
     */
    omit?: ProductVariantOmit<ExtArgs> | null
    /**
     * The data used to update ProductVariants.
     */
    data: XOR<ProductVariantUpdateManyMutationInput, ProductVariantUncheckedUpdateManyInput>
    /**
     * Filter which ProductVariants to update
     */
    where?: ProductVariantWhereInput
    /**
     * Limit how many ProductVariants to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductVariantIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ProductVariant upsert
   */
  export type ProductVariantUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductVariant
     */
    select?: ProductVariantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductVariant
     */
    omit?: ProductVariantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductVariantInclude<ExtArgs> | null
    /**
     * The filter to search for the ProductVariant to update in case it exists.
     */
    where: ProductVariantWhereUniqueInput
    /**
     * In case the ProductVariant found by the `where` argument doesn't exist, create a new ProductVariant with this data.
     */
    create: XOR<ProductVariantCreateInput, ProductVariantUncheckedCreateInput>
    /**
     * In case the ProductVariant was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProductVariantUpdateInput, ProductVariantUncheckedUpdateInput>
  }

  /**
   * ProductVariant delete
   */
  export type ProductVariantDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductVariant
     */
    select?: ProductVariantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductVariant
     */
    omit?: ProductVariantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductVariantInclude<ExtArgs> | null
    /**
     * Filter which ProductVariant to delete.
     */
    where: ProductVariantWhereUniqueInput
  }

  /**
   * ProductVariant deleteMany
   */
  export type ProductVariantDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProductVariants to delete
     */
    where?: ProductVariantWhereInput
    /**
     * Limit how many ProductVariants to delete.
     */
    limit?: number
  }

  /**
   * ProductVariant without action
   */
  export type ProductVariantDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductVariant
     */
    select?: ProductVariantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductVariant
     */
    omit?: ProductVariantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductVariantInclude<ExtArgs> | null
  }


  /**
   * Model Category
   */

  export type AggregateCategory = {
    _count: CategoryCountAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  export type CategoryMinAggregateOutputType = {
    id: string | null
    name: string | null
    parentId: string | null
  }

  export type CategoryMaxAggregateOutputType = {
    id: string | null
    name: string | null
    parentId: string | null
  }

  export type CategoryCountAggregateOutputType = {
    id: number
    name: number
    parentId: number
    _all: number
  }


  export type CategoryMinAggregateInputType = {
    id?: true
    name?: true
    parentId?: true
  }

  export type CategoryMaxAggregateInputType = {
    id?: true
    name?: true
    parentId?: true
  }

  export type CategoryCountAggregateInputType = {
    id?: true
    name?: true
    parentId?: true
    _all?: true
  }

  export type CategoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Category to aggregate.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Categories
    **/
    _count?: true | CategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoryMaxAggregateInputType
  }

  export type GetCategoryAggregateType<T extends CategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategory[P]>
      : GetScalarType<T[P], AggregateCategory[P]>
  }




  export type CategoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoryWhereInput
    orderBy?: CategoryOrderByWithAggregationInput | CategoryOrderByWithAggregationInput[]
    by: CategoryScalarFieldEnum[] | CategoryScalarFieldEnum
    having?: CategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoryCountAggregateInputType | true
    _min?: CategoryMinAggregateInputType
    _max?: CategoryMaxAggregateInputType
  }

  export type CategoryGroupByOutputType = {
    id: string
    name: string
    parentId: string | null
    _count: CategoryCountAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  type GetCategoryGroupByPayload<T extends CategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoryGroupByOutputType[P]>
            : GetScalarType<T[P], CategoryGroupByOutputType[P]>
        }
      >
    >


  export type CategorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    parentId?: boolean
    parent?: boolean | Category$parentArgs<ExtArgs>
    children?: boolean | Category$childrenArgs<ExtArgs>
    products?: boolean | Category$productsArgs<ExtArgs>
    promotions?: boolean | Category$promotionsArgs<ExtArgs>
    _count?: boolean | CategoryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["category"]>

  export type CategorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    parentId?: boolean
    parent?: boolean | Category$parentArgs<ExtArgs>
  }, ExtArgs["result"]["category"]>

  export type CategorySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    parentId?: boolean
    parent?: boolean | Category$parentArgs<ExtArgs>
  }, ExtArgs["result"]["category"]>

  export type CategorySelectScalar = {
    id?: boolean
    name?: boolean
    parentId?: boolean
  }

  export type CategoryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "parentId", ExtArgs["result"]["category"]>
  export type CategoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    parent?: boolean | Category$parentArgs<ExtArgs>
    children?: boolean | Category$childrenArgs<ExtArgs>
    products?: boolean | Category$productsArgs<ExtArgs>
    promotions?: boolean | Category$promotionsArgs<ExtArgs>
    _count?: boolean | CategoryCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CategoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    parent?: boolean | Category$parentArgs<ExtArgs>
  }
  export type CategoryIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    parent?: boolean | Category$parentArgs<ExtArgs>
  }

  export type $CategoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Category"
    objects: {
      parent: Prisma.$CategoryPayload<ExtArgs> | null
      children: Prisma.$CategoryPayload<ExtArgs>[]
      products: Prisma.$ProductPayload<ExtArgs>[]
      promotions: Prisma.$PromotionCategoryPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      parentId: string | null
    }, ExtArgs["result"]["category"]>
    composites: {}
  }

  type CategoryGetPayload<S extends boolean | null | undefined | CategoryDefaultArgs> = $Result.GetResult<Prisma.$CategoryPayload, S>

  type CategoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CategoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CategoryCountAggregateInputType | true
    }

  export interface CategoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Category'], meta: { name: 'Category' } }
    /**
     * Find zero or one Category that matches the filter.
     * @param {CategoryFindUniqueArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CategoryFindUniqueArgs>(args: SelectSubset<T, CategoryFindUniqueArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Category that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CategoryFindUniqueOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CategoryFindUniqueOrThrowArgs>(args: SelectSubset<T, CategoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Category that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CategoryFindFirstArgs>(args?: SelectSubset<T, CategoryFindFirstArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Category that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CategoryFindFirstOrThrowArgs>(args?: SelectSubset<T, CategoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categories
     * const categories = await prisma.category.findMany()
     * 
     * // Get first 10 Categories
     * const categories = await prisma.category.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categoryWithIdOnly = await prisma.category.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CategoryFindManyArgs>(args?: SelectSubset<T, CategoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Category.
     * @param {CategoryCreateArgs} args - Arguments to create a Category.
     * @example
     * // Create one Category
     * const Category = await prisma.category.create({
     *   data: {
     *     // ... data to create a Category
     *   }
     * })
     * 
     */
    create<T extends CategoryCreateArgs>(args: SelectSubset<T, CategoryCreateArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Categories.
     * @param {CategoryCreateManyArgs} args - Arguments to create many Categories.
     * @example
     * // Create many Categories
     * const category = await prisma.category.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CategoryCreateManyArgs>(args?: SelectSubset<T, CategoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Categories and returns the data saved in the database.
     * @param {CategoryCreateManyAndReturnArgs} args - Arguments to create many Categories.
     * @example
     * // Create many Categories
     * const category = await prisma.category.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Categories and only return the `id`
     * const categoryWithIdOnly = await prisma.category.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CategoryCreateManyAndReturnArgs>(args?: SelectSubset<T, CategoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Category.
     * @param {CategoryDeleteArgs} args - Arguments to delete one Category.
     * @example
     * // Delete one Category
     * const Category = await prisma.category.delete({
     *   where: {
     *     // ... filter to delete one Category
     *   }
     * })
     * 
     */
    delete<T extends CategoryDeleteArgs>(args: SelectSubset<T, CategoryDeleteArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Category.
     * @param {CategoryUpdateArgs} args - Arguments to update one Category.
     * @example
     * // Update one Category
     * const category = await prisma.category.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CategoryUpdateArgs>(args: SelectSubset<T, CategoryUpdateArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Categories.
     * @param {CategoryDeleteManyArgs} args - Arguments to filter Categories to delete.
     * @example
     * // Delete a few Categories
     * const { count } = await prisma.category.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CategoryDeleteManyArgs>(args?: SelectSubset<T, CategoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categories
     * const category = await prisma.category.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CategoryUpdateManyArgs>(args: SelectSubset<T, CategoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories and returns the data updated in the database.
     * @param {CategoryUpdateManyAndReturnArgs} args - Arguments to update many Categories.
     * @example
     * // Update many Categories
     * const category = await prisma.category.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Categories and only return the `id`
     * const categoryWithIdOnly = await prisma.category.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CategoryUpdateManyAndReturnArgs>(args: SelectSubset<T, CategoryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Category.
     * @param {CategoryUpsertArgs} args - Arguments to update or create a Category.
     * @example
     * // Update or create a Category
     * const category = await prisma.category.upsert({
     *   create: {
     *     // ... data to create a Category
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Category we want to update
     *   }
     * })
     */
    upsert<T extends CategoryUpsertArgs>(args: SelectSubset<T, CategoryUpsertArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryCountArgs} args - Arguments to filter Categories to count.
     * @example
     * // Count the number of Categories
     * const count = await prisma.category.count({
     *   where: {
     *     // ... the filter for the Categories we want to count
     *   }
     * })
    **/
    count<T extends CategoryCountArgs>(
      args?: Subset<T, CategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoryAggregateArgs>(args: Subset<T, CategoryAggregateArgs>): Prisma.PrismaPromise<GetCategoryAggregateType<T>>

    /**
     * Group by Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategoryGroupByArgs['orderBy'] }
        : { orderBy?: CategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Category model
   */
  readonly fields: CategoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Category.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CategoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    parent<T extends Category$parentArgs<ExtArgs> = {}>(args?: Subset<T, Category$parentArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    children<T extends Category$childrenArgs<ExtArgs> = {}>(args?: Subset<T, Category$childrenArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    products<T extends Category$productsArgs<ExtArgs> = {}>(args?: Subset<T, Category$productsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    promotions<T extends Category$promotionsArgs<ExtArgs> = {}>(args?: Subset<T, Category$promotionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PromotionCategoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Category model
   */
  interface CategoryFieldRefs {
    readonly id: FieldRef<"Category", 'String'>
    readonly name: FieldRef<"Category", 'String'>
    readonly parentId: FieldRef<"Category", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Category findUnique
   */
  export type CategoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category findUniqueOrThrow
   */
  export type CategoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category findFirst
   */
  export type CategoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category findFirstOrThrow
   */
  export type CategoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category findMany
   */
  export type CategoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Categories to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category create
   */
  export type CategoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The data needed to create a Category.
     */
    data: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
  }

  /**
   * Category createMany
   */
  export type CategoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Categories.
     */
    data: CategoryCreateManyInput | CategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Category createManyAndReturn
   */
  export type CategoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * The data used to create many Categories.
     */
    data: CategoryCreateManyInput | CategoryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Category update
   */
  export type CategoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The data needed to update a Category.
     */
    data: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
    /**
     * Choose, which Category to update.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category updateMany
   */
  export type CategoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Categories.
     */
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyInput>
    /**
     * Filter which Categories to update
     */
    where?: CategoryWhereInput
    /**
     * Limit how many Categories to update.
     */
    limit?: number
  }

  /**
   * Category updateManyAndReturn
   */
  export type CategoryUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * The data used to update Categories.
     */
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyInput>
    /**
     * Filter which Categories to update
     */
    where?: CategoryWhereInput
    /**
     * Limit how many Categories to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Category upsert
   */
  export type CategoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The filter to search for the Category to update in case it exists.
     */
    where: CategoryWhereUniqueInput
    /**
     * In case the Category found by the `where` argument doesn't exist, create a new Category with this data.
     */
    create: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
    /**
     * In case the Category was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
  }

  /**
   * Category delete
   */
  export type CategoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter which Category to delete.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category deleteMany
   */
  export type CategoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Categories to delete
     */
    where?: CategoryWhereInput
    /**
     * Limit how many Categories to delete.
     */
    limit?: number
  }

  /**
   * Category.parent
   */
  export type Category$parentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    where?: CategoryWhereInput
  }

  /**
   * Category.children
   */
  export type Category$childrenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    where?: CategoryWhereInput
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    cursor?: CategoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category.products
   */
  export type Category$productsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    where?: ProductWhereInput
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    cursor?: ProductWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Category.promotions
   */
  export type Category$promotionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PromotionCategory
     */
    select?: PromotionCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PromotionCategory
     */
    omit?: PromotionCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PromotionCategoryInclude<ExtArgs> | null
    where?: PromotionCategoryWhereInput
    orderBy?: PromotionCategoryOrderByWithRelationInput | PromotionCategoryOrderByWithRelationInput[]
    cursor?: PromotionCategoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PromotionCategoryScalarFieldEnum | PromotionCategoryScalarFieldEnum[]
  }

  /**
   * Category without action
   */
  export type CategoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
  }


  /**
   * Model SellerProduct
   */

  export type AggregateSellerProduct = {
    _count: SellerProductCountAggregateOutputType | null
    _avg: SellerProductAvgAggregateOutputType | null
    _sum: SellerProductSumAggregateOutputType | null
    _min: SellerProductMinAggregateOutputType | null
    _max: SellerProductMaxAggregateOutputType | null
  }

  export type SellerProductAvgAggregateOutputType = {
    price: number | null
    stock: number | null
  }

  export type SellerProductSumAggregateOutputType = {
    price: number | null
    stock: number | null
  }

  export type SellerProductMinAggregateOutputType = {
    id: string | null
    sellerId: string | null
    productId: string | null
    price: number | null
    stock: number | null
    active: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SellerProductMaxAggregateOutputType = {
    id: string | null
    sellerId: string | null
    productId: string | null
    price: number | null
    stock: number | null
    active: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SellerProductCountAggregateOutputType = {
    id: number
    sellerId: number
    productId: number
    price: number
    stock: number
    active: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SellerProductAvgAggregateInputType = {
    price?: true
    stock?: true
  }

  export type SellerProductSumAggregateInputType = {
    price?: true
    stock?: true
  }

  export type SellerProductMinAggregateInputType = {
    id?: true
    sellerId?: true
    productId?: true
    price?: true
    stock?: true
    active?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SellerProductMaxAggregateInputType = {
    id?: true
    sellerId?: true
    productId?: true
    price?: true
    stock?: true
    active?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SellerProductCountAggregateInputType = {
    id?: true
    sellerId?: true
    productId?: true
    price?: true
    stock?: true
    active?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SellerProductAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SellerProduct to aggregate.
     */
    where?: SellerProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SellerProducts to fetch.
     */
    orderBy?: SellerProductOrderByWithRelationInput | SellerProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SellerProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SellerProducts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SellerProducts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SellerProducts
    **/
    _count?: true | SellerProductCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SellerProductAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SellerProductSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SellerProductMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SellerProductMaxAggregateInputType
  }

  export type GetSellerProductAggregateType<T extends SellerProductAggregateArgs> = {
        [P in keyof T & keyof AggregateSellerProduct]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSellerProduct[P]>
      : GetScalarType<T[P], AggregateSellerProduct[P]>
  }




  export type SellerProductGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SellerProductWhereInput
    orderBy?: SellerProductOrderByWithAggregationInput | SellerProductOrderByWithAggregationInput[]
    by: SellerProductScalarFieldEnum[] | SellerProductScalarFieldEnum
    having?: SellerProductScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SellerProductCountAggregateInputType | true
    _avg?: SellerProductAvgAggregateInputType
    _sum?: SellerProductSumAggregateInputType
    _min?: SellerProductMinAggregateInputType
    _max?: SellerProductMaxAggregateInputType
  }

  export type SellerProductGroupByOutputType = {
    id: string
    sellerId: string
    productId: string
    price: number
    stock: number
    active: boolean
    createdAt: Date
    updatedAt: Date
    _count: SellerProductCountAggregateOutputType | null
    _avg: SellerProductAvgAggregateOutputType | null
    _sum: SellerProductSumAggregateOutputType | null
    _min: SellerProductMinAggregateOutputType | null
    _max: SellerProductMaxAggregateOutputType | null
  }

  type GetSellerProductGroupByPayload<T extends SellerProductGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SellerProductGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SellerProductGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SellerProductGroupByOutputType[P]>
            : GetScalarType<T[P], SellerProductGroupByOutputType[P]>
        }
      >
    >


  export type SellerProductSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sellerId?: boolean
    productId?: boolean
    price?: boolean
    stock?: boolean
    active?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    seller?: boolean | SellerDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sellerProduct"]>

  export type SellerProductSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sellerId?: boolean
    productId?: boolean
    price?: boolean
    stock?: boolean
    active?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    seller?: boolean | SellerDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sellerProduct"]>

  export type SellerProductSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sellerId?: boolean
    productId?: boolean
    price?: boolean
    stock?: boolean
    active?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    seller?: boolean | SellerDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sellerProduct"]>

  export type SellerProductSelectScalar = {
    id?: boolean
    sellerId?: boolean
    productId?: boolean
    price?: boolean
    stock?: boolean
    active?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SellerProductOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "sellerId" | "productId" | "price" | "stock" | "active" | "createdAt" | "updatedAt", ExtArgs["result"]["sellerProduct"]>
  export type SellerProductInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    seller?: boolean | SellerDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }
  export type SellerProductIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    seller?: boolean | SellerDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }
  export type SellerProductIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    seller?: boolean | SellerDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }

  export type $SellerProductPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SellerProduct"
    objects: {
      seller: Prisma.$SellerPayload<ExtArgs>
      product: Prisma.$ProductPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      sellerId: string
      productId: string
      price: number
      stock: number
      active: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["sellerProduct"]>
    composites: {}
  }

  type SellerProductGetPayload<S extends boolean | null | undefined | SellerProductDefaultArgs> = $Result.GetResult<Prisma.$SellerProductPayload, S>

  type SellerProductCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SellerProductFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SellerProductCountAggregateInputType | true
    }

  export interface SellerProductDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SellerProduct'], meta: { name: 'SellerProduct' } }
    /**
     * Find zero or one SellerProduct that matches the filter.
     * @param {SellerProductFindUniqueArgs} args - Arguments to find a SellerProduct
     * @example
     * // Get one SellerProduct
     * const sellerProduct = await prisma.sellerProduct.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SellerProductFindUniqueArgs>(args: SelectSubset<T, SellerProductFindUniqueArgs<ExtArgs>>): Prisma__SellerProductClient<$Result.GetResult<Prisma.$SellerProductPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SellerProduct that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SellerProductFindUniqueOrThrowArgs} args - Arguments to find a SellerProduct
     * @example
     * // Get one SellerProduct
     * const sellerProduct = await prisma.sellerProduct.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SellerProductFindUniqueOrThrowArgs>(args: SelectSubset<T, SellerProductFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SellerProductClient<$Result.GetResult<Prisma.$SellerProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SellerProduct that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SellerProductFindFirstArgs} args - Arguments to find a SellerProduct
     * @example
     * // Get one SellerProduct
     * const sellerProduct = await prisma.sellerProduct.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SellerProductFindFirstArgs>(args?: SelectSubset<T, SellerProductFindFirstArgs<ExtArgs>>): Prisma__SellerProductClient<$Result.GetResult<Prisma.$SellerProductPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SellerProduct that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SellerProductFindFirstOrThrowArgs} args - Arguments to find a SellerProduct
     * @example
     * // Get one SellerProduct
     * const sellerProduct = await prisma.sellerProduct.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SellerProductFindFirstOrThrowArgs>(args?: SelectSubset<T, SellerProductFindFirstOrThrowArgs<ExtArgs>>): Prisma__SellerProductClient<$Result.GetResult<Prisma.$SellerProductPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SellerProducts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SellerProductFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SellerProducts
     * const sellerProducts = await prisma.sellerProduct.findMany()
     * 
     * // Get first 10 SellerProducts
     * const sellerProducts = await prisma.sellerProduct.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sellerProductWithIdOnly = await prisma.sellerProduct.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SellerProductFindManyArgs>(args?: SelectSubset<T, SellerProductFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SellerProductPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SellerProduct.
     * @param {SellerProductCreateArgs} args - Arguments to create a SellerProduct.
     * @example
     * // Create one SellerProduct
     * const SellerProduct = await prisma.sellerProduct.create({
     *   data: {
     *     // ... data to create a SellerProduct
     *   }
     * })
     * 
     */
    create<T extends SellerProductCreateArgs>(args: SelectSubset<T, SellerProductCreateArgs<ExtArgs>>): Prisma__SellerProductClient<$Result.GetResult<Prisma.$SellerProductPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SellerProducts.
     * @param {SellerProductCreateManyArgs} args - Arguments to create many SellerProducts.
     * @example
     * // Create many SellerProducts
     * const sellerProduct = await prisma.sellerProduct.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SellerProductCreateManyArgs>(args?: SelectSubset<T, SellerProductCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SellerProducts and returns the data saved in the database.
     * @param {SellerProductCreateManyAndReturnArgs} args - Arguments to create many SellerProducts.
     * @example
     * // Create many SellerProducts
     * const sellerProduct = await prisma.sellerProduct.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SellerProducts and only return the `id`
     * const sellerProductWithIdOnly = await prisma.sellerProduct.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SellerProductCreateManyAndReturnArgs>(args?: SelectSubset<T, SellerProductCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SellerProductPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a SellerProduct.
     * @param {SellerProductDeleteArgs} args - Arguments to delete one SellerProduct.
     * @example
     * // Delete one SellerProduct
     * const SellerProduct = await prisma.sellerProduct.delete({
     *   where: {
     *     // ... filter to delete one SellerProduct
     *   }
     * })
     * 
     */
    delete<T extends SellerProductDeleteArgs>(args: SelectSubset<T, SellerProductDeleteArgs<ExtArgs>>): Prisma__SellerProductClient<$Result.GetResult<Prisma.$SellerProductPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SellerProduct.
     * @param {SellerProductUpdateArgs} args - Arguments to update one SellerProduct.
     * @example
     * // Update one SellerProduct
     * const sellerProduct = await prisma.sellerProduct.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SellerProductUpdateArgs>(args: SelectSubset<T, SellerProductUpdateArgs<ExtArgs>>): Prisma__SellerProductClient<$Result.GetResult<Prisma.$SellerProductPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SellerProducts.
     * @param {SellerProductDeleteManyArgs} args - Arguments to filter SellerProducts to delete.
     * @example
     * // Delete a few SellerProducts
     * const { count } = await prisma.sellerProduct.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SellerProductDeleteManyArgs>(args?: SelectSubset<T, SellerProductDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SellerProducts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SellerProductUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SellerProducts
     * const sellerProduct = await prisma.sellerProduct.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SellerProductUpdateManyArgs>(args: SelectSubset<T, SellerProductUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SellerProducts and returns the data updated in the database.
     * @param {SellerProductUpdateManyAndReturnArgs} args - Arguments to update many SellerProducts.
     * @example
     * // Update many SellerProducts
     * const sellerProduct = await prisma.sellerProduct.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more SellerProducts and only return the `id`
     * const sellerProductWithIdOnly = await prisma.sellerProduct.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SellerProductUpdateManyAndReturnArgs>(args: SelectSubset<T, SellerProductUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SellerProductPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one SellerProduct.
     * @param {SellerProductUpsertArgs} args - Arguments to update or create a SellerProduct.
     * @example
     * // Update or create a SellerProduct
     * const sellerProduct = await prisma.sellerProduct.upsert({
     *   create: {
     *     // ... data to create a SellerProduct
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SellerProduct we want to update
     *   }
     * })
     */
    upsert<T extends SellerProductUpsertArgs>(args: SelectSubset<T, SellerProductUpsertArgs<ExtArgs>>): Prisma__SellerProductClient<$Result.GetResult<Prisma.$SellerProductPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SellerProducts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SellerProductCountArgs} args - Arguments to filter SellerProducts to count.
     * @example
     * // Count the number of SellerProducts
     * const count = await prisma.sellerProduct.count({
     *   where: {
     *     // ... the filter for the SellerProducts we want to count
     *   }
     * })
    **/
    count<T extends SellerProductCountArgs>(
      args?: Subset<T, SellerProductCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SellerProductCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SellerProduct.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SellerProductAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SellerProductAggregateArgs>(args: Subset<T, SellerProductAggregateArgs>): Prisma.PrismaPromise<GetSellerProductAggregateType<T>>

    /**
     * Group by SellerProduct.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SellerProductGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SellerProductGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SellerProductGroupByArgs['orderBy'] }
        : { orderBy?: SellerProductGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SellerProductGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSellerProductGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SellerProduct model
   */
  readonly fields: SellerProductFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SellerProduct.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SellerProductClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    seller<T extends SellerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SellerDefaultArgs<ExtArgs>>): Prisma__SellerClient<$Result.GetResult<Prisma.$SellerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    product<T extends ProductDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProductDefaultArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SellerProduct model
   */
  interface SellerProductFieldRefs {
    readonly id: FieldRef<"SellerProduct", 'String'>
    readonly sellerId: FieldRef<"SellerProduct", 'String'>
    readonly productId: FieldRef<"SellerProduct", 'String'>
    readonly price: FieldRef<"SellerProduct", 'Float'>
    readonly stock: FieldRef<"SellerProduct", 'Int'>
    readonly active: FieldRef<"SellerProduct", 'Boolean'>
    readonly createdAt: FieldRef<"SellerProduct", 'DateTime'>
    readonly updatedAt: FieldRef<"SellerProduct", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SellerProduct findUnique
   */
  export type SellerProductFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SellerProduct
     */
    select?: SellerProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SellerProduct
     */
    omit?: SellerProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SellerProductInclude<ExtArgs> | null
    /**
     * Filter, which SellerProduct to fetch.
     */
    where: SellerProductWhereUniqueInput
  }

  /**
   * SellerProduct findUniqueOrThrow
   */
  export type SellerProductFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SellerProduct
     */
    select?: SellerProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SellerProduct
     */
    omit?: SellerProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SellerProductInclude<ExtArgs> | null
    /**
     * Filter, which SellerProduct to fetch.
     */
    where: SellerProductWhereUniqueInput
  }

  /**
   * SellerProduct findFirst
   */
  export type SellerProductFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SellerProduct
     */
    select?: SellerProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SellerProduct
     */
    omit?: SellerProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SellerProductInclude<ExtArgs> | null
    /**
     * Filter, which SellerProduct to fetch.
     */
    where?: SellerProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SellerProducts to fetch.
     */
    orderBy?: SellerProductOrderByWithRelationInput | SellerProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SellerProducts.
     */
    cursor?: SellerProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SellerProducts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SellerProducts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SellerProducts.
     */
    distinct?: SellerProductScalarFieldEnum | SellerProductScalarFieldEnum[]
  }

  /**
   * SellerProduct findFirstOrThrow
   */
  export type SellerProductFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SellerProduct
     */
    select?: SellerProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SellerProduct
     */
    omit?: SellerProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SellerProductInclude<ExtArgs> | null
    /**
     * Filter, which SellerProduct to fetch.
     */
    where?: SellerProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SellerProducts to fetch.
     */
    orderBy?: SellerProductOrderByWithRelationInput | SellerProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SellerProducts.
     */
    cursor?: SellerProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SellerProducts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SellerProducts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SellerProducts.
     */
    distinct?: SellerProductScalarFieldEnum | SellerProductScalarFieldEnum[]
  }

  /**
   * SellerProduct findMany
   */
  export type SellerProductFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SellerProduct
     */
    select?: SellerProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SellerProduct
     */
    omit?: SellerProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SellerProductInclude<ExtArgs> | null
    /**
     * Filter, which SellerProducts to fetch.
     */
    where?: SellerProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SellerProducts to fetch.
     */
    orderBy?: SellerProductOrderByWithRelationInput | SellerProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SellerProducts.
     */
    cursor?: SellerProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SellerProducts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SellerProducts.
     */
    skip?: number
    distinct?: SellerProductScalarFieldEnum | SellerProductScalarFieldEnum[]
  }

  /**
   * SellerProduct create
   */
  export type SellerProductCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SellerProduct
     */
    select?: SellerProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SellerProduct
     */
    omit?: SellerProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SellerProductInclude<ExtArgs> | null
    /**
     * The data needed to create a SellerProduct.
     */
    data: XOR<SellerProductCreateInput, SellerProductUncheckedCreateInput>
  }

  /**
   * SellerProduct createMany
   */
  export type SellerProductCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SellerProducts.
     */
    data: SellerProductCreateManyInput | SellerProductCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SellerProduct createManyAndReturn
   */
  export type SellerProductCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SellerProduct
     */
    select?: SellerProductSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SellerProduct
     */
    omit?: SellerProductOmit<ExtArgs> | null
    /**
     * The data used to create many SellerProducts.
     */
    data: SellerProductCreateManyInput | SellerProductCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SellerProductIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SellerProduct update
   */
  export type SellerProductUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SellerProduct
     */
    select?: SellerProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SellerProduct
     */
    omit?: SellerProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SellerProductInclude<ExtArgs> | null
    /**
     * The data needed to update a SellerProduct.
     */
    data: XOR<SellerProductUpdateInput, SellerProductUncheckedUpdateInput>
    /**
     * Choose, which SellerProduct to update.
     */
    where: SellerProductWhereUniqueInput
  }

  /**
   * SellerProduct updateMany
   */
  export type SellerProductUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SellerProducts.
     */
    data: XOR<SellerProductUpdateManyMutationInput, SellerProductUncheckedUpdateManyInput>
    /**
     * Filter which SellerProducts to update
     */
    where?: SellerProductWhereInput
    /**
     * Limit how many SellerProducts to update.
     */
    limit?: number
  }

  /**
   * SellerProduct updateManyAndReturn
   */
  export type SellerProductUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SellerProduct
     */
    select?: SellerProductSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SellerProduct
     */
    omit?: SellerProductOmit<ExtArgs> | null
    /**
     * The data used to update SellerProducts.
     */
    data: XOR<SellerProductUpdateManyMutationInput, SellerProductUncheckedUpdateManyInput>
    /**
     * Filter which SellerProducts to update
     */
    where?: SellerProductWhereInput
    /**
     * Limit how many SellerProducts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SellerProductIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * SellerProduct upsert
   */
  export type SellerProductUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SellerProduct
     */
    select?: SellerProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SellerProduct
     */
    omit?: SellerProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SellerProductInclude<ExtArgs> | null
    /**
     * The filter to search for the SellerProduct to update in case it exists.
     */
    where: SellerProductWhereUniqueInput
    /**
     * In case the SellerProduct found by the `where` argument doesn't exist, create a new SellerProduct with this data.
     */
    create: XOR<SellerProductCreateInput, SellerProductUncheckedCreateInput>
    /**
     * In case the SellerProduct was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SellerProductUpdateInput, SellerProductUncheckedUpdateInput>
  }

  /**
   * SellerProduct delete
   */
  export type SellerProductDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SellerProduct
     */
    select?: SellerProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SellerProduct
     */
    omit?: SellerProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SellerProductInclude<ExtArgs> | null
    /**
     * Filter which SellerProduct to delete.
     */
    where: SellerProductWhereUniqueInput
  }

  /**
   * SellerProduct deleteMany
   */
  export type SellerProductDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SellerProducts to delete
     */
    where?: SellerProductWhereInput
    /**
     * Limit how many SellerProducts to delete.
     */
    limit?: number
  }

  /**
   * SellerProduct without action
   */
  export type SellerProductDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SellerProduct
     */
    select?: SellerProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SellerProduct
     */
    omit?: SellerProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SellerProductInclude<ExtArgs> | null
  }


  /**
   * Model Review
   */

  export type AggregateReview = {
    _count: ReviewCountAggregateOutputType | null
    _avg: ReviewAvgAggregateOutputType | null
    _sum: ReviewSumAggregateOutputType | null
    _min: ReviewMinAggregateOutputType | null
    _max: ReviewMaxAggregateOutputType | null
  }

  export type ReviewAvgAggregateOutputType = {
    rating: number | null
  }

  export type ReviewSumAggregateOutputType = {
    rating: number | null
  }

  export type ReviewMinAggregateOutputType = {
    id: string | null
    productId: string | null
    userId: string | null
    rating: number | null
    comment: string | null
    createdAt: Date | null
  }

  export type ReviewMaxAggregateOutputType = {
    id: string | null
    productId: string | null
    userId: string | null
    rating: number | null
    comment: string | null
    createdAt: Date | null
  }

  export type ReviewCountAggregateOutputType = {
    id: number
    productId: number
    userId: number
    rating: number
    comment: number
    createdAt: number
    _all: number
  }


  export type ReviewAvgAggregateInputType = {
    rating?: true
  }

  export type ReviewSumAggregateInputType = {
    rating?: true
  }

  export type ReviewMinAggregateInputType = {
    id?: true
    productId?: true
    userId?: true
    rating?: true
    comment?: true
    createdAt?: true
  }

  export type ReviewMaxAggregateInputType = {
    id?: true
    productId?: true
    userId?: true
    rating?: true
    comment?: true
    createdAt?: true
  }

  export type ReviewCountAggregateInputType = {
    id?: true
    productId?: true
    userId?: true
    rating?: true
    comment?: true
    createdAt?: true
    _all?: true
  }

  export type ReviewAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Review to aggregate.
     */
    where?: ReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reviews to fetch.
     */
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Reviews
    **/
    _count?: true | ReviewCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReviewAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReviewSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReviewMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReviewMaxAggregateInputType
  }

  export type GetReviewAggregateType<T extends ReviewAggregateArgs> = {
        [P in keyof T & keyof AggregateReview]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReview[P]>
      : GetScalarType<T[P], AggregateReview[P]>
  }




  export type ReviewGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReviewWhereInput
    orderBy?: ReviewOrderByWithAggregationInput | ReviewOrderByWithAggregationInput[]
    by: ReviewScalarFieldEnum[] | ReviewScalarFieldEnum
    having?: ReviewScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReviewCountAggregateInputType | true
    _avg?: ReviewAvgAggregateInputType
    _sum?: ReviewSumAggregateInputType
    _min?: ReviewMinAggregateInputType
    _max?: ReviewMaxAggregateInputType
  }

  export type ReviewGroupByOutputType = {
    id: string
    productId: string
    userId: string
    rating: number
    comment: string | null
    createdAt: Date
    _count: ReviewCountAggregateOutputType | null
    _avg: ReviewAvgAggregateOutputType | null
    _sum: ReviewSumAggregateOutputType | null
    _min: ReviewMinAggregateOutputType | null
    _max: ReviewMaxAggregateOutputType | null
  }

  type GetReviewGroupByPayload<T extends ReviewGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReviewGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReviewGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReviewGroupByOutputType[P]>
            : GetScalarType<T[P], ReviewGroupByOutputType[P]>
        }
      >
    >


  export type ReviewSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    productId?: boolean
    userId?: boolean
    rating?: boolean
    comment?: boolean
    createdAt?: boolean
    product?: boolean | ProductDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["review"]>

  export type ReviewSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    productId?: boolean
    userId?: boolean
    rating?: boolean
    comment?: boolean
    createdAt?: boolean
    product?: boolean | ProductDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["review"]>

  export type ReviewSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    productId?: boolean
    userId?: boolean
    rating?: boolean
    comment?: boolean
    createdAt?: boolean
    product?: boolean | ProductDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["review"]>

  export type ReviewSelectScalar = {
    id?: boolean
    productId?: boolean
    userId?: boolean
    rating?: boolean
    comment?: boolean
    createdAt?: boolean
  }

  export type ReviewOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "productId" | "userId" | "rating" | "comment" | "createdAt", ExtArgs["result"]["review"]>
  export type ReviewInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product?: boolean | ProductDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ReviewIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product?: boolean | ProductDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ReviewIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product?: boolean | ProductDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ReviewPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Review"
    objects: {
      product: Prisma.$ProductPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      productId: string
      userId: string
      rating: number
      comment: string | null
      createdAt: Date
    }, ExtArgs["result"]["review"]>
    composites: {}
  }

  type ReviewGetPayload<S extends boolean | null | undefined | ReviewDefaultArgs> = $Result.GetResult<Prisma.$ReviewPayload, S>

  type ReviewCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ReviewFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ReviewCountAggregateInputType | true
    }

  export interface ReviewDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Review'], meta: { name: 'Review' } }
    /**
     * Find zero or one Review that matches the filter.
     * @param {ReviewFindUniqueArgs} args - Arguments to find a Review
     * @example
     * // Get one Review
     * const review = await prisma.review.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ReviewFindUniqueArgs>(args: SelectSubset<T, ReviewFindUniqueArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Review that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ReviewFindUniqueOrThrowArgs} args - Arguments to find a Review
     * @example
     * // Get one Review
     * const review = await prisma.review.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ReviewFindUniqueOrThrowArgs>(args: SelectSubset<T, ReviewFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Review that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewFindFirstArgs} args - Arguments to find a Review
     * @example
     * // Get one Review
     * const review = await prisma.review.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ReviewFindFirstArgs>(args?: SelectSubset<T, ReviewFindFirstArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Review that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewFindFirstOrThrowArgs} args - Arguments to find a Review
     * @example
     * // Get one Review
     * const review = await prisma.review.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ReviewFindFirstOrThrowArgs>(args?: SelectSubset<T, ReviewFindFirstOrThrowArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Reviews that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Reviews
     * const reviews = await prisma.review.findMany()
     * 
     * // Get first 10 Reviews
     * const reviews = await prisma.review.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const reviewWithIdOnly = await prisma.review.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ReviewFindManyArgs>(args?: SelectSubset<T, ReviewFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Review.
     * @param {ReviewCreateArgs} args - Arguments to create a Review.
     * @example
     * // Create one Review
     * const Review = await prisma.review.create({
     *   data: {
     *     // ... data to create a Review
     *   }
     * })
     * 
     */
    create<T extends ReviewCreateArgs>(args: SelectSubset<T, ReviewCreateArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Reviews.
     * @param {ReviewCreateManyArgs} args - Arguments to create many Reviews.
     * @example
     * // Create many Reviews
     * const review = await prisma.review.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ReviewCreateManyArgs>(args?: SelectSubset<T, ReviewCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Reviews and returns the data saved in the database.
     * @param {ReviewCreateManyAndReturnArgs} args - Arguments to create many Reviews.
     * @example
     * // Create many Reviews
     * const review = await prisma.review.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Reviews and only return the `id`
     * const reviewWithIdOnly = await prisma.review.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ReviewCreateManyAndReturnArgs>(args?: SelectSubset<T, ReviewCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Review.
     * @param {ReviewDeleteArgs} args - Arguments to delete one Review.
     * @example
     * // Delete one Review
     * const Review = await prisma.review.delete({
     *   where: {
     *     // ... filter to delete one Review
     *   }
     * })
     * 
     */
    delete<T extends ReviewDeleteArgs>(args: SelectSubset<T, ReviewDeleteArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Review.
     * @param {ReviewUpdateArgs} args - Arguments to update one Review.
     * @example
     * // Update one Review
     * const review = await prisma.review.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ReviewUpdateArgs>(args: SelectSubset<T, ReviewUpdateArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Reviews.
     * @param {ReviewDeleteManyArgs} args - Arguments to filter Reviews to delete.
     * @example
     * // Delete a few Reviews
     * const { count } = await prisma.review.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ReviewDeleteManyArgs>(args?: SelectSubset<T, ReviewDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Reviews
     * const review = await prisma.review.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ReviewUpdateManyArgs>(args: SelectSubset<T, ReviewUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reviews and returns the data updated in the database.
     * @param {ReviewUpdateManyAndReturnArgs} args - Arguments to update many Reviews.
     * @example
     * // Update many Reviews
     * const review = await prisma.review.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Reviews and only return the `id`
     * const reviewWithIdOnly = await prisma.review.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ReviewUpdateManyAndReturnArgs>(args: SelectSubset<T, ReviewUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Review.
     * @param {ReviewUpsertArgs} args - Arguments to update or create a Review.
     * @example
     * // Update or create a Review
     * const review = await prisma.review.upsert({
     *   create: {
     *     // ... data to create a Review
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Review we want to update
     *   }
     * })
     */
    upsert<T extends ReviewUpsertArgs>(args: SelectSubset<T, ReviewUpsertArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Reviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewCountArgs} args - Arguments to filter Reviews to count.
     * @example
     * // Count the number of Reviews
     * const count = await prisma.review.count({
     *   where: {
     *     // ... the filter for the Reviews we want to count
     *   }
     * })
    **/
    count<T extends ReviewCountArgs>(
      args?: Subset<T, ReviewCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReviewCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Review.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReviewAggregateArgs>(args: Subset<T, ReviewAggregateArgs>): Prisma.PrismaPromise<GetReviewAggregateType<T>>

    /**
     * Group by Review.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReviewGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReviewGroupByArgs['orderBy'] }
        : { orderBy?: ReviewGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReviewGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReviewGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Review model
   */
  readonly fields: ReviewFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Review.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReviewClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    product<T extends ProductDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProductDefaultArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Review model
   */
  interface ReviewFieldRefs {
    readonly id: FieldRef<"Review", 'String'>
    readonly productId: FieldRef<"Review", 'String'>
    readonly userId: FieldRef<"Review", 'String'>
    readonly rating: FieldRef<"Review", 'Int'>
    readonly comment: FieldRef<"Review", 'String'>
    readonly createdAt: FieldRef<"Review", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Review findUnique
   */
  export type ReviewFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter, which Review to fetch.
     */
    where: ReviewWhereUniqueInput
  }

  /**
   * Review findUniqueOrThrow
   */
  export type ReviewFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter, which Review to fetch.
     */
    where: ReviewWhereUniqueInput
  }

  /**
   * Review findFirst
   */
  export type ReviewFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter, which Review to fetch.
     */
    where?: ReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reviews to fetch.
     */
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reviews.
     */
    cursor?: ReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reviews.
     */
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }

  /**
   * Review findFirstOrThrow
   */
  export type ReviewFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter, which Review to fetch.
     */
    where?: ReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reviews to fetch.
     */
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reviews.
     */
    cursor?: ReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reviews.
     */
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }

  /**
   * Review findMany
   */
  export type ReviewFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter, which Reviews to fetch.
     */
    where?: ReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reviews to fetch.
     */
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Reviews.
     */
    cursor?: ReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reviews.
     */
    skip?: number
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }

  /**
   * Review create
   */
  export type ReviewCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * The data needed to create a Review.
     */
    data: XOR<ReviewCreateInput, ReviewUncheckedCreateInput>
  }

  /**
   * Review createMany
   */
  export type ReviewCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Reviews.
     */
    data: ReviewCreateManyInput | ReviewCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Review createManyAndReturn
   */
  export type ReviewCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * The data used to create many Reviews.
     */
    data: ReviewCreateManyInput | ReviewCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Review update
   */
  export type ReviewUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * The data needed to update a Review.
     */
    data: XOR<ReviewUpdateInput, ReviewUncheckedUpdateInput>
    /**
     * Choose, which Review to update.
     */
    where: ReviewWhereUniqueInput
  }

  /**
   * Review updateMany
   */
  export type ReviewUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Reviews.
     */
    data: XOR<ReviewUpdateManyMutationInput, ReviewUncheckedUpdateManyInput>
    /**
     * Filter which Reviews to update
     */
    where?: ReviewWhereInput
    /**
     * Limit how many Reviews to update.
     */
    limit?: number
  }

  /**
   * Review updateManyAndReturn
   */
  export type ReviewUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * The data used to update Reviews.
     */
    data: XOR<ReviewUpdateManyMutationInput, ReviewUncheckedUpdateManyInput>
    /**
     * Filter which Reviews to update
     */
    where?: ReviewWhereInput
    /**
     * Limit how many Reviews to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Review upsert
   */
  export type ReviewUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * The filter to search for the Review to update in case it exists.
     */
    where: ReviewWhereUniqueInput
    /**
     * In case the Review found by the `where` argument doesn't exist, create a new Review with this data.
     */
    create: XOR<ReviewCreateInput, ReviewUncheckedCreateInput>
    /**
     * In case the Review was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReviewUpdateInput, ReviewUncheckedUpdateInput>
  }

  /**
   * Review delete
   */
  export type ReviewDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter which Review to delete.
     */
    where: ReviewWhereUniqueInput
  }

  /**
   * Review deleteMany
   */
  export type ReviewDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Reviews to delete
     */
    where?: ReviewWhereInput
    /**
     * Limit how many Reviews to delete.
     */
    limit?: number
  }

  /**
   * Review without action
   */
  export type ReviewDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
  }


  /**
   * Model Voucher
   */

  export type AggregateVoucher = {
    _count: VoucherCountAggregateOutputType | null
    _avg: VoucherAvgAggregateOutputType | null
    _sum: VoucherSumAggregateOutputType | null
    _min: VoucherMinAggregateOutputType | null
    _max: VoucherMaxAggregateOutputType | null
  }

  export type VoucherAvgAggregateOutputType = {
    discountValue: number | null
    minOrderValue: number | null
    usageLimit: number | null
    usedCount: number | null
  }

  export type VoucherSumAggregateOutputType = {
    discountValue: number | null
    minOrderValue: number | null
    usageLimit: number | null
    usedCount: number | null
  }

  export type VoucherMinAggregateOutputType = {
    id: string | null
    code: string | null
    discountType: $Enums.DiscountType | null
    discountValue: number | null
    minOrderValue: number | null
    startDate: Date | null
    endDate: Date | null
    usageLimit: number | null
    usedCount: number | null
  }

  export type VoucherMaxAggregateOutputType = {
    id: string | null
    code: string | null
    discountType: $Enums.DiscountType | null
    discountValue: number | null
    minOrderValue: number | null
    startDate: Date | null
    endDate: Date | null
    usageLimit: number | null
    usedCount: number | null
  }

  export type VoucherCountAggregateOutputType = {
    id: number
    code: number
    discountType: number
    discountValue: number
    minOrderValue: number
    startDate: number
    endDate: number
    usageLimit: number
    usedCount: number
    _all: number
  }


  export type VoucherAvgAggregateInputType = {
    discountValue?: true
    minOrderValue?: true
    usageLimit?: true
    usedCount?: true
  }

  export type VoucherSumAggregateInputType = {
    discountValue?: true
    minOrderValue?: true
    usageLimit?: true
    usedCount?: true
  }

  export type VoucherMinAggregateInputType = {
    id?: true
    code?: true
    discountType?: true
    discountValue?: true
    minOrderValue?: true
    startDate?: true
    endDate?: true
    usageLimit?: true
    usedCount?: true
  }

  export type VoucherMaxAggregateInputType = {
    id?: true
    code?: true
    discountType?: true
    discountValue?: true
    minOrderValue?: true
    startDate?: true
    endDate?: true
    usageLimit?: true
    usedCount?: true
  }

  export type VoucherCountAggregateInputType = {
    id?: true
    code?: true
    discountType?: true
    discountValue?: true
    minOrderValue?: true
    startDate?: true
    endDate?: true
    usageLimit?: true
    usedCount?: true
    _all?: true
  }

  export type VoucherAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Voucher to aggregate.
     */
    where?: VoucherWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vouchers to fetch.
     */
    orderBy?: VoucherOrderByWithRelationInput | VoucherOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VoucherWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vouchers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vouchers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Vouchers
    **/
    _count?: true | VoucherCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: VoucherAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: VoucherSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VoucherMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VoucherMaxAggregateInputType
  }

  export type GetVoucherAggregateType<T extends VoucherAggregateArgs> = {
        [P in keyof T & keyof AggregateVoucher]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVoucher[P]>
      : GetScalarType<T[P], AggregateVoucher[P]>
  }




  export type VoucherGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VoucherWhereInput
    orderBy?: VoucherOrderByWithAggregationInput | VoucherOrderByWithAggregationInput[]
    by: VoucherScalarFieldEnum[] | VoucherScalarFieldEnum
    having?: VoucherScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VoucherCountAggregateInputType | true
    _avg?: VoucherAvgAggregateInputType
    _sum?: VoucherSumAggregateInputType
    _min?: VoucherMinAggregateInputType
    _max?: VoucherMaxAggregateInputType
  }

  export type VoucherGroupByOutputType = {
    id: string
    code: string
    discountType: $Enums.DiscountType
    discountValue: number
    minOrderValue: number | null
    startDate: Date
    endDate: Date
    usageLimit: number | null
    usedCount: number
    _count: VoucherCountAggregateOutputType | null
    _avg: VoucherAvgAggregateOutputType | null
    _sum: VoucherSumAggregateOutputType | null
    _min: VoucherMinAggregateOutputType | null
    _max: VoucherMaxAggregateOutputType | null
  }

  type GetVoucherGroupByPayload<T extends VoucherGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VoucherGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VoucherGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VoucherGroupByOutputType[P]>
            : GetScalarType<T[P], VoucherGroupByOutputType[P]>
        }
      >
    >


  export type VoucherSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    discountType?: boolean
    discountValue?: boolean
    minOrderValue?: boolean
    startDate?: boolean
    endDate?: boolean
    usageLimit?: boolean
    usedCount?: boolean
    orders?: boolean | Voucher$ordersArgs<ExtArgs>
    _count?: boolean | VoucherCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["voucher"]>

  export type VoucherSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    discountType?: boolean
    discountValue?: boolean
    minOrderValue?: boolean
    startDate?: boolean
    endDate?: boolean
    usageLimit?: boolean
    usedCount?: boolean
  }, ExtArgs["result"]["voucher"]>

  export type VoucherSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    discountType?: boolean
    discountValue?: boolean
    minOrderValue?: boolean
    startDate?: boolean
    endDate?: boolean
    usageLimit?: boolean
    usedCount?: boolean
  }, ExtArgs["result"]["voucher"]>

  export type VoucherSelectScalar = {
    id?: boolean
    code?: boolean
    discountType?: boolean
    discountValue?: boolean
    minOrderValue?: boolean
    startDate?: boolean
    endDate?: boolean
    usageLimit?: boolean
    usedCount?: boolean
  }

  export type VoucherOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "code" | "discountType" | "discountValue" | "minOrderValue" | "startDate" | "endDate" | "usageLimit" | "usedCount", ExtArgs["result"]["voucher"]>
  export type VoucherInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    orders?: boolean | Voucher$ordersArgs<ExtArgs>
    _count?: boolean | VoucherCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type VoucherIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type VoucherIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $VoucherPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Voucher"
    objects: {
      orders: Prisma.$OrderPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      code: string
      discountType: $Enums.DiscountType
      discountValue: number
      minOrderValue: number | null
      startDate: Date
      endDate: Date
      usageLimit: number | null
      usedCount: number
    }, ExtArgs["result"]["voucher"]>
    composites: {}
  }

  type VoucherGetPayload<S extends boolean | null | undefined | VoucherDefaultArgs> = $Result.GetResult<Prisma.$VoucherPayload, S>

  type VoucherCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<VoucherFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: VoucherCountAggregateInputType | true
    }

  export interface VoucherDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Voucher'], meta: { name: 'Voucher' } }
    /**
     * Find zero or one Voucher that matches the filter.
     * @param {VoucherFindUniqueArgs} args - Arguments to find a Voucher
     * @example
     * // Get one Voucher
     * const voucher = await prisma.voucher.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VoucherFindUniqueArgs>(args: SelectSubset<T, VoucherFindUniqueArgs<ExtArgs>>): Prisma__VoucherClient<$Result.GetResult<Prisma.$VoucherPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Voucher that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {VoucherFindUniqueOrThrowArgs} args - Arguments to find a Voucher
     * @example
     * // Get one Voucher
     * const voucher = await prisma.voucher.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VoucherFindUniqueOrThrowArgs>(args: SelectSubset<T, VoucherFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VoucherClient<$Result.GetResult<Prisma.$VoucherPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Voucher that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoucherFindFirstArgs} args - Arguments to find a Voucher
     * @example
     * // Get one Voucher
     * const voucher = await prisma.voucher.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VoucherFindFirstArgs>(args?: SelectSubset<T, VoucherFindFirstArgs<ExtArgs>>): Prisma__VoucherClient<$Result.GetResult<Prisma.$VoucherPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Voucher that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoucherFindFirstOrThrowArgs} args - Arguments to find a Voucher
     * @example
     * // Get one Voucher
     * const voucher = await prisma.voucher.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VoucherFindFirstOrThrowArgs>(args?: SelectSubset<T, VoucherFindFirstOrThrowArgs<ExtArgs>>): Prisma__VoucherClient<$Result.GetResult<Prisma.$VoucherPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Vouchers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoucherFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Vouchers
     * const vouchers = await prisma.voucher.findMany()
     * 
     * // Get first 10 Vouchers
     * const vouchers = await prisma.voucher.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const voucherWithIdOnly = await prisma.voucher.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends VoucherFindManyArgs>(args?: SelectSubset<T, VoucherFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VoucherPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Voucher.
     * @param {VoucherCreateArgs} args - Arguments to create a Voucher.
     * @example
     * // Create one Voucher
     * const Voucher = await prisma.voucher.create({
     *   data: {
     *     // ... data to create a Voucher
     *   }
     * })
     * 
     */
    create<T extends VoucherCreateArgs>(args: SelectSubset<T, VoucherCreateArgs<ExtArgs>>): Prisma__VoucherClient<$Result.GetResult<Prisma.$VoucherPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Vouchers.
     * @param {VoucherCreateManyArgs} args - Arguments to create many Vouchers.
     * @example
     * // Create many Vouchers
     * const voucher = await prisma.voucher.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VoucherCreateManyArgs>(args?: SelectSubset<T, VoucherCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Vouchers and returns the data saved in the database.
     * @param {VoucherCreateManyAndReturnArgs} args - Arguments to create many Vouchers.
     * @example
     * // Create many Vouchers
     * const voucher = await prisma.voucher.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Vouchers and only return the `id`
     * const voucherWithIdOnly = await prisma.voucher.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends VoucherCreateManyAndReturnArgs>(args?: SelectSubset<T, VoucherCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VoucherPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Voucher.
     * @param {VoucherDeleteArgs} args - Arguments to delete one Voucher.
     * @example
     * // Delete one Voucher
     * const Voucher = await prisma.voucher.delete({
     *   where: {
     *     // ... filter to delete one Voucher
     *   }
     * })
     * 
     */
    delete<T extends VoucherDeleteArgs>(args: SelectSubset<T, VoucherDeleteArgs<ExtArgs>>): Prisma__VoucherClient<$Result.GetResult<Prisma.$VoucherPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Voucher.
     * @param {VoucherUpdateArgs} args - Arguments to update one Voucher.
     * @example
     * // Update one Voucher
     * const voucher = await prisma.voucher.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VoucherUpdateArgs>(args: SelectSubset<T, VoucherUpdateArgs<ExtArgs>>): Prisma__VoucherClient<$Result.GetResult<Prisma.$VoucherPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Vouchers.
     * @param {VoucherDeleteManyArgs} args - Arguments to filter Vouchers to delete.
     * @example
     * // Delete a few Vouchers
     * const { count } = await prisma.voucher.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VoucherDeleteManyArgs>(args?: SelectSubset<T, VoucherDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Vouchers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoucherUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Vouchers
     * const voucher = await prisma.voucher.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VoucherUpdateManyArgs>(args: SelectSubset<T, VoucherUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Vouchers and returns the data updated in the database.
     * @param {VoucherUpdateManyAndReturnArgs} args - Arguments to update many Vouchers.
     * @example
     * // Update many Vouchers
     * const voucher = await prisma.voucher.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Vouchers and only return the `id`
     * const voucherWithIdOnly = await prisma.voucher.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends VoucherUpdateManyAndReturnArgs>(args: SelectSubset<T, VoucherUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VoucherPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Voucher.
     * @param {VoucherUpsertArgs} args - Arguments to update or create a Voucher.
     * @example
     * // Update or create a Voucher
     * const voucher = await prisma.voucher.upsert({
     *   create: {
     *     // ... data to create a Voucher
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Voucher we want to update
     *   }
     * })
     */
    upsert<T extends VoucherUpsertArgs>(args: SelectSubset<T, VoucherUpsertArgs<ExtArgs>>): Prisma__VoucherClient<$Result.GetResult<Prisma.$VoucherPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Vouchers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoucherCountArgs} args - Arguments to filter Vouchers to count.
     * @example
     * // Count the number of Vouchers
     * const count = await prisma.voucher.count({
     *   where: {
     *     // ... the filter for the Vouchers we want to count
     *   }
     * })
    **/
    count<T extends VoucherCountArgs>(
      args?: Subset<T, VoucherCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VoucherCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Voucher.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoucherAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VoucherAggregateArgs>(args: Subset<T, VoucherAggregateArgs>): Prisma.PrismaPromise<GetVoucherAggregateType<T>>

    /**
     * Group by Voucher.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoucherGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VoucherGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VoucherGroupByArgs['orderBy'] }
        : { orderBy?: VoucherGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VoucherGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVoucherGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Voucher model
   */
  readonly fields: VoucherFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Voucher.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VoucherClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    orders<T extends Voucher$ordersArgs<ExtArgs> = {}>(args?: Subset<T, Voucher$ordersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Voucher model
   */
  interface VoucherFieldRefs {
    readonly id: FieldRef<"Voucher", 'String'>
    readonly code: FieldRef<"Voucher", 'String'>
    readonly discountType: FieldRef<"Voucher", 'DiscountType'>
    readonly discountValue: FieldRef<"Voucher", 'Float'>
    readonly minOrderValue: FieldRef<"Voucher", 'Float'>
    readonly startDate: FieldRef<"Voucher", 'DateTime'>
    readonly endDate: FieldRef<"Voucher", 'DateTime'>
    readonly usageLimit: FieldRef<"Voucher", 'Int'>
    readonly usedCount: FieldRef<"Voucher", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Voucher findUnique
   */
  export type VoucherFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Voucher
     */
    select?: VoucherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Voucher
     */
    omit?: VoucherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoucherInclude<ExtArgs> | null
    /**
     * Filter, which Voucher to fetch.
     */
    where: VoucherWhereUniqueInput
  }

  /**
   * Voucher findUniqueOrThrow
   */
  export type VoucherFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Voucher
     */
    select?: VoucherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Voucher
     */
    omit?: VoucherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoucherInclude<ExtArgs> | null
    /**
     * Filter, which Voucher to fetch.
     */
    where: VoucherWhereUniqueInput
  }

  /**
   * Voucher findFirst
   */
  export type VoucherFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Voucher
     */
    select?: VoucherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Voucher
     */
    omit?: VoucherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoucherInclude<ExtArgs> | null
    /**
     * Filter, which Voucher to fetch.
     */
    where?: VoucherWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vouchers to fetch.
     */
    orderBy?: VoucherOrderByWithRelationInput | VoucherOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Vouchers.
     */
    cursor?: VoucherWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vouchers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vouchers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Vouchers.
     */
    distinct?: VoucherScalarFieldEnum | VoucherScalarFieldEnum[]
  }

  /**
   * Voucher findFirstOrThrow
   */
  export type VoucherFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Voucher
     */
    select?: VoucherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Voucher
     */
    omit?: VoucherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoucherInclude<ExtArgs> | null
    /**
     * Filter, which Voucher to fetch.
     */
    where?: VoucherWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vouchers to fetch.
     */
    orderBy?: VoucherOrderByWithRelationInput | VoucherOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Vouchers.
     */
    cursor?: VoucherWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vouchers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vouchers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Vouchers.
     */
    distinct?: VoucherScalarFieldEnum | VoucherScalarFieldEnum[]
  }

  /**
   * Voucher findMany
   */
  export type VoucherFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Voucher
     */
    select?: VoucherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Voucher
     */
    omit?: VoucherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoucherInclude<ExtArgs> | null
    /**
     * Filter, which Vouchers to fetch.
     */
    where?: VoucherWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vouchers to fetch.
     */
    orderBy?: VoucherOrderByWithRelationInput | VoucherOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Vouchers.
     */
    cursor?: VoucherWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vouchers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vouchers.
     */
    skip?: number
    distinct?: VoucherScalarFieldEnum | VoucherScalarFieldEnum[]
  }

  /**
   * Voucher create
   */
  export type VoucherCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Voucher
     */
    select?: VoucherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Voucher
     */
    omit?: VoucherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoucherInclude<ExtArgs> | null
    /**
     * The data needed to create a Voucher.
     */
    data: XOR<VoucherCreateInput, VoucherUncheckedCreateInput>
  }

  /**
   * Voucher createMany
   */
  export type VoucherCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Vouchers.
     */
    data: VoucherCreateManyInput | VoucherCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Voucher createManyAndReturn
   */
  export type VoucherCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Voucher
     */
    select?: VoucherSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Voucher
     */
    omit?: VoucherOmit<ExtArgs> | null
    /**
     * The data used to create many Vouchers.
     */
    data: VoucherCreateManyInput | VoucherCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Voucher update
   */
  export type VoucherUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Voucher
     */
    select?: VoucherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Voucher
     */
    omit?: VoucherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoucherInclude<ExtArgs> | null
    /**
     * The data needed to update a Voucher.
     */
    data: XOR<VoucherUpdateInput, VoucherUncheckedUpdateInput>
    /**
     * Choose, which Voucher to update.
     */
    where: VoucherWhereUniqueInput
  }

  /**
   * Voucher updateMany
   */
  export type VoucherUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Vouchers.
     */
    data: XOR<VoucherUpdateManyMutationInput, VoucherUncheckedUpdateManyInput>
    /**
     * Filter which Vouchers to update
     */
    where?: VoucherWhereInput
    /**
     * Limit how many Vouchers to update.
     */
    limit?: number
  }

  /**
   * Voucher updateManyAndReturn
   */
  export type VoucherUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Voucher
     */
    select?: VoucherSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Voucher
     */
    omit?: VoucherOmit<ExtArgs> | null
    /**
     * The data used to update Vouchers.
     */
    data: XOR<VoucherUpdateManyMutationInput, VoucherUncheckedUpdateManyInput>
    /**
     * Filter which Vouchers to update
     */
    where?: VoucherWhereInput
    /**
     * Limit how many Vouchers to update.
     */
    limit?: number
  }

  /**
   * Voucher upsert
   */
  export type VoucherUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Voucher
     */
    select?: VoucherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Voucher
     */
    omit?: VoucherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoucherInclude<ExtArgs> | null
    /**
     * The filter to search for the Voucher to update in case it exists.
     */
    where: VoucherWhereUniqueInput
    /**
     * In case the Voucher found by the `where` argument doesn't exist, create a new Voucher with this data.
     */
    create: XOR<VoucherCreateInput, VoucherUncheckedCreateInput>
    /**
     * In case the Voucher was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VoucherUpdateInput, VoucherUncheckedUpdateInput>
  }

  /**
   * Voucher delete
   */
  export type VoucherDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Voucher
     */
    select?: VoucherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Voucher
     */
    omit?: VoucherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoucherInclude<ExtArgs> | null
    /**
     * Filter which Voucher to delete.
     */
    where: VoucherWhereUniqueInput
  }

  /**
   * Voucher deleteMany
   */
  export type VoucherDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Vouchers to delete
     */
    where?: VoucherWhereInput
    /**
     * Limit how many Vouchers to delete.
     */
    limit?: number
  }

  /**
   * Voucher.orders
   */
  export type Voucher$ordersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    where?: OrderWhereInput
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    cursor?: OrderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * Voucher without action
   */
  export type VoucherDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Voucher
     */
    select?: VoucherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Voucher
     */
    omit?: VoucherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoucherInclude<ExtArgs> | null
  }


  /**
   * Model Order
   */

  export type AggregateOrder = {
    _count: OrderCountAggregateOutputType | null
    _avg: OrderAvgAggregateOutputType | null
    _sum: OrderSumAggregateOutputType | null
    _min: OrderMinAggregateOutputType | null
    _max: OrderMaxAggregateOutputType | null
  }

  export type OrderAvgAggregateOutputType = {
    totalAmount: number | null
  }

  export type OrderSumAggregateOutputType = {
    totalAmount: number | null
  }

  export type OrderMinAggregateOutputType = {
    id: string | null
    userId: string | null
    totalAmount: number | null
    status: $Enums.OrderStatus | null
    paymentId: string | null
    shippingId: string | null
    voucherId: string | null
    createdAt: Date | null
  }

  export type OrderMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    totalAmount: number | null
    status: $Enums.OrderStatus | null
    paymentId: string | null
    shippingId: string | null
    voucherId: string | null
    createdAt: Date | null
  }

  export type OrderCountAggregateOutputType = {
    id: number
    userId: number
    totalAmount: number
    status: number
    paymentId: number
    shippingId: number
    voucherId: number
    createdAt: number
    _all: number
  }


  export type OrderAvgAggregateInputType = {
    totalAmount?: true
  }

  export type OrderSumAggregateInputType = {
    totalAmount?: true
  }

  export type OrderMinAggregateInputType = {
    id?: true
    userId?: true
    totalAmount?: true
    status?: true
    paymentId?: true
    shippingId?: true
    voucherId?: true
    createdAt?: true
  }

  export type OrderMaxAggregateInputType = {
    id?: true
    userId?: true
    totalAmount?: true
    status?: true
    paymentId?: true
    shippingId?: true
    voucherId?: true
    createdAt?: true
  }

  export type OrderCountAggregateInputType = {
    id?: true
    userId?: true
    totalAmount?: true
    status?: true
    paymentId?: true
    shippingId?: true
    voucherId?: true
    createdAt?: true
    _all?: true
  }

  export type OrderAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Order to aggregate.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Orders
    **/
    _count?: true | OrderCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OrderAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OrderSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrderMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrderMaxAggregateInputType
  }

  export type GetOrderAggregateType<T extends OrderAggregateArgs> = {
        [P in keyof T & keyof AggregateOrder]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrder[P]>
      : GetScalarType<T[P], AggregateOrder[P]>
  }




  export type OrderGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderWhereInput
    orderBy?: OrderOrderByWithAggregationInput | OrderOrderByWithAggregationInput[]
    by: OrderScalarFieldEnum[] | OrderScalarFieldEnum
    having?: OrderScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrderCountAggregateInputType | true
    _avg?: OrderAvgAggregateInputType
    _sum?: OrderSumAggregateInputType
    _min?: OrderMinAggregateInputType
    _max?: OrderMaxAggregateInputType
  }

  export type OrderGroupByOutputType = {
    id: string
    userId: string
    totalAmount: number
    status: $Enums.OrderStatus
    paymentId: string | null
    shippingId: string | null
    voucherId: string | null
    createdAt: Date
    _count: OrderCountAggregateOutputType | null
    _avg: OrderAvgAggregateOutputType | null
    _sum: OrderSumAggregateOutputType | null
    _min: OrderMinAggregateOutputType | null
    _max: OrderMaxAggregateOutputType | null
  }

  type GetOrderGroupByPayload<T extends OrderGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OrderGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrderGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrderGroupByOutputType[P]>
            : GetScalarType<T[P], OrderGroupByOutputType[P]>
        }
      >
    >


  export type OrderSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    totalAmount?: boolean
    status?: boolean
    paymentId?: boolean
    shippingId?: boolean
    voucherId?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    voucher?: boolean | Order$voucherArgs<ExtArgs>
    payment?: boolean | Order$paymentArgs<ExtArgs>
    orderItems?: boolean | Order$orderItemsArgs<ExtArgs>
    logisticsOrders?: boolean | Order$logisticsOrdersArgs<ExtArgs>
    _count?: boolean | OrderCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["order"]>

  export type OrderSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    totalAmount?: boolean
    status?: boolean
    paymentId?: boolean
    shippingId?: boolean
    voucherId?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    voucher?: boolean | Order$voucherArgs<ExtArgs>
  }, ExtArgs["result"]["order"]>

  export type OrderSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    totalAmount?: boolean
    status?: boolean
    paymentId?: boolean
    shippingId?: boolean
    voucherId?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    voucher?: boolean | Order$voucherArgs<ExtArgs>
  }, ExtArgs["result"]["order"]>

  export type OrderSelectScalar = {
    id?: boolean
    userId?: boolean
    totalAmount?: boolean
    status?: boolean
    paymentId?: boolean
    shippingId?: boolean
    voucherId?: boolean
    createdAt?: boolean
  }

  export type OrderOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "totalAmount" | "status" | "paymentId" | "shippingId" | "voucherId" | "createdAt", ExtArgs["result"]["order"]>
  export type OrderInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    voucher?: boolean | Order$voucherArgs<ExtArgs>
    payment?: boolean | Order$paymentArgs<ExtArgs>
    orderItems?: boolean | Order$orderItemsArgs<ExtArgs>
    logisticsOrders?: boolean | Order$logisticsOrdersArgs<ExtArgs>
    _count?: boolean | OrderCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type OrderIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    voucher?: boolean | Order$voucherArgs<ExtArgs>
  }
  export type OrderIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    voucher?: boolean | Order$voucherArgs<ExtArgs>
  }

  export type $OrderPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Order"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      voucher: Prisma.$VoucherPayload<ExtArgs> | null
      payment: Prisma.$PaymentPayload<ExtArgs> | null
      orderItems: Prisma.$OrderItemPayload<ExtArgs>[]
      logisticsOrders: Prisma.$LogisticsOrderPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      totalAmount: number
      status: $Enums.OrderStatus
      paymentId: string | null
      shippingId: string | null
      voucherId: string | null
      createdAt: Date
    }, ExtArgs["result"]["order"]>
    composites: {}
  }

  type OrderGetPayload<S extends boolean | null | undefined | OrderDefaultArgs> = $Result.GetResult<Prisma.$OrderPayload, S>

  type OrderCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<OrderFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: OrderCountAggregateInputType | true
    }

  export interface OrderDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Order'], meta: { name: 'Order' } }
    /**
     * Find zero or one Order that matches the filter.
     * @param {OrderFindUniqueArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OrderFindUniqueArgs>(args: SelectSubset<T, OrderFindUniqueArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Order that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {OrderFindUniqueOrThrowArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OrderFindUniqueOrThrowArgs>(args: SelectSubset<T, OrderFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Order that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderFindFirstArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OrderFindFirstArgs>(args?: SelectSubset<T, OrderFindFirstArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Order that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderFindFirstOrThrowArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OrderFindFirstOrThrowArgs>(args?: SelectSubset<T, OrderFindFirstOrThrowArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Orders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Orders
     * const orders = await prisma.order.findMany()
     * 
     * // Get first 10 Orders
     * const orders = await prisma.order.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const orderWithIdOnly = await prisma.order.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OrderFindManyArgs>(args?: SelectSubset<T, OrderFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Order.
     * @param {OrderCreateArgs} args - Arguments to create a Order.
     * @example
     * // Create one Order
     * const Order = await prisma.order.create({
     *   data: {
     *     // ... data to create a Order
     *   }
     * })
     * 
     */
    create<T extends OrderCreateArgs>(args: SelectSubset<T, OrderCreateArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Orders.
     * @param {OrderCreateManyArgs} args - Arguments to create many Orders.
     * @example
     * // Create many Orders
     * const order = await prisma.order.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OrderCreateManyArgs>(args?: SelectSubset<T, OrderCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Orders and returns the data saved in the database.
     * @param {OrderCreateManyAndReturnArgs} args - Arguments to create many Orders.
     * @example
     * // Create many Orders
     * const order = await prisma.order.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Orders and only return the `id`
     * const orderWithIdOnly = await prisma.order.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OrderCreateManyAndReturnArgs>(args?: SelectSubset<T, OrderCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Order.
     * @param {OrderDeleteArgs} args - Arguments to delete one Order.
     * @example
     * // Delete one Order
     * const Order = await prisma.order.delete({
     *   where: {
     *     // ... filter to delete one Order
     *   }
     * })
     * 
     */
    delete<T extends OrderDeleteArgs>(args: SelectSubset<T, OrderDeleteArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Order.
     * @param {OrderUpdateArgs} args - Arguments to update one Order.
     * @example
     * // Update one Order
     * const order = await prisma.order.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OrderUpdateArgs>(args: SelectSubset<T, OrderUpdateArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Orders.
     * @param {OrderDeleteManyArgs} args - Arguments to filter Orders to delete.
     * @example
     * // Delete a few Orders
     * const { count } = await prisma.order.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OrderDeleteManyArgs>(args?: SelectSubset<T, OrderDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Orders
     * const order = await prisma.order.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OrderUpdateManyArgs>(args: SelectSubset<T, OrderUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Orders and returns the data updated in the database.
     * @param {OrderUpdateManyAndReturnArgs} args - Arguments to update many Orders.
     * @example
     * // Update many Orders
     * const order = await prisma.order.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Orders and only return the `id`
     * const orderWithIdOnly = await prisma.order.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends OrderUpdateManyAndReturnArgs>(args: SelectSubset<T, OrderUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Order.
     * @param {OrderUpsertArgs} args - Arguments to update or create a Order.
     * @example
     * // Update or create a Order
     * const order = await prisma.order.upsert({
     *   create: {
     *     // ... data to create a Order
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Order we want to update
     *   }
     * })
     */
    upsert<T extends OrderUpsertArgs>(args: SelectSubset<T, OrderUpsertArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderCountArgs} args - Arguments to filter Orders to count.
     * @example
     * // Count the number of Orders
     * const count = await prisma.order.count({
     *   where: {
     *     // ... the filter for the Orders we want to count
     *   }
     * })
    **/
    count<T extends OrderCountArgs>(
      args?: Subset<T, OrderCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrderCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Order.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrderAggregateArgs>(args: Subset<T, OrderAggregateArgs>): Prisma.PrismaPromise<GetOrderAggregateType<T>>

    /**
     * Group by Order.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrderGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrderGroupByArgs['orderBy'] }
        : { orderBy?: OrderGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Order model
   */
  readonly fields: OrderFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Order.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OrderClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    voucher<T extends Order$voucherArgs<ExtArgs> = {}>(args?: Subset<T, Order$voucherArgs<ExtArgs>>): Prisma__VoucherClient<$Result.GetResult<Prisma.$VoucherPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    payment<T extends Order$paymentArgs<ExtArgs> = {}>(args?: Subset<T, Order$paymentArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    orderItems<T extends Order$orderItemsArgs<ExtArgs> = {}>(args?: Subset<T, Order$orderItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    logisticsOrders<T extends Order$logisticsOrdersArgs<ExtArgs> = {}>(args?: Subset<T, Order$logisticsOrdersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LogisticsOrderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Order model
   */
  interface OrderFieldRefs {
    readonly id: FieldRef<"Order", 'String'>
    readonly userId: FieldRef<"Order", 'String'>
    readonly totalAmount: FieldRef<"Order", 'Float'>
    readonly status: FieldRef<"Order", 'OrderStatus'>
    readonly paymentId: FieldRef<"Order", 'String'>
    readonly shippingId: FieldRef<"Order", 'String'>
    readonly voucherId: FieldRef<"Order", 'String'>
    readonly createdAt: FieldRef<"Order", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Order findUnique
   */
  export type OrderFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where: OrderWhereUniqueInput
  }

  /**
   * Order findUniqueOrThrow
   */
  export type OrderFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where: OrderWhereUniqueInput
  }

  /**
   * Order findFirst
   */
  export type OrderFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Orders.
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Orders.
     */
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * Order findFirstOrThrow
   */
  export type OrderFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Orders.
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Orders.
     */
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * Order findMany
   */
  export type OrderFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Orders to fetch.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Orders.
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * Order create
   */
  export type OrderCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * The data needed to create a Order.
     */
    data: XOR<OrderCreateInput, OrderUncheckedCreateInput>
  }

  /**
   * Order createMany
   */
  export type OrderCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Orders.
     */
    data: OrderCreateManyInput | OrderCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Order createManyAndReturn
   */
  export type OrderCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * The data used to create many Orders.
     */
    data: OrderCreateManyInput | OrderCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Order update
   */
  export type OrderUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * The data needed to update a Order.
     */
    data: XOR<OrderUpdateInput, OrderUncheckedUpdateInput>
    /**
     * Choose, which Order to update.
     */
    where: OrderWhereUniqueInput
  }

  /**
   * Order updateMany
   */
  export type OrderUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Orders.
     */
    data: XOR<OrderUpdateManyMutationInput, OrderUncheckedUpdateManyInput>
    /**
     * Filter which Orders to update
     */
    where?: OrderWhereInput
    /**
     * Limit how many Orders to update.
     */
    limit?: number
  }

  /**
   * Order updateManyAndReturn
   */
  export type OrderUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * The data used to update Orders.
     */
    data: XOR<OrderUpdateManyMutationInput, OrderUncheckedUpdateManyInput>
    /**
     * Filter which Orders to update
     */
    where?: OrderWhereInput
    /**
     * Limit how many Orders to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Order upsert
   */
  export type OrderUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * The filter to search for the Order to update in case it exists.
     */
    where: OrderWhereUniqueInput
    /**
     * In case the Order found by the `where` argument doesn't exist, create a new Order with this data.
     */
    create: XOR<OrderCreateInput, OrderUncheckedCreateInput>
    /**
     * In case the Order was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OrderUpdateInput, OrderUncheckedUpdateInput>
  }

  /**
   * Order delete
   */
  export type OrderDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter which Order to delete.
     */
    where: OrderWhereUniqueInput
  }

  /**
   * Order deleteMany
   */
  export type OrderDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Orders to delete
     */
    where?: OrderWhereInput
    /**
     * Limit how many Orders to delete.
     */
    limit?: number
  }

  /**
   * Order.voucher
   */
  export type Order$voucherArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Voucher
     */
    select?: VoucherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Voucher
     */
    omit?: VoucherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoucherInclude<ExtArgs> | null
    where?: VoucherWhereInput
  }

  /**
   * Order.payment
   */
  export type Order$paymentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    where?: PaymentWhereInput
  }

  /**
   * Order.orderItems
   */
  export type Order$orderItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    where?: OrderItemWhereInput
    orderBy?: OrderItemOrderByWithRelationInput | OrderItemOrderByWithRelationInput[]
    cursor?: OrderItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderItemScalarFieldEnum | OrderItemScalarFieldEnum[]
  }

  /**
   * Order.logisticsOrders
   */
  export type Order$logisticsOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LogisticsOrder
     */
    select?: LogisticsOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LogisticsOrder
     */
    omit?: LogisticsOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogisticsOrderInclude<ExtArgs> | null
    where?: LogisticsOrderWhereInput
    orderBy?: LogisticsOrderOrderByWithRelationInput | LogisticsOrderOrderByWithRelationInput[]
    cursor?: LogisticsOrderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LogisticsOrderScalarFieldEnum | LogisticsOrderScalarFieldEnum[]
  }

  /**
   * Order without action
   */
  export type OrderDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
  }


  /**
   * Model OrderItem
   */

  export type AggregateOrderItem = {
    _count: OrderItemCountAggregateOutputType | null
    _avg: OrderItemAvgAggregateOutputType | null
    _sum: OrderItemSumAggregateOutputType | null
    _min: OrderItemMinAggregateOutputType | null
    _max: OrderItemMaxAggregateOutputType | null
  }

  export type OrderItemAvgAggregateOutputType = {
    quantity: number | null
    price: number | null
  }

  export type OrderItemSumAggregateOutputType = {
    quantity: number | null
    price: number | null
  }

  export type OrderItemMinAggregateOutputType = {
    id: string | null
    orderId: string | null
    productId: string | null
    variantId: string | null
    quantity: number | null
    price: number | null
  }

  export type OrderItemMaxAggregateOutputType = {
    id: string | null
    orderId: string | null
    productId: string | null
    variantId: string | null
    quantity: number | null
    price: number | null
  }

  export type OrderItemCountAggregateOutputType = {
    id: number
    orderId: number
    productId: number
    variantId: number
    quantity: number
    price: number
    _all: number
  }


  export type OrderItemAvgAggregateInputType = {
    quantity?: true
    price?: true
  }

  export type OrderItemSumAggregateInputType = {
    quantity?: true
    price?: true
  }

  export type OrderItemMinAggregateInputType = {
    id?: true
    orderId?: true
    productId?: true
    variantId?: true
    quantity?: true
    price?: true
  }

  export type OrderItemMaxAggregateInputType = {
    id?: true
    orderId?: true
    productId?: true
    variantId?: true
    quantity?: true
    price?: true
  }

  export type OrderItemCountAggregateInputType = {
    id?: true
    orderId?: true
    productId?: true
    variantId?: true
    quantity?: true
    price?: true
    _all?: true
  }

  export type OrderItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OrderItem to aggregate.
     */
    where?: OrderItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderItems to fetch.
     */
    orderBy?: OrderItemOrderByWithRelationInput | OrderItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OrderItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned OrderItems
    **/
    _count?: true | OrderItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OrderItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OrderItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrderItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrderItemMaxAggregateInputType
  }

  export type GetOrderItemAggregateType<T extends OrderItemAggregateArgs> = {
        [P in keyof T & keyof AggregateOrderItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrderItem[P]>
      : GetScalarType<T[P], AggregateOrderItem[P]>
  }




  export type OrderItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderItemWhereInput
    orderBy?: OrderItemOrderByWithAggregationInput | OrderItemOrderByWithAggregationInput[]
    by: OrderItemScalarFieldEnum[] | OrderItemScalarFieldEnum
    having?: OrderItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrderItemCountAggregateInputType | true
    _avg?: OrderItemAvgAggregateInputType
    _sum?: OrderItemSumAggregateInputType
    _min?: OrderItemMinAggregateInputType
    _max?: OrderItemMaxAggregateInputType
  }

  export type OrderItemGroupByOutputType = {
    id: string
    orderId: string
    productId: string
    variantId: string | null
    quantity: number
    price: number
    _count: OrderItemCountAggregateOutputType | null
    _avg: OrderItemAvgAggregateOutputType | null
    _sum: OrderItemSumAggregateOutputType | null
    _min: OrderItemMinAggregateOutputType | null
    _max: OrderItemMaxAggregateOutputType | null
  }

  type GetOrderItemGroupByPayload<T extends OrderItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OrderItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrderItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrderItemGroupByOutputType[P]>
            : GetScalarType<T[P], OrderItemGroupByOutputType[P]>
        }
      >
    >


  export type OrderItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    orderId?: boolean
    productId?: boolean
    variantId?: boolean
    quantity?: boolean
    price?: boolean
    order?: boolean | OrderDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["orderItem"]>

  export type OrderItemSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    orderId?: boolean
    productId?: boolean
    variantId?: boolean
    quantity?: boolean
    price?: boolean
    order?: boolean | OrderDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["orderItem"]>

  export type OrderItemSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    orderId?: boolean
    productId?: boolean
    variantId?: boolean
    quantity?: boolean
    price?: boolean
    order?: boolean | OrderDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["orderItem"]>

  export type OrderItemSelectScalar = {
    id?: boolean
    orderId?: boolean
    productId?: boolean
    variantId?: boolean
    quantity?: boolean
    price?: boolean
  }

  export type OrderItemOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "orderId" | "productId" | "variantId" | "quantity" | "price", ExtArgs["result"]["orderItem"]>
  export type OrderItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    order?: boolean | OrderDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }
  export type OrderItemIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    order?: boolean | OrderDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }
  export type OrderItemIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    order?: boolean | OrderDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }

  export type $OrderItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "OrderItem"
    objects: {
      order: Prisma.$OrderPayload<ExtArgs>
      product: Prisma.$ProductPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      orderId: string
      productId: string
      variantId: string | null
      quantity: number
      price: number
    }, ExtArgs["result"]["orderItem"]>
    composites: {}
  }

  type OrderItemGetPayload<S extends boolean | null | undefined | OrderItemDefaultArgs> = $Result.GetResult<Prisma.$OrderItemPayload, S>

  type OrderItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<OrderItemFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: OrderItemCountAggregateInputType | true
    }

  export interface OrderItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['OrderItem'], meta: { name: 'OrderItem' } }
    /**
     * Find zero or one OrderItem that matches the filter.
     * @param {OrderItemFindUniqueArgs} args - Arguments to find a OrderItem
     * @example
     * // Get one OrderItem
     * const orderItem = await prisma.orderItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OrderItemFindUniqueArgs>(args: SelectSubset<T, OrderItemFindUniqueArgs<ExtArgs>>): Prisma__OrderItemClient<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one OrderItem that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {OrderItemFindUniqueOrThrowArgs} args - Arguments to find a OrderItem
     * @example
     * // Get one OrderItem
     * const orderItem = await prisma.orderItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OrderItemFindUniqueOrThrowArgs>(args: SelectSubset<T, OrderItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OrderItemClient<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first OrderItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderItemFindFirstArgs} args - Arguments to find a OrderItem
     * @example
     * // Get one OrderItem
     * const orderItem = await prisma.orderItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OrderItemFindFirstArgs>(args?: SelectSubset<T, OrderItemFindFirstArgs<ExtArgs>>): Prisma__OrderItemClient<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first OrderItem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderItemFindFirstOrThrowArgs} args - Arguments to find a OrderItem
     * @example
     * // Get one OrderItem
     * const orderItem = await prisma.orderItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OrderItemFindFirstOrThrowArgs>(args?: SelectSubset<T, OrderItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__OrderItemClient<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more OrderItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all OrderItems
     * const orderItems = await prisma.orderItem.findMany()
     * 
     * // Get first 10 OrderItems
     * const orderItems = await prisma.orderItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const orderItemWithIdOnly = await prisma.orderItem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OrderItemFindManyArgs>(args?: SelectSubset<T, OrderItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a OrderItem.
     * @param {OrderItemCreateArgs} args - Arguments to create a OrderItem.
     * @example
     * // Create one OrderItem
     * const OrderItem = await prisma.orderItem.create({
     *   data: {
     *     // ... data to create a OrderItem
     *   }
     * })
     * 
     */
    create<T extends OrderItemCreateArgs>(args: SelectSubset<T, OrderItemCreateArgs<ExtArgs>>): Prisma__OrderItemClient<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many OrderItems.
     * @param {OrderItemCreateManyArgs} args - Arguments to create many OrderItems.
     * @example
     * // Create many OrderItems
     * const orderItem = await prisma.orderItem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OrderItemCreateManyArgs>(args?: SelectSubset<T, OrderItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many OrderItems and returns the data saved in the database.
     * @param {OrderItemCreateManyAndReturnArgs} args - Arguments to create many OrderItems.
     * @example
     * // Create many OrderItems
     * const orderItem = await prisma.orderItem.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many OrderItems and only return the `id`
     * const orderItemWithIdOnly = await prisma.orderItem.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OrderItemCreateManyAndReturnArgs>(args?: SelectSubset<T, OrderItemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a OrderItem.
     * @param {OrderItemDeleteArgs} args - Arguments to delete one OrderItem.
     * @example
     * // Delete one OrderItem
     * const OrderItem = await prisma.orderItem.delete({
     *   where: {
     *     // ... filter to delete one OrderItem
     *   }
     * })
     * 
     */
    delete<T extends OrderItemDeleteArgs>(args: SelectSubset<T, OrderItemDeleteArgs<ExtArgs>>): Prisma__OrderItemClient<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one OrderItem.
     * @param {OrderItemUpdateArgs} args - Arguments to update one OrderItem.
     * @example
     * // Update one OrderItem
     * const orderItem = await prisma.orderItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OrderItemUpdateArgs>(args: SelectSubset<T, OrderItemUpdateArgs<ExtArgs>>): Prisma__OrderItemClient<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more OrderItems.
     * @param {OrderItemDeleteManyArgs} args - Arguments to filter OrderItems to delete.
     * @example
     * // Delete a few OrderItems
     * const { count } = await prisma.orderItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OrderItemDeleteManyArgs>(args?: SelectSubset<T, OrderItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OrderItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many OrderItems
     * const orderItem = await prisma.orderItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OrderItemUpdateManyArgs>(args: SelectSubset<T, OrderItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OrderItems and returns the data updated in the database.
     * @param {OrderItemUpdateManyAndReturnArgs} args - Arguments to update many OrderItems.
     * @example
     * // Update many OrderItems
     * const orderItem = await prisma.orderItem.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more OrderItems and only return the `id`
     * const orderItemWithIdOnly = await prisma.orderItem.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends OrderItemUpdateManyAndReturnArgs>(args: SelectSubset<T, OrderItemUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one OrderItem.
     * @param {OrderItemUpsertArgs} args - Arguments to update or create a OrderItem.
     * @example
     * // Update or create a OrderItem
     * const orderItem = await prisma.orderItem.upsert({
     *   create: {
     *     // ... data to create a OrderItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the OrderItem we want to update
     *   }
     * })
     */
    upsert<T extends OrderItemUpsertArgs>(args: SelectSubset<T, OrderItemUpsertArgs<ExtArgs>>): Prisma__OrderItemClient<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of OrderItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderItemCountArgs} args - Arguments to filter OrderItems to count.
     * @example
     * // Count the number of OrderItems
     * const count = await prisma.orderItem.count({
     *   where: {
     *     // ... the filter for the OrderItems we want to count
     *   }
     * })
    **/
    count<T extends OrderItemCountArgs>(
      args?: Subset<T, OrderItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrderItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a OrderItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrderItemAggregateArgs>(args: Subset<T, OrderItemAggregateArgs>): Prisma.PrismaPromise<GetOrderItemAggregateType<T>>

    /**
     * Group by OrderItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrderItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrderItemGroupByArgs['orderBy'] }
        : { orderBy?: OrderItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrderItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrderItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the OrderItem model
   */
  readonly fields: OrderItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for OrderItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OrderItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    order<T extends OrderDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrderDefaultArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    product<T extends ProductDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProductDefaultArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the OrderItem model
   */
  interface OrderItemFieldRefs {
    readonly id: FieldRef<"OrderItem", 'String'>
    readonly orderId: FieldRef<"OrderItem", 'String'>
    readonly productId: FieldRef<"OrderItem", 'String'>
    readonly variantId: FieldRef<"OrderItem", 'String'>
    readonly quantity: FieldRef<"OrderItem", 'Int'>
    readonly price: FieldRef<"OrderItem", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * OrderItem findUnique
   */
  export type OrderItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    /**
     * Filter, which OrderItem to fetch.
     */
    where: OrderItemWhereUniqueInput
  }

  /**
   * OrderItem findUniqueOrThrow
   */
  export type OrderItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    /**
     * Filter, which OrderItem to fetch.
     */
    where: OrderItemWhereUniqueInput
  }

  /**
   * OrderItem findFirst
   */
  export type OrderItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    /**
     * Filter, which OrderItem to fetch.
     */
    where?: OrderItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderItems to fetch.
     */
    orderBy?: OrderItemOrderByWithRelationInput | OrderItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OrderItems.
     */
    cursor?: OrderItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OrderItems.
     */
    distinct?: OrderItemScalarFieldEnum | OrderItemScalarFieldEnum[]
  }

  /**
   * OrderItem findFirstOrThrow
   */
  export type OrderItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    /**
     * Filter, which OrderItem to fetch.
     */
    where?: OrderItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderItems to fetch.
     */
    orderBy?: OrderItemOrderByWithRelationInput | OrderItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OrderItems.
     */
    cursor?: OrderItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OrderItems.
     */
    distinct?: OrderItemScalarFieldEnum | OrderItemScalarFieldEnum[]
  }

  /**
   * OrderItem findMany
   */
  export type OrderItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    /**
     * Filter, which OrderItems to fetch.
     */
    where?: OrderItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderItems to fetch.
     */
    orderBy?: OrderItemOrderByWithRelationInput | OrderItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing OrderItems.
     */
    cursor?: OrderItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderItems.
     */
    skip?: number
    distinct?: OrderItemScalarFieldEnum | OrderItemScalarFieldEnum[]
  }

  /**
   * OrderItem create
   */
  export type OrderItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    /**
     * The data needed to create a OrderItem.
     */
    data: XOR<OrderItemCreateInput, OrderItemUncheckedCreateInput>
  }

  /**
   * OrderItem createMany
   */
  export type OrderItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many OrderItems.
     */
    data: OrderItemCreateManyInput | OrderItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * OrderItem createManyAndReturn
   */
  export type OrderItemCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * The data used to create many OrderItems.
     */
    data: OrderItemCreateManyInput | OrderItemCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * OrderItem update
   */
  export type OrderItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    /**
     * The data needed to update a OrderItem.
     */
    data: XOR<OrderItemUpdateInput, OrderItemUncheckedUpdateInput>
    /**
     * Choose, which OrderItem to update.
     */
    where: OrderItemWhereUniqueInput
  }

  /**
   * OrderItem updateMany
   */
  export type OrderItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update OrderItems.
     */
    data: XOR<OrderItemUpdateManyMutationInput, OrderItemUncheckedUpdateManyInput>
    /**
     * Filter which OrderItems to update
     */
    where?: OrderItemWhereInput
    /**
     * Limit how many OrderItems to update.
     */
    limit?: number
  }

  /**
   * OrderItem updateManyAndReturn
   */
  export type OrderItemUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * The data used to update OrderItems.
     */
    data: XOR<OrderItemUpdateManyMutationInput, OrderItemUncheckedUpdateManyInput>
    /**
     * Filter which OrderItems to update
     */
    where?: OrderItemWhereInput
    /**
     * Limit how many OrderItems to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * OrderItem upsert
   */
  export type OrderItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    /**
     * The filter to search for the OrderItem to update in case it exists.
     */
    where: OrderItemWhereUniqueInput
    /**
     * In case the OrderItem found by the `where` argument doesn't exist, create a new OrderItem with this data.
     */
    create: XOR<OrderItemCreateInput, OrderItemUncheckedCreateInput>
    /**
     * In case the OrderItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OrderItemUpdateInput, OrderItemUncheckedUpdateInput>
  }

  /**
   * OrderItem delete
   */
  export type OrderItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    /**
     * Filter which OrderItem to delete.
     */
    where: OrderItemWhereUniqueInput
  }

  /**
   * OrderItem deleteMany
   */
  export type OrderItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OrderItems to delete
     */
    where?: OrderItemWhereInput
    /**
     * Limit how many OrderItems to delete.
     */
    limit?: number
  }

  /**
   * OrderItem without action
   */
  export type OrderItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
  }


  /**
   * Model Payment
   */

  export type AggregatePayment = {
    _count: PaymentCountAggregateOutputType | null
    _min: PaymentMinAggregateOutputType | null
    _max: PaymentMaxAggregateOutputType | null
  }

  export type PaymentMinAggregateOutputType = {
    id: string | null
    orderId: string | null
    method: $Enums.PaymentMethod | null
    status: $Enums.PaymentStatus | null
    transactionId: string | null
    createdAt: Date | null
  }

  export type PaymentMaxAggregateOutputType = {
    id: string | null
    orderId: string | null
    method: $Enums.PaymentMethod | null
    status: $Enums.PaymentStatus | null
    transactionId: string | null
    createdAt: Date | null
  }

  export type PaymentCountAggregateOutputType = {
    id: number
    orderId: number
    method: number
    status: number
    transactionId: number
    createdAt: number
    _all: number
  }


  export type PaymentMinAggregateInputType = {
    id?: true
    orderId?: true
    method?: true
    status?: true
    transactionId?: true
    createdAt?: true
  }

  export type PaymentMaxAggregateInputType = {
    id?: true
    orderId?: true
    method?: true
    status?: true
    transactionId?: true
    createdAt?: true
  }

  export type PaymentCountAggregateInputType = {
    id?: true
    orderId?: true
    method?: true
    status?: true
    transactionId?: true
    createdAt?: true
    _all?: true
  }

  export type PaymentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Payment to aggregate.
     */
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     */
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Payments
    **/
    _count?: true | PaymentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PaymentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PaymentMaxAggregateInputType
  }

  export type GetPaymentAggregateType<T extends PaymentAggregateArgs> = {
        [P in keyof T & keyof AggregatePayment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePayment[P]>
      : GetScalarType<T[P], AggregatePayment[P]>
  }




  export type PaymentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaymentWhereInput
    orderBy?: PaymentOrderByWithAggregationInput | PaymentOrderByWithAggregationInput[]
    by: PaymentScalarFieldEnum[] | PaymentScalarFieldEnum
    having?: PaymentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PaymentCountAggregateInputType | true
    _min?: PaymentMinAggregateInputType
    _max?: PaymentMaxAggregateInputType
  }

  export type PaymentGroupByOutputType = {
    id: string
    orderId: string
    method: $Enums.PaymentMethod
    status: $Enums.PaymentStatus
    transactionId: string | null
    createdAt: Date
    _count: PaymentCountAggregateOutputType | null
    _min: PaymentMinAggregateOutputType | null
    _max: PaymentMaxAggregateOutputType | null
  }

  type GetPaymentGroupByPayload<T extends PaymentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PaymentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PaymentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PaymentGroupByOutputType[P]>
            : GetScalarType<T[P], PaymentGroupByOutputType[P]>
        }
      >
    >


  export type PaymentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    orderId?: boolean
    method?: boolean
    status?: boolean
    transactionId?: boolean
    createdAt?: boolean
    order?: boolean | OrderDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["payment"]>

  export type PaymentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    orderId?: boolean
    method?: boolean
    status?: boolean
    transactionId?: boolean
    createdAt?: boolean
    order?: boolean | OrderDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["payment"]>

  export type PaymentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    orderId?: boolean
    method?: boolean
    status?: boolean
    transactionId?: boolean
    createdAt?: boolean
    order?: boolean | OrderDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["payment"]>

  export type PaymentSelectScalar = {
    id?: boolean
    orderId?: boolean
    method?: boolean
    status?: boolean
    transactionId?: boolean
    createdAt?: boolean
  }

  export type PaymentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "orderId" | "method" | "status" | "transactionId" | "createdAt", ExtArgs["result"]["payment"]>
  export type PaymentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    order?: boolean | OrderDefaultArgs<ExtArgs>
  }
  export type PaymentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    order?: boolean | OrderDefaultArgs<ExtArgs>
  }
  export type PaymentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    order?: boolean | OrderDefaultArgs<ExtArgs>
  }

  export type $PaymentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Payment"
    objects: {
      order: Prisma.$OrderPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      orderId: string
      method: $Enums.PaymentMethod
      status: $Enums.PaymentStatus
      transactionId: string | null
      createdAt: Date
    }, ExtArgs["result"]["payment"]>
    composites: {}
  }

  type PaymentGetPayload<S extends boolean | null | undefined | PaymentDefaultArgs> = $Result.GetResult<Prisma.$PaymentPayload, S>

  type PaymentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PaymentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PaymentCountAggregateInputType | true
    }

  export interface PaymentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Payment'], meta: { name: 'Payment' } }
    /**
     * Find zero or one Payment that matches the filter.
     * @param {PaymentFindUniqueArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PaymentFindUniqueArgs>(args: SelectSubset<T, PaymentFindUniqueArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Payment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PaymentFindUniqueOrThrowArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PaymentFindUniqueOrThrowArgs>(args: SelectSubset<T, PaymentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Payment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentFindFirstArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PaymentFindFirstArgs>(args?: SelectSubset<T, PaymentFindFirstArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Payment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentFindFirstOrThrowArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PaymentFindFirstOrThrowArgs>(args?: SelectSubset<T, PaymentFindFirstOrThrowArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Payments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Payments
     * const payments = await prisma.payment.findMany()
     * 
     * // Get first 10 Payments
     * const payments = await prisma.payment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const paymentWithIdOnly = await prisma.payment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PaymentFindManyArgs>(args?: SelectSubset<T, PaymentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Payment.
     * @param {PaymentCreateArgs} args - Arguments to create a Payment.
     * @example
     * // Create one Payment
     * const Payment = await prisma.payment.create({
     *   data: {
     *     // ... data to create a Payment
     *   }
     * })
     * 
     */
    create<T extends PaymentCreateArgs>(args: SelectSubset<T, PaymentCreateArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Payments.
     * @param {PaymentCreateManyArgs} args - Arguments to create many Payments.
     * @example
     * // Create many Payments
     * const payment = await prisma.payment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PaymentCreateManyArgs>(args?: SelectSubset<T, PaymentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Payments and returns the data saved in the database.
     * @param {PaymentCreateManyAndReturnArgs} args - Arguments to create many Payments.
     * @example
     * // Create many Payments
     * const payment = await prisma.payment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Payments and only return the `id`
     * const paymentWithIdOnly = await prisma.payment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PaymentCreateManyAndReturnArgs>(args?: SelectSubset<T, PaymentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Payment.
     * @param {PaymentDeleteArgs} args - Arguments to delete one Payment.
     * @example
     * // Delete one Payment
     * const Payment = await prisma.payment.delete({
     *   where: {
     *     // ... filter to delete one Payment
     *   }
     * })
     * 
     */
    delete<T extends PaymentDeleteArgs>(args: SelectSubset<T, PaymentDeleteArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Payment.
     * @param {PaymentUpdateArgs} args - Arguments to update one Payment.
     * @example
     * // Update one Payment
     * const payment = await prisma.payment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PaymentUpdateArgs>(args: SelectSubset<T, PaymentUpdateArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Payments.
     * @param {PaymentDeleteManyArgs} args - Arguments to filter Payments to delete.
     * @example
     * // Delete a few Payments
     * const { count } = await prisma.payment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PaymentDeleteManyArgs>(args?: SelectSubset<T, PaymentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Payments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Payments
     * const payment = await prisma.payment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PaymentUpdateManyArgs>(args: SelectSubset<T, PaymentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Payments and returns the data updated in the database.
     * @param {PaymentUpdateManyAndReturnArgs} args - Arguments to update many Payments.
     * @example
     * // Update many Payments
     * const payment = await prisma.payment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Payments and only return the `id`
     * const paymentWithIdOnly = await prisma.payment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PaymentUpdateManyAndReturnArgs>(args: SelectSubset<T, PaymentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Payment.
     * @param {PaymentUpsertArgs} args - Arguments to update or create a Payment.
     * @example
     * // Update or create a Payment
     * const payment = await prisma.payment.upsert({
     *   create: {
     *     // ... data to create a Payment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Payment we want to update
     *   }
     * })
     */
    upsert<T extends PaymentUpsertArgs>(args: SelectSubset<T, PaymentUpsertArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Payments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentCountArgs} args - Arguments to filter Payments to count.
     * @example
     * // Count the number of Payments
     * const count = await prisma.payment.count({
     *   where: {
     *     // ... the filter for the Payments we want to count
     *   }
     * })
    **/
    count<T extends PaymentCountArgs>(
      args?: Subset<T, PaymentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PaymentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Payment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PaymentAggregateArgs>(args: Subset<T, PaymentAggregateArgs>): Prisma.PrismaPromise<GetPaymentAggregateType<T>>

    /**
     * Group by Payment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PaymentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PaymentGroupByArgs['orderBy'] }
        : { orderBy?: PaymentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PaymentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPaymentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Payment model
   */
  readonly fields: PaymentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Payment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PaymentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    order<T extends OrderDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrderDefaultArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Payment model
   */
  interface PaymentFieldRefs {
    readonly id: FieldRef<"Payment", 'String'>
    readonly orderId: FieldRef<"Payment", 'String'>
    readonly method: FieldRef<"Payment", 'PaymentMethod'>
    readonly status: FieldRef<"Payment", 'PaymentStatus'>
    readonly transactionId: FieldRef<"Payment", 'String'>
    readonly createdAt: FieldRef<"Payment", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Payment findUnique
   */
  export type PaymentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payment to fetch.
     */
    where: PaymentWhereUniqueInput
  }

  /**
   * Payment findUniqueOrThrow
   */
  export type PaymentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payment to fetch.
     */
    where: PaymentWhereUniqueInput
  }

  /**
   * Payment findFirst
   */
  export type PaymentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payment to fetch.
     */
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     */
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Payments.
     */
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Payments.
     */
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * Payment findFirstOrThrow
   */
  export type PaymentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payment to fetch.
     */
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     */
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Payments.
     */
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Payments.
     */
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * Payment findMany
   */
  export type PaymentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payments to fetch.
     */
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     */
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Payments.
     */
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     */
    skip?: number
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * Payment create
   */
  export type PaymentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * The data needed to create a Payment.
     */
    data: XOR<PaymentCreateInput, PaymentUncheckedCreateInput>
  }

  /**
   * Payment createMany
   */
  export type PaymentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Payments.
     */
    data: PaymentCreateManyInput | PaymentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Payment createManyAndReturn
   */
  export type PaymentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * The data used to create many Payments.
     */
    data: PaymentCreateManyInput | PaymentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Payment update
   */
  export type PaymentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * The data needed to update a Payment.
     */
    data: XOR<PaymentUpdateInput, PaymentUncheckedUpdateInput>
    /**
     * Choose, which Payment to update.
     */
    where: PaymentWhereUniqueInput
  }

  /**
   * Payment updateMany
   */
  export type PaymentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Payments.
     */
    data: XOR<PaymentUpdateManyMutationInput, PaymentUncheckedUpdateManyInput>
    /**
     * Filter which Payments to update
     */
    where?: PaymentWhereInput
    /**
     * Limit how many Payments to update.
     */
    limit?: number
  }

  /**
   * Payment updateManyAndReturn
   */
  export type PaymentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * The data used to update Payments.
     */
    data: XOR<PaymentUpdateManyMutationInput, PaymentUncheckedUpdateManyInput>
    /**
     * Filter which Payments to update
     */
    where?: PaymentWhereInput
    /**
     * Limit how many Payments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Payment upsert
   */
  export type PaymentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * The filter to search for the Payment to update in case it exists.
     */
    where: PaymentWhereUniqueInput
    /**
     * In case the Payment found by the `where` argument doesn't exist, create a new Payment with this data.
     */
    create: XOR<PaymentCreateInput, PaymentUncheckedCreateInput>
    /**
     * In case the Payment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PaymentUpdateInput, PaymentUncheckedUpdateInput>
  }

  /**
   * Payment delete
   */
  export type PaymentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter which Payment to delete.
     */
    where: PaymentWhereUniqueInput
  }

  /**
   * Payment deleteMany
   */
  export type PaymentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Payments to delete
     */
    where?: PaymentWhereInput
    /**
     * Limit how many Payments to delete.
     */
    limit?: number
  }

  /**
   * Payment without action
   */
  export type PaymentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
  }


  /**
   * Model LogisticsPartner
   */

  export type AggregateLogisticsPartner = {
    _count: LogisticsPartnerCountAggregateOutputType | null
    _avg: LogisticsPartnerAvgAggregateOutputType | null
    _sum: LogisticsPartnerSumAggregateOutputType | null
    _min: LogisticsPartnerMinAggregateOutputType | null
    _max: LogisticsPartnerMaxAggregateOutputType | null
  }

  export type LogisticsPartnerAvgAggregateOutputType = {
    baseRate: number | null
    rating: number | null
  }

  export type LogisticsPartnerSumAggregateOutputType = {
    baseRate: number | null
    rating: number | null
  }

  export type LogisticsPartnerMinAggregateOutputType = {
    id: string | null
    userId: string | null
    name: string | null
    apiEndpoint: string | null
    baseRate: number | null
    rating: number | null
    verified: boolean | null
  }

  export type LogisticsPartnerMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    name: string | null
    apiEndpoint: string | null
    baseRate: number | null
    rating: number | null
    verified: boolean | null
  }

  export type LogisticsPartnerCountAggregateOutputType = {
    id: number
    userId: number
    name: number
    apiEndpoint: number
    baseRate: number
    rating: number
    verified: number
    _all: number
  }


  export type LogisticsPartnerAvgAggregateInputType = {
    baseRate?: true
    rating?: true
  }

  export type LogisticsPartnerSumAggregateInputType = {
    baseRate?: true
    rating?: true
  }

  export type LogisticsPartnerMinAggregateInputType = {
    id?: true
    userId?: true
    name?: true
    apiEndpoint?: true
    baseRate?: true
    rating?: true
    verified?: true
  }

  export type LogisticsPartnerMaxAggregateInputType = {
    id?: true
    userId?: true
    name?: true
    apiEndpoint?: true
    baseRate?: true
    rating?: true
    verified?: true
  }

  export type LogisticsPartnerCountAggregateInputType = {
    id?: true
    userId?: true
    name?: true
    apiEndpoint?: true
    baseRate?: true
    rating?: true
    verified?: true
    _all?: true
  }

  export type LogisticsPartnerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LogisticsPartner to aggregate.
     */
    where?: LogisticsPartnerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LogisticsPartners to fetch.
     */
    orderBy?: LogisticsPartnerOrderByWithRelationInput | LogisticsPartnerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LogisticsPartnerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LogisticsPartners from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LogisticsPartners.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LogisticsPartners
    **/
    _count?: true | LogisticsPartnerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LogisticsPartnerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LogisticsPartnerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LogisticsPartnerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LogisticsPartnerMaxAggregateInputType
  }

  export type GetLogisticsPartnerAggregateType<T extends LogisticsPartnerAggregateArgs> = {
        [P in keyof T & keyof AggregateLogisticsPartner]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLogisticsPartner[P]>
      : GetScalarType<T[P], AggregateLogisticsPartner[P]>
  }




  export type LogisticsPartnerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LogisticsPartnerWhereInput
    orderBy?: LogisticsPartnerOrderByWithAggregationInput | LogisticsPartnerOrderByWithAggregationInput[]
    by: LogisticsPartnerScalarFieldEnum[] | LogisticsPartnerScalarFieldEnum
    having?: LogisticsPartnerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LogisticsPartnerCountAggregateInputType | true
    _avg?: LogisticsPartnerAvgAggregateInputType
    _sum?: LogisticsPartnerSumAggregateInputType
    _min?: LogisticsPartnerMinAggregateInputType
    _max?: LogisticsPartnerMaxAggregateInputType
  }

  export type LogisticsPartnerGroupByOutputType = {
    id: string
    userId: string
    name: string
    apiEndpoint: string | null
    baseRate: number
    rating: number | null
    verified: boolean
    _count: LogisticsPartnerCountAggregateOutputType | null
    _avg: LogisticsPartnerAvgAggregateOutputType | null
    _sum: LogisticsPartnerSumAggregateOutputType | null
    _min: LogisticsPartnerMinAggregateOutputType | null
    _max: LogisticsPartnerMaxAggregateOutputType | null
  }

  type GetLogisticsPartnerGroupByPayload<T extends LogisticsPartnerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LogisticsPartnerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LogisticsPartnerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LogisticsPartnerGroupByOutputType[P]>
            : GetScalarType<T[P], LogisticsPartnerGroupByOutputType[P]>
        }
      >
    >


  export type LogisticsPartnerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    name?: boolean
    apiEndpoint?: boolean
    baseRate?: boolean
    rating?: boolean
    verified?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    shippers?: boolean | LogisticsPartner$shippersArgs<ExtArgs>
    orders?: boolean | LogisticsPartner$ordersArgs<ExtArgs>
    _count?: boolean | LogisticsPartnerCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["logisticsPartner"]>

  export type LogisticsPartnerSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    name?: boolean
    apiEndpoint?: boolean
    baseRate?: boolean
    rating?: boolean
    verified?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["logisticsPartner"]>

  export type LogisticsPartnerSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    name?: boolean
    apiEndpoint?: boolean
    baseRate?: boolean
    rating?: boolean
    verified?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["logisticsPartner"]>

  export type LogisticsPartnerSelectScalar = {
    id?: boolean
    userId?: boolean
    name?: boolean
    apiEndpoint?: boolean
    baseRate?: boolean
    rating?: boolean
    verified?: boolean
  }

  export type LogisticsPartnerOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "name" | "apiEndpoint" | "baseRate" | "rating" | "verified", ExtArgs["result"]["logisticsPartner"]>
  export type LogisticsPartnerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    shippers?: boolean | LogisticsPartner$shippersArgs<ExtArgs>
    orders?: boolean | LogisticsPartner$ordersArgs<ExtArgs>
    _count?: boolean | LogisticsPartnerCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type LogisticsPartnerIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type LogisticsPartnerIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $LogisticsPartnerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "LogisticsPartner"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      shippers: Prisma.$ShipperPayload<ExtArgs>[]
      orders: Prisma.$LogisticsOrderPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      name: string
      apiEndpoint: string | null
      baseRate: number
      rating: number | null
      verified: boolean
    }, ExtArgs["result"]["logisticsPartner"]>
    composites: {}
  }

  type LogisticsPartnerGetPayload<S extends boolean | null | undefined | LogisticsPartnerDefaultArgs> = $Result.GetResult<Prisma.$LogisticsPartnerPayload, S>

  type LogisticsPartnerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<LogisticsPartnerFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LogisticsPartnerCountAggregateInputType | true
    }

  export interface LogisticsPartnerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LogisticsPartner'], meta: { name: 'LogisticsPartner' } }
    /**
     * Find zero or one LogisticsPartner that matches the filter.
     * @param {LogisticsPartnerFindUniqueArgs} args - Arguments to find a LogisticsPartner
     * @example
     * // Get one LogisticsPartner
     * const logisticsPartner = await prisma.logisticsPartner.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LogisticsPartnerFindUniqueArgs>(args: SelectSubset<T, LogisticsPartnerFindUniqueArgs<ExtArgs>>): Prisma__LogisticsPartnerClient<$Result.GetResult<Prisma.$LogisticsPartnerPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one LogisticsPartner that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LogisticsPartnerFindUniqueOrThrowArgs} args - Arguments to find a LogisticsPartner
     * @example
     * // Get one LogisticsPartner
     * const logisticsPartner = await prisma.logisticsPartner.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LogisticsPartnerFindUniqueOrThrowArgs>(args: SelectSubset<T, LogisticsPartnerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LogisticsPartnerClient<$Result.GetResult<Prisma.$LogisticsPartnerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LogisticsPartner that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogisticsPartnerFindFirstArgs} args - Arguments to find a LogisticsPartner
     * @example
     * // Get one LogisticsPartner
     * const logisticsPartner = await prisma.logisticsPartner.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LogisticsPartnerFindFirstArgs>(args?: SelectSubset<T, LogisticsPartnerFindFirstArgs<ExtArgs>>): Prisma__LogisticsPartnerClient<$Result.GetResult<Prisma.$LogisticsPartnerPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LogisticsPartner that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogisticsPartnerFindFirstOrThrowArgs} args - Arguments to find a LogisticsPartner
     * @example
     * // Get one LogisticsPartner
     * const logisticsPartner = await prisma.logisticsPartner.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LogisticsPartnerFindFirstOrThrowArgs>(args?: SelectSubset<T, LogisticsPartnerFindFirstOrThrowArgs<ExtArgs>>): Prisma__LogisticsPartnerClient<$Result.GetResult<Prisma.$LogisticsPartnerPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more LogisticsPartners that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogisticsPartnerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LogisticsPartners
     * const logisticsPartners = await prisma.logisticsPartner.findMany()
     * 
     * // Get first 10 LogisticsPartners
     * const logisticsPartners = await prisma.logisticsPartner.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const logisticsPartnerWithIdOnly = await prisma.logisticsPartner.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LogisticsPartnerFindManyArgs>(args?: SelectSubset<T, LogisticsPartnerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LogisticsPartnerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a LogisticsPartner.
     * @param {LogisticsPartnerCreateArgs} args - Arguments to create a LogisticsPartner.
     * @example
     * // Create one LogisticsPartner
     * const LogisticsPartner = await prisma.logisticsPartner.create({
     *   data: {
     *     // ... data to create a LogisticsPartner
     *   }
     * })
     * 
     */
    create<T extends LogisticsPartnerCreateArgs>(args: SelectSubset<T, LogisticsPartnerCreateArgs<ExtArgs>>): Prisma__LogisticsPartnerClient<$Result.GetResult<Prisma.$LogisticsPartnerPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many LogisticsPartners.
     * @param {LogisticsPartnerCreateManyArgs} args - Arguments to create many LogisticsPartners.
     * @example
     * // Create many LogisticsPartners
     * const logisticsPartner = await prisma.logisticsPartner.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LogisticsPartnerCreateManyArgs>(args?: SelectSubset<T, LogisticsPartnerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many LogisticsPartners and returns the data saved in the database.
     * @param {LogisticsPartnerCreateManyAndReturnArgs} args - Arguments to create many LogisticsPartners.
     * @example
     * // Create many LogisticsPartners
     * const logisticsPartner = await prisma.logisticsPartner.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many LogisticsPartners and only return the `id`
     * const logisticsPartnerWithIdOnly = await prisma.logisticsPartner.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LogisticsPartnerCreateManyAndReturnArgs>(args?: SelectSubset<T, LogisticsPartnerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LogisticsPartnerPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a LogisticsPartner.
     * @param {LogisticsPartnerDeleteArgs} args - Arguments to delete one LogisticsPartner.
     * @example
     * // Delete one LogisticsPartner
     * const LogisticsPartner = await prisma.logisticsPartner.delete({
     *   where: {
     *     // ... filter to delete one LogisticsPartner
     *   }
     * })
     * 
     */
    delete<T extends LogisticsPartnerDeleteArgs>(args: SelectSubset<T, LogisticsPartnerDeleteArgs<ExtArgs>>): Prisma__LogisticsPartnerClient<$Result.GetResult<Prisma.$LogisticsPartnerPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one LogisticsPartner.
     * @param {LogisticsPartnerUpdateArgs} args - Arguments to update one LogisticsPartner.
     * @example
     * // Update one LogisticsPartner
     * const logisticsPartner = await prisma.logisticsPartner.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LogisticsPartnerUpdateArgs>(args: SelectSubset<T, LogisticsPartnerUpdateArgs<ExtArgs>>): Prisma__LogisticsPartnerClient<$Result.GetResult<Prisma.$LogisticsPartnerPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more LogisticsPartners.
     * @param {LogisticsPartnerDeleteManyArgs} args - Arguments to filter LogisticsPartners to delete.
     * @example
     * // Delete a few LogisticsPartners
     * const { count } = await prisma.logisticsPartner.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LogisticsPartnerDeleteManyArgs>(args?: SelectSubset<T, LogisticsPartnerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LogisticsPartners.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogisticsPartnerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LogisticsPartners
     * const logisticsPartner = await prisma.logisticsPartner.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LogisticsPartnerUpdateManyArgs>(args: SelectSubset<T, LogisticsPartnerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LogisticsPartners and returns the data updated in the database.
     * @param {LogisticsPartnerUpdateManyAndReturnArgs} args - Arguments to update many LogisticsPartners.
     * @example
     * // Update many LogisticsPartners
     * const logisticsPartner = await prisma.logisticsPartner.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more LogisticsPartners and only return the `id`
     * const logisticsPartnerWithIdOnly = await prisma.logisticsPartner.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends LogisticsPartnerUpdateManyAndReturnArgs>(args: SelectSubset<T, LogisticsPartnerUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LogisticsPartnerPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one LogisticsPartner.
     * @param {LogisticsPartnerUpsertArgs} args - Arguments to update or create a LogisticsPartner.
     * @example
     * // Update or create a LogisticsPartner
     * const logisticsPartner = await prisma.logisticsPartner.upsert({
     *   create: {
     *     // ... data to create a LogisticsPartner
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LogisticsPartner we want to update
     *   }
     * })
     */
    upsert<T extends LogisticsPartnerUpsertArgs>(args: SelectSubset<T, LogisticsPartnerUpsertArgs<ExtArgs>>): Prisma__LogisticsPartnerClient<$Result.GetResult<Prisma.$LogisticsPartnerPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of LogisticsPartners.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogisticsPartnerCountArgs} args - Arguments to filter LogisticsPartners to count.
     * @example
     * // Count the number of LogisticsPartners
     * const count = await prisma.logisticsPartner.count({
     *   where: {
     *     // ... the filter for the LogisticsPartners we want to count
     *   }
     * })
    **/
    count<T extends LogisticsPartnerCountArgs>(
      args?: Subset<T, LogisticsPartnerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LogisticsPartnerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LogisticsPartner.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogisticsPartnerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LogisticsPartnerAggregateArgs>(args: Subset<T, LogisticsPartnerAggregateArgs>): Prisma.PrismaPromise<GetLogisticsPartnerAggregateType<T>>

    /**
     * Group by LogisticsPartner.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogisticsPartnerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LogisticsPartnerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LogisticsPartnerGroupByArgs['orderBy'] }
        : { orderBy?: LogisticsPartnerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LogisticsPartnerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLogisticsPartnerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the LogisticsPartner model
   */
  readonly fields: LogisticsPartnerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for LogisticsPartner.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LogisticsPartnerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    shippers<T extends LogisticsPartner$shippersArgs<ExtArgs> = {}>(args?: Subset<T, LogisticsPartner$shippersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShipperPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    orders<T extends LogisticsPartner$ordersArgs<ExtArgs> = {}>(args?: Subset<T, LogisticsPartner$ordersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LogisticsOrderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the LogisticsPartner model
   */
  interface LogisticsPartnerFieldRefs {
    readonly id: FieldRef<"LogisticsPartner", 'String'>
    readonly userId: FieldRef<"LogisticsPartner", 'String'>
    readonly name: FieldRef<"LogisticsPartner", 'String'>
    readonly apiEndpoint: FieldRef<"LogisticsPartner", 'String'>
    readonly baseRate: FieldRef<"LogisticsPartner", 'Float'>
    readonly rating: FieldRef<"LogisticsPartner", 'Float'>
    readonly verified: FieldRef<"LogisticsPartner", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * LogisticsPartner findUnique
   */
  export type LogisticsPartnerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LogisticsPartner
     */
    select?: LogisticsPartnerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LogisticsPartner
     */
    omit?: LogisticsPartnerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogisticsPartnerInclude<ExtArgs> | null
    /**
     * Filter, which LogisticsPartner to fetch.
     */
    where: LogisticsPartnerWhereUniqueInput
  }

  /**
   * LogisticsPartner findUniqueOrThrow
   */
  export type LogisticsPartnerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LogisticsPartner
     */
    select?: LogisticsPartnerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LogisticsPartner
     */
    omit?: LogisticsPartnerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogisticsPartnerInclude<ExtArgs> | null
    /**
     * Filter, which LogisticsPartner to fetch.
     */
    where: LogisticsPartnerWhereUniqueInput
  }

  /**
   * LogisticsPartner findFirst
   */
  export type LogisticsPartnerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LogisticsPartner
     */
    select?: LogisticsPartnerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LogisticsPartner
     */
    omit?: LogisticsPartnerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogisticsPartnerInclude<ExtArgs> | null
    /**
     * Filter, which LogisticsPartner to fetch.
     */
    where?: LogisticsPartnerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LogisticsPartners to fetch.
     */
    orderBy?: LogisticsPartnerOrderByWithRelationInput | LogisticsPartnerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LogisticsPartners.
     */
    cursor?: LogisticsPartnerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LogisticsPartners from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LogisticsPartners.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LogisticsPartners.
     */
    distinct?: LogisticsPartnerScalarFieldEnum | LogisticsPartnerScalarFieldEnum[]
  }

  /**
   * LogisticsPartner findFirstOrThrow
   */
  export type LogisticsPartnerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LogisticsPartner
     */
    select?: LogisticsPartnerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LogisticsPartner
     */
    omit?: LogisticsPartnerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogisticsPartnerInclude<ExtArgs> | null
    /**
     * Filter, which LogisticsPartner to fetch.
     */
    where?: LogisticsPartnerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LogisticsPartners to fetch.
     */
    orderBy?: LogisticsPartnerOrderByWithRelationInput | LogisticsPartnerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LogisticsPartners.
     */
    cursor?: LogisticsPartnerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LogisticsPartners from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LogisticsPartners.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LogisticsPartners.
     */
    distinct?: LogisticsPartnerScalarFieldEnum | LogisticsPartnerScalarFieldEnum[]
  }

  /**
   * LogisticsPartner findMany
   */
  export type LogisticsPartnerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LogisticsPartner
     */
    select?: LogisticsPartnerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LogisticsPartner
     */
    omit?: LogisticsPartnerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogisticsPartnerInclude<ExtArgs> | null
    /**
     * Filter, which LogisticsPartners to fetch.
     */
    where?: LogisticsPartnerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LogisticsPartners to fetch.
     */
    orderBy?: LogisticsPartnerOrderByWithRelationInput | LogisticsPartnerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LogisticsPartners.
     */
    cursor?: LogisticsPartnerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LogisticsPartners from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LogisticsPartners.
     */
    skip?: number
    distinct?: LogisticsPartnerScalarFieldEnum | LogisticsPartnerScalarFieldEnum[]
  }

  /**
   * LogisticsPartner create
   */
  export type LogisticsPartnerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LogisticsPartner
     */
    select?: LogisticsPartnerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LogisticsPartner
     */
    omit?: LogisticsPartnerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogisticsPartnerInclude<ExtArgs> | null
    /**
     * The data needed to create a LogisticsPartner.
     */
    data: XOR<LogisticsPartnerCreateInput, LogisticsPartnerUncheckedCreateInput>
  }

  /**
   * LogisticsPartner createMany
   */
  export type LogisticsPartnerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many LogisticsPartners.
     */
    data: LogisticsPartnerCreateManyInput | LogisticsPartnerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * LogisticsPartner createManyAndReturn
   */
  export type LogisticsPartnerCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LogisticsPartner
     */
    select?: LogisticsPartnerSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LogisticsPartner
     */
    omit?: LogisticsPartnerOmit<ExtArgs> | null
    /**
     * The data used to create many LogisticsPartners.
     */
    data: LogisticsPartnerCreateManyInput | LogisticsPartnerCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogisticsPartnerIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * LogisticsPartner update
   */
  export type LogisticsPartnerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LogisticsPartner
     */
    select?: LogisticsPartnerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LogisticsPartner
     */
    omit?: LogisticsPartnerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogisticsPartnerInclude<ExtArgs> | null
    /**
     * The data needed to update a LogisticsPartner.
     */
    data: XOR<LogisticsPartnerUpdateInput, LogisticsPartnerUncheckedUpdateInput>
    /**
     * Choose, which LogisticsPartner to update.
     */
    where: LogisticsPartnerWhereUniqueInput
  }

  /**
   * LogisticsPartner updateMany
   */
  export type LogisticsPartnerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update LogisticsPartners.
     */
    data: XOR<LogisticsPartnerUpdateManyMutationInput, LogisticsPartnerUncheckedUpdateManyInput>
    /**
     * Filter which LogisticsPartners to update
     */
    where?: LogisticsPartnerWhereInput
    /**
     * Limit how many LogisticsPartners to update.
     */
    limit?: number
  }

  /**
   * LogisticsPartner updateManyAndReturn
   */
  export type LogisticsPartnerUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LogisticsPartner
     */
    select?: LogisticsPartnerSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LogisticsPartner
     */
    omit?: LogisticsPartnerOmit<ExtArgs> | null
    /**
     * The data used to update LogisticsPartners.
     */
    data: XOR<LogisticsPartnerUpdateManyMutationInput, LogisticsPartnerUncheckedUpdateManyInput>
    /**
     * Filter which LogisticsPartners to update
     */
    where?: LogisticsPartnerWhereInput
    /**
     * Limit how many LogisticsPartners to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogisticsPartnerIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * LogisticsPartner upsert
   */
  export type LogisticsPartnerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LogisticsPartner
     */
    select?: LogisticsPartnerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LogisticsPartner
     */
    omit?: LogisticsPartnerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogisticsPartnerInclude<ExtArgs> | null
    /**
     * The filter to search for the LogisticsPartner to update in case it exists.
     */
    where: LogisticsPartnerWhereUniqueInput
    /**
     * In case the LogisticsPartner found by the `where` argument doesn't exist, create a new LogisticsPartner with this data.
     */
    create: XOR<LogisticsPartnerCreateInput, LogisticsPartnerUncheckedCreateInput>
    /**
     * In case the LogisticsPartner was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LogisticsPartnerUpdateInput, LogisticsPartnerUncheckedUpdateInput>
  }

  /**
   * LogisticsPartner delete
   */
  export type LogisticsPartnerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LogisticsPartner
     */
    select?: LogisticsPartnerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LogisticsPartner
     */
    omit?: LogisticsPartnerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogisticsPartnerInclude<ExtArgs> | null
    /**
     * Filter which LogisticsPartner to delete.
     */
    where: LogisticsPartnerWhereUniqueInput
  }

  /**
   * LogisticsPartner deleteMany
   */
  export type LogisticsPartnerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LogisticsPartners to delete
     */
    where?: LogisticsPartnerWhereInput
    /**
     * Limit how many LogisticsPartners to delete.
     */
    limit?: number
  }

  /**
   * LogisticsPartner.shippers
   */
  export type LogisticsPartner$shippersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shipper
     */
    select?: ShipperSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Shipper
     */
    omit?: ShipperOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShipperInclude<ExtArgs> | null
    where?: ShipperWhereInput
    orderBy?: ShipperOrderByWithRelationInput | ShipperOrderByWithRelationInput[]
    cursor?: ShipperWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ShipperScalarFieldEnum | ShipperScalarFieldEnum[]
  }

  /**
   * LogisticsPartner.orders
   */
  export type LogisticsPartner$ordersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LogisticsOrder
     */
    select?: LogisticsOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LogisticsOrder
     */
    omit?: LogisticsOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogisticsOrderInclude<ExtArgs> | null
    where?: LogisticsOrderWhereInput
    orderBy?: LogisticsOrderOrderByWithRelationInput | LogisticsOrderOrderByWithRelationInput[]
    cursor?: LogisticsOrderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LogisticsOrderScalarFieldEnum | LogisticsOrderScalarFieldEnum[]
  }

  /**
   * LogisticsPartner without action
   */
  export type LogisticsPartnerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LogisticsPartner
     */
    select?: LogisticsPartnerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LogisticsPartner
     */
    omit?: LogisticsPartnerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogisticsPartnerInclude<ExtArgs> | null
  }


  /**
   * Model Shipper
   */

  export type AggregateShipper = {
    _count: ShipperCountAggregateOutputType | null
    _avg: ShipperAvgAggregateOutputType | null
    _sum: ShipperSumAggregateOutputType | null
    _min: ShipperMinAggregateOutputType | null
    _max: ShipperMaxAggregateOutputType | null
  }

  export type ShipperAvgAggregateOutputType = {
    rating: number | null
    totalDeliveries: number | null
    totalRatings: number | null
    deliveryRange: number | null
  }

  export type ShipperSumAggregateOutputType = {
    rating: number | null
    totalDeliveries: number | null
    totalRatings: number | null
    deliveryRange: number | null
  }

  export type ShipperMinAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    name: string | null
    phone: string | null
    avatar: string | null
    logisticsPartnerId: string | null
    active: boolean | null
    status: $Enums.ShipperStatus | null
    rating: number | null
    totalDeliveries: number | null
    totalRatings: number | null
    deliveryRange: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ShipperMaxAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    name: string | null
    phone: string | null
    avatar: string | null
    logisticsPartnerId: string | null
    active: boolean | null
    status: $Enums.ShipperStatus | null
    rating: number | null
    totalDeliveries: number | null
    totalRatings: number | null
    deliveryRange: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ShipperCountAggregateOutputType = {
    id: number
    email: number
    password: number
    name: number
    phone: number
    avatar: number
    logisticsPartnerId: number
    active: number
    currentLocation: number
    status: number
    rating: number
    totalDeliveries: number
    totalRatings: number
    deliveryRange: number
    deliveryHistory: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ShipperAvgAggregateInputType = {
    rating?: true
    totalDeliveries?: true
    totalRatings?: true
    deliveryRange?: true
  }

  export type ShipperSumAggregateInputType = {
    rating?: true
    totalDeliveries?: true
    totalRatings?: true
    deliveryRange?: true
  }

  export type ShipperMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    phone?: true
    avatar?: true
    logisticsPartnerId?: true
    active?: true
    status?: true
    rating?: true
    totalDeliveries?: true
    totalRatings?: true
    deliveryRange?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ShipperMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    phone?: true
    avatar?: true
    logisticsPartnerId?: true
    active?: true
    status?: true
    rating?: true
    totalDeliveries?: true
    totalRatings?: true
    deliveryRange?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ShipperCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    phone?: true
    avatar?: true
    logisticsPartnerId?: true
    active?: true
    currentLocation?: true
    status?: true
    rating?: true
    totalDeliveries?: true
    totalRatings?: true
    deliveryRange?: true
    deliveryHistory?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ShipperAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Shipper to aggregate.
     */
    where?: ShipperWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Shippers to fetch.
     */
    orderBy?: ShipperOrderByWithRelationInput | ShipperOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ShipperWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Shippers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Shippers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Shippers
    **/
    _count?: true | ShipperCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ShipperAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ShipperSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ShipperMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ShipperMaxAggregateInputType
  }

  export type GetShipperAggregateType<T extends ShipperAggregateArgs> = {
        [P in keyof T & keyof AggregateShipper]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateShipper[P]>
      : GetScalarType<T[P], AggregateShipper[P]>
  }




  export type ShipperGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ShipperWhereInput
    orderBy?: ShipperOrderByWithAggregationInput | ShipperOrderByWithAggregationInput[]
    by: ShipperScalarFieldEnum[] | ShipperScalarFieldEnum
    having?: ShipperScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ShipperCountAggregateInputType | true
    _avg?: ShipperAvgAggregateInputType
    _sum?: ShipperSumAggregateInputType
    _min?: ShipperMinAggregateInputType
    _max?: ShipperMaxAggregateInputType
  }

  export type ShipperGroupByOutputType = {
    id: string
    email: string
    password: string
    name: string
    phone: string | null
    avatar: string | null
    logisticsPartnerId: string
    active: boolean
    currentLocation: JsonValue | null
    status: $Enums.ShipperStatus
    rating: number | null
    totalDeliveries: number
    totalRatings: number
    deliveryRange: number
    deliveryHistory: JsonValue[]
    createdAt: Date
    updatedAt: Date
    _count: ShipperCountAggregateOutputType | null
    _avg: ShipperAvgAggregateOutputType | null
    _sum: ShipperSumAggregateOutputType | null
    _min: ShipperMinAggregateOutputType | null
    _max: ShipperMaxAggregateOutputType | null
  }

  type GetShipperGroupByPayload<T extends ShipperGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ShipperGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ShipperGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ShipperGroupByOutputType[P]>
            : GetScalarType<T[P], ShipperGroupByOutputType[P]>
        }
      >
    >


  export type ShipperSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    phone?: boolean
    avatar?: boolean
    logisticsPartnerId?: boolean
    active?: boolean
    currentLocation?: boolean
    status?: boolean
    rating?: boolean
    totalDeliveries?: boolean
    totalRatings?: boolean
    deliveryRange?: boolean
    deliveryHistory?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    logisticsPartner?: boolean | LogisticsPartnerDefaultArgs<ExtArgs>
    assignedOrders?: boolean | Shipper$assignedOrdersArgs<ExtArgs>
    _count?: boolean | ShipperCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["shipper"]>

  export type ShipperSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    phone?: boolean
    avatar?: boolean
    logisticsPartnerId?: boolean
    active?: boolean
    currentLocation?: boolean
    status?: boolean
    rating?: boolean
    totalDeliveries?: boolean
    totalRatings?: boolean
    deliveryRange?: boolean
    deliveryHistory?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    logisticsPartner?: boolean | LogisticsPartnerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["shipper"]>

  export type ShipperSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    phone?: boolean
    avatar?: boolean
    logisticsPartnerId?: boolean
    active?: boolean
    currentLocation?: boolean
    status?: boolean
    rating?: boolean
    totalDeliveries?: boolean
    totalRatings?: boolean
    deliveryRange?: boolean
    deliveryHistory?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    logisticsPartner?: boolean | LogisticsPartnerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["shipper"]>

  export type ShipperSelectScalar = {
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    phone?: boolean
    avatar?: boolean
    logisticsPartnerId?: boolean
    active?: boolean
    currentLocation?: boolean
    status?: boolean
    rating?: boolean
    totalDeliveries?: boolean
    totalRatings?: boolean
    deliveryRange?: boolean
    deliveryHistory?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ShipperOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "password" | "name" | "phone" | "avatar" | "logisticsPartnerId" | "active" | "currentLocation" | "status" | "rating" | "totalDeliveries" | "totalRatings" | "deliveryRange" | "deliveryHistory" | "createdAt" | "updatedAt", ExtArgs["result"]["shipper"]>
  export type ShipperInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    logisticsPartner?: boolean | LogisticsPartnerDefaultArgs<ExtArgs>
    assignedOrders?: boolean | Shipper$assignedOrdersArgs<ExtArgs>
    _count?: boolean | ShipperCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ShipperIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    logisticsPartner?: boolean | LogisticsPartnerDefaultArgs<ExtArgs>
  }
  export type ShipperIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    logisticsPartner?: boolean | LogisticsPartnerDefaultArgs<ExtArgs>
  }

  export type $ShipperPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Shipper"
    objects: {
      logisticsPartner: Prisma.$LogisticsPartnerPayload<ExtArgs>
      assignedOrders: Prisma.$LogisticsOrderPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      password: string
      name: string
      phone: string | null
      avatar: string | null
      logisticsPartnerId: string
      active: boolean
      currentLocation: Prisma.JsonValue | null
      status: $Enums.ShipperStatus
      rating: number | null
      totalDeliveries: number
      totalRatings: number
      deliveryRange: number
      deliveryHistory: Prisma.JsonValue[]
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["shipper"]>
    composites: {}
  }

  type ShipperGetPayload<S extends boolean | null | undefined | ShipperDefaultArgs> = $Result.GetResult<Prisma.$ShipperPayload, S>

  type ShipperCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ShipperFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ShipperCountAggregateInputType | true
    }

  export interface ShipperDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Shipper'], meta: { name: 'Shipper' } }
    /**
     * Find zero or one Shipper that matches the filter.
     * @param {ShipperFindUniqueArgs} args - Arguments to find a Shipper
     * @example
     * // Get one Shipper
     * const shipper = await prisma.shipper.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ShipperFindUniqueArgs>(args: SelectSubset<T, ShipperFindUniqueArgs<ExtArgs>>): Prisma__ShipperClient<$Result.GetResult<Prisma.$ShipperPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Shipper that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ShipperFindUniqueOrThrowArgs} args - Arguments to find a Shipper
     * @example
     * // Get one Shipper
     * const shipper = await prisma.shipper.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ShipperFindUniqueOrThrowArgs>(args: SelectSubset<T, ShipperFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ShipperClient<$Result.GetResult<Prisma.$ShipperPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Shipper that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShipperFindFirstArgs} args - Arguments to find a Shipper
     * @example
     * // Get one Shipper
     * const shipper = await prisma.shipper.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ShipperFindFirstArgs>(args?: SelectSubset<T, ShipperFindFirstArgs<ExtArgs>>): Prisma__ShipperClient<$Result.GetResult<Prisma.$ShipperPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Shipper that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShipperFindFirstOrThrowArgs} args - Arguments to find a Shipper
     * @example
     * // Get one Shipper
     * const shipper = await prisma.shipper.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ShipperFindFirstOrThrowArgs>(args?: SelectSubset<T, ShipperFindFirstOrThrowArgs<ExtArgs>>): Prisma__ShipperClient<$Result.GetResult<Prisma.$ShipperPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Shippers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShipperFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Shippers
     * const shippers = await prisma.shipper.findMany()
     * 
     * // Get first 10 Shippers
     * const shippers = await prisma.shipper.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const shipperWithIdOnly = await prisma.shipper.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ShipperFindManyArgs>(args?: SelectSubset<T, ShipperFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShipperPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Shipper.
     * @param {ShipperCreateArgs} args - Arguments to create a Shipper.
     * @example
     * // Create one Shipper
     * const Shipper = await prisma.shipper.create({
     *   data: {
     *     // ... data to create a Shipper
     *   }
     * })
     * 
     */
    create<T extends ShipperCreateArgs>(args: SelectSubset<T, ShipperCreateArgs<ExtArgs>>): Prisma__ShipperClient<$Result.GetResult<Prisma.$ShipperPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Shippers.
     * @param {ShipperCreateManyArgs} args - Arguments to create many Shippers.
     * @example
     * // Create many Shippers
     * const shipper = await prisma.shipper.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ShipperCreateManyArgs>(args?: SelectSubset<T, ShipperCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Shippers and returns the data saved in the database.
     * @param {ShipperCreateManyAndReturnArgs} args - Arguments to create many Shippers.
     * @example
     * // Create many Shippers
     * const shipper = await prisma.shipper.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Shippers and only return the `id`
     * const shipperWithIdOnly = await prisma.shipper.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ShipperCreateManyAndReturnArgs>(args?: SelectSubset<T, ShipperCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShipperPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Shipper.
     * @param {ShipperDeleteArgs} args - Arguments to delete one Shipper.
     * @example
     * // Delete one Shipper
     * const Shipper = await prisma.shipper.delete({
     *   where: {
     *     // ... filter to delete one Shipper
     *   }
     * })
     * 
     */
    delete<T extends ShipperDeleteArgs>(args: SelectSubset<T, ShipperDeleteArgs<ExtArgs>>): Prisma__ShipperClient<$Result.GetResult<Prisma.$ShipperPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Shipper.
     * @param {ShipperUpdateArgs} args - Arguments to update one Shipper.
     * @example
     * // Update one Shipper
     * const shipper = await prisma.shipper.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ShipperUpdateArgs>(args: SelectSubset<T, ShipperUpdateArgs<ExtArgs>>): Prisma__ShipperClient<$Result.GetResult<Prisma.$ShipperPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Shippers.
     * @param {ShipperDeleteManyArgs} args - Arguments to filter Shippers to delete.
     * @example
     * // Delete a few Shippers
     * const { count } = await prisma.shipper.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ShipperDeleteManyArgs>(args?: SelectSubset<T, ShipperDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Shippers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShipperUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Shippers
     * const shipper = await prisma.shipper.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ShipperUpdateManyArgs>(args: SelectSubset<T, ShipperUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Shippers and returns the data updated in the database.
     * @param {ShipperUpdateManyAndReturnArgs} args - Arguments to update many Shippers.
     * @example
     * // Update many Shippers
     * const shipper = await prisma.shipper.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Shippers and only return the `id`
     * const shipperWithIdOnly = await prisma.shipper.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ShipperUpdateManyAndReturnArgs>(args: SelectSubset<T, ShipperUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShipperPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Shipper.
     * @param {ShipperUpsertArgs} args - Arguments to update or create a Shipper.
     * @example
     * // Update or create a Shipper
     * const shipper = await prisma.shipper.upsert({
     *   create: {
     *     // ... data to create a Shipper
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Shipper we want to update
     *   }
     * })
     */
    upsert<T extends ShipperUpsertArgs>(args: SelectSubset<T, ShipperUpsertArgs<ExtArgs>>): Prisma__ShipperClient<$Result.GetResult<Prisma.$ShipperPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Shippers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShipperCountArgs} args - Arguments to filter Shippers to count.
     * @example
     * // Count the number of Shippers
     * const count = await prisma.shipper.count({
     *   where: {
     *     // ... the filter for the Shippers we want to count
     *   }
     * })
    **/
    count<T extends ShipperCountArgs>(
      args?: Subset<T, ShipperCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ShipperCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Shipper.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShipperAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ShipperAggregateArgs>(args: Subset<T, ShipperAggregateArgs>): Prisma.PrismaPromise<GetShipperAggregateType<T>>

    /**
     * Group by Shipper.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShipperGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ShipperGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ShipperGroupByArgs['orderBy'] }
        : { orderBy?: ShipperGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ShipperGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetShipperGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Shipper model
   */
  readonly fields: ShipperFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Shipper.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ShipperClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    logisticsPartner<T extends LogisticsPartnerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LogisticsPartnerDefaultArgs<ExtArgs>>): Prisma__LogisticsPartnerClient<$Result.GetResult<Prisma.$LogisticsPartnerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    assignedOrders<T extends Shipper$assignedOrdersArgs<ExtArgs> = {}>(args?: Subset<T, Shipper$assignedOrdersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LogisticsOrderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Shipper model
   */
  interface ShipperFieldRefs {
    readonly id: FieldRef<"Shipper", 'String'>
    readonly email: FieldRef<"Shipper", 'String'>
    readonly password: FieldRef<"Shipper", 'String'>
    readonly name: FieldRef<"Shipper", 'String'>
    readonly phone: FieldRef<"Shipper", 'String'>
    readonly avatar: FieldRef<"Shipper", 'String'>
    readonly logisticsPartnerId: FieldRef<"Shipper", 'String'>
    readonly active: FieldRef<"Shipper", 'Boolean'>
    readonly currentLocation: FieldRef<"Shipper", 'Json'>
    readonly status: FieldRef<"Shipper", 'ShipperStatus'>
    readonly rating: FieldRef<"Shipper", 'Float'>
    readonly totalDeliveries: FieldRef<"Shipper", 'Int'>
    readonly totalRatings: FieldRef<"Shipper", 'Int'>
    readonly deliveryRange: FieldRef<"Shipper", 'Float'>
    readonly deliveryHistory: FieldRef<"Shipper", 'Json[]'>
    readonly createdAt: FieldRef<"Shipper", 'DateTime'>
    readonly updatedAt: FieldRef<"Shipper", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Shipper findUnique
   */
  export type ShipperFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shipper
     */
    select?: ShipperSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Shipper
     */
    omit?: ShipperOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShipperInclude<ExtArgs> | null
    /**
     * Filter, which Shipper to fetch.
     */
    where: ShipperWhereUniqueInput
  }

  /**
   * Shipper findUniqueOrThrow
   */
  export type ShipperFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shipper
     */
    select?: ShipperSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Shipper
     */
    omit?: ShipperOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShipperInclude<ExtArgs> | null
    /**
     * Filter, which Shipper to fetch.
     */
    where: ShipperWhereUniqueInput
  }

  /**
   * Shipper findFirst
   */
  export type ShipperFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shipper
     */
    select?: ShipperSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Shipper
     */
    omit?: ShipperOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShipperInclude<ExtArgs> | null
    /**
     * Filter, which Shipper to fetch.
     */
    where?: ShipperWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Shippers to fetch.
     */
    orderBy?: ShipperOrderByWithRelationInput | ShipperOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Shippers.
     */
    cursor?: ShipperWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Shippers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Shippers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Shippers.
     */
    distinct?: ShipperScalarFieldEnum | ShipperScalarFieldEnum[]
  }

  /**
   * Shipper findFirstOrThrow
   */
  export type ShipperFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shipper
     */
    select?: ShipperSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Shipper
     */
    omit?: ShipperOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShipperInclude<ExtArgs> | null
    /**
     * Filter, which Shipper to fetch.
     */
    where?: ShipperWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Shippers to fetch.
     */
    orderBy?: ShipperOrderByWithRelationInput | ShipperOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Shippers.
     */
    cursor?: ShipperWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Shippers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Shippers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Shippers.
     */
    distinct?: ShipperScalarFieldEnum | ShipperScalarFieldEnum[]
  }

  /**
   * Shipper findMany
   */
  export type ShipperFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shipper
     */
    select?: ShipperSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Shipper
     */
    omit?: ShipperOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShipperInclude<ExtArgs> | null
    /**
     * Filter, which Shippers to fetch.
     */
    where?: ShipperWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Shippers to fetch.
     */
    orderBy?: ShipperOrderByWithRelationInput | ShipperOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Shippers.
     */
    cursor?: ShipperWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Shippers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Shippers.
     */
    skip?: number
    distinct?: ShipperScalarFieldEnum | ShipperScalarFieldEnum[]
  }

  /**
   * Shipper create
   */
  export type ShipperCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shipper
     */
    select?: ShipperSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Shipper
     */
    omit?: ShipperOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShipperInclude<ExtArgs> | null
    /**
     * The data needed to create a Shipper.
     */
    data: XOR<ShipperCreateInput, ShipperUncheckedCreateInput>
  }

  /**
   * Shipper createMany
   */
  export type ShipperCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Shippers.
     */
    data: ShipperCreateManyInput | ShipperCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Shipper createManyAndReturn
   */
  export type ShipperCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shipper
     */
    select?: ShipperSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Shipper
     */
    omit?: ShipperOmit<ExtArgs> | null
    /**
     * The data used to create many Shippers.
     */
    data: ShipperCreateManyInput | ShipperCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShipperIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Shipper update
   */
  export type ShipperUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shipper
     */
    select?: ShipperSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Shipper
     */
    omit?: ShipperOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShipperInclude<ExtArgs> | null
    /**
     * The data needed to update a Shipper.
     */
    data: XOR<ShipperUpdateInput, ShipperUncheckedUpdateInput>
    /**
     * Choose, which Shipper to update.
     */
    where: ShipperWhereUniqueInput
  }

  /**
   * Shipper updateMany
   */
  export type ShipperUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Shippers.
     */
    data: XOR<ShipperUpdateManyMutationInput, ShipperUncheckedUpdateManyInput>
    /**
     * Filter which Shippers to update
     */
    where?: ShipperWhereInput
    /**
     * Limit how many Shippers to update.
     */
    limit?: number
  }

  /**
   * Shipper updateManyAndReturn
   */
  export type ShipperUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shipper
     */
    select?: ShipperSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Shipper
     */
    omit?: ShipperOmit<ExtArgs> | null
    /**
     * The data used to update Shippers.
     */
    data: XOR<ShipperUpdateManyMutationInput, ShipperUncheckedUpdateManyInput>
    /**
     * Filter which Shippers to update
     */
    where?: ShipperWhereInput
    /**
     * Limit how many Shippers to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShipperIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Shipper upsert
   */
  export type ShipperUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shipper
     */
    select?: ShipperSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Shipper
     */
    omit?: ShipperOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShipperInclude<ExtArgs> | null
    /**
     * The filter to search for the Shipper to update in case it exists.
     */
    where: ShipperWhereUniqueInput
    /**
     * In case the Shipper found by the `where` argument doesn't exist, create a new Shipper with this data.
     */
    create: XOR<ShipperCreateInput, ShipperUncheckedCreateInput>
    /**
     * In case the Shipper was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ShipperUpdateInput, ShipperUncheckedUpdateInput>
  }

  /**
   * Shipper delete
   */
  export type ShipperDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shipper
     */
    select?: ShipperSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Shipper
     */
    omit?: ShipperOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShipperInclude<ExtArgs> | null
    /**
     * Filter which Shipper to delete.
     */
    where: ShipperWhereUniqueInput
  }

  /**
   * Shipper deleteMany
   */
  export type ShipperDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Shippers to delete
     */
    where?: ShipperWhereInput
    /**
     * Limit how many Shippers to delete.
     */
    limit?: number
  }

  /**
   * Shipper.assignedOrders
   */
  export type Shipper$assignedOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LogisticsOrder
     */
    select?: LogisticsOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LogisticsOrder
     */
    omit?: LogisticsOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogisticsOrderInclude<ExtArgs> | null
    where?: LogisticsOrderWhereInput
    orderBy?: LogisticsOrderOrderByWithRelationInput | LogisticsOrderOrderByWithRelationInput[]
    cursor?: LogisticsOrderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LogisticsOrderScalarFieldEnum | LogisticsOrderScalarFieldEnum[]
  }

  /**
   * Shipper without action
   */
  export type ShipperDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shipper
     */
    select?: ShipperSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Shipper
     */
    omit?: ShipperOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShipperInclude<ExtArgs> | null
  }


  /**
   * Model LogisticsOrder
   */

  export type AggregateLogisticsOrder = {
    _count: LogisticsOrderCountAggregateOutputType | null
    _avg: LogisticsOrderAvgAggregateOutputType | null
    _sum: LogisticsOrderSumAggregateOutputType | null
    _min: LogisticsOrderMinAggregateOutputType | null
    _max: LogisticsOrderMaxAggregateOutputType | null
  }

  export type LogisticsOrderAvgAggregateOutputType = {
    distance: number | null
    estimatedTime: number | null
    deliveryAttempts: number | null
    rating: number | null
  }

  export type LogisticsOrderSumAggregateOutputType = {
    distance: number | null
    estimatedTime: number | null
    deliveryAttempts: number | null
    rating: number | null
  }

  export type LogisticsOrderMinAggregateOutputType = {
    id: string | null
    orderId: string | null
    logisticsPartnerId: string | null
    shipperId: string | null
    trackingCode: string | null
    status: $Enums.LogisticsStatus | null
    pickupAddress: string | null
    deliveryAddress: string | null
    distance: number | null
    estimatedTime: number | null
    estimatedDelivery: Date | null
    pickupTime: Date | null
    deliveredTime: Date | null
    notes: string | null
    deliveryAttempts: number | null
    customerSignature: string | null
    updatedAt: Date | null
    cancelReason: string | null
    rating: number | null
    feedback: string | null
  }

  export type LogisticsOrderMaxAggregateOutputType = {
    id: string | null
    orderId: string | null
    logisticsPartnerId: string | null
    shipperId: string | null
    trackingCode: string | null
    status: $Enums.LogisticsStatus | null
    pickupAddress: string | null
    deliveryAddress: string | null
    distance: number | null
    estimatedTime: number | null
    estimatedDelivery: Date | null
    pickupTime: Date | null
    deliveredTime: Date | null
    notes: string | null
    deliveryAttempts: number | null
    customerSignature: string | null
    updatedAt: Date | null
    cancelReason: string | null
    rating: number | null
    feedback: string | null
  }

  export type LogisticsOrderCountAggregateOutputType = {
    id: number
    orderId: number
    logisticsPartnerId: number
    shipperId: number
    trackingCode: number
    status: number
    pickupAddress: number
    deliveryAddress: number
    pickupLocation: number
    deliveryLocation: number
    distance: number
    estimatedTime: number
    estimatedDelivery: number
    pickupTime: number
    deliveredTime: number
    notes: number
    deliveryAttempts: number
    customerSignature: number
    proofOfDelivery: number
    updatedAt: number
    cancelReason: number
    rating: number
    feedback: number
    _all: number
  }


  export type LogisticsOrderAvgAggregateInputType = {
    distance?: true
    estimatedTime?: true
    deliveryAttempts?: true
    rating?: true
  }

  export type LogisticsOrderSumAggregateInputType = {
    distance?: true
    estimatedTime?: true
    deliveryAttempts?: true
    rating?: true
  }

  export type LogisticsOrderMinAggregateInputType = {
    id?: true
    orderId?: true
    logisticsPartnerId?: true
    shipperId?: true
    trackingCode?: true
    status?: true
    pickupAddress?: true
    deliveryAddress?: true
    distance?: true
    estimatedTime?: true
    estimatedDelivery?: true
    pickupTime?: true
    deliveredTime?: true
    notes?: true
    deliveryAttempts?: true
    customerSignature?: true
    updatedAt?: true
    cancelReason?: true
    rating?: true
    feedback?: true
  }

  export type LogisticsOrderMaxAggregateInputType = {
    id?: true
    orderId?: true
    logisticsPartnerId?: true
    shipperId?: true
    trackingCode?: true
    status?: true
    pickupAddress?: true
    deliveryAddress?: true
    distance?: true
    estimatedTime?: true
    estimatedDelivery?: true
    pickupTime?: true
    deliveredTime?: true
    notes?: true
    deliveryAttempts?: true
    customerSignature?: true
    updatedAt?: true
    cancelReason?: true
    rating?: true
    feedback?: true
  }

  export type LogisticsOrderCountAggregateInputType = {
    id?: true
    orderId?: true
    logisticsPartnerId?: true
    shipperId?: true
    trackingCode?: true
    status?: true
    pickupAddress?: true
    deliveryAddress?: true
    pickupLocation?: true
    deliveryLocation?: true
    distance?: true
    estimatedTime?: true
    estimatedDelivery?: true
    pickupTime?: true
    deliveredTime?: true
    notes?: true
    deliveryAttempts?: true
    customerSignature?: true
    proofOfDelivery?: true
    updatedAt?: true
    cancelReason?: true
    rating?: true
    feedback?: true
    _all?: true
  }

  export type LogisticsOrderAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LogisticsOrder to aggregate.
     */
    where?: LogisticsOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LogisticsOrders to fetch.
     */
    orderBy?: LogisticsOrderOrderByWithRelationInput | LogisticsOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LogisticsOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LogisticsOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LogisticsOrders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LogisticsOrders
    **/
    _count?: true | LogisticsOrderCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LogisticsOrderAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LogisticsOrderSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LogisticsOrderMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LogisticsOrderMaxAggregateInputType
  }

  export type GetLogisticsOrderAggregateType<T extends LogisticsOrderAggregateArgs> = {
        [P in keyof T & keyof AggregateLogisticsOrder]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLogisticsOrder[P]>
      : GetScalarType<T[P], AggregateLogisticsOrder[P]>
  }




  export type LogisticsOrderGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LogisticsOrderWhereInput
    orderBy?: LogisticsOrderOrderByWithAggregationInput | LogisticsOrderOrderByWithAggregationInput[]
    by: LogisticsOrderScalarFieldEnum[] | LogisticsOrderScalarFieldEnum
    having?: LogisticsOrderScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LogisticsOrderCountAggregateInputType | true
    _avg?: LogisticsOrderAvgAggregateInputType
    _sum?: LogisticsOrderSumAggregateInputType
    _min?: LogisticsOrderMinAggregateInputType
    _max?: LogisticsOrderMaxAggregateInputType
  }

  export type LogisticsOrderGroupByOutputType = {
    id: string
    orderId: string
    logisticsPartnerId: string
    shipperId: string | null
    trackingCode: string
    status: $Enums.LogisticsStatus
    pickupAddress: string
    deliveryAddress: string
    pickupLocation: JsonValue | null
    deliveryLocation: JsonValue | null
    distance: number | null
    estimatedTime: number | null
    estimatedDelivery: Date | null
    pickupTime: Date | null
    deliveredTime: Date | null
    notes: string | null
    deliveryAttempts: number
    customerSignature: string | null
    proofOfDelivery: string[]
    updatedAt: Date
    cancelReason: string | null
    rating: number | null
    feedback: string | null
    _count: LogisticsOrderCountAggregateOutputType | null
    _avg: LogisticsOrderAvgAggregateOutputType | null
    _sum: LogisticsOrderSumAggregateOutputType | null
    _min: LogisticsOrderMinAggregateOutputType | null
    _max: LogisticsOrderMaxAggregateOutputType | null
  }

  type GetLogisticsOrderGroupByPayload<T extends LogisticsOrderGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LogisticsOrderGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LogisticsOrderGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LogisticsOrderGroupByOutputType[P]>
            : GetScalarType<T[P], LogisticsOrderGroupByOutputType[P]>
        }
      >
    >


  export type LogisticsOrderSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    orderId?: boolean
    logisticsPartnerId?: boolean
    shipperId?: boolean
    trackingCode?: boolean
    status?: boolean
    pickupAddress?: boolean
    deliveryAddress?: boolean
    pickupLocation?: boolean
    deliveryLocation?: boolean
    distance?: boolean
    estimatedTime?: boolean
    estimatedDelivery?: boolean
    pickupTime?: boolean
    deliveredTime?: boolean
    notes?: boolean
    deliveryAttempts?: boolean
    customerSignature?: boolean
    proofOfDelivery?: boolean
    updatedAt?: boolean
    cancelReason?: boolean
    rating?: boolean
    feedback?: boolean
    order?: boolean | OrderDefaultArgs<ExtArgs>
    logisticsPartner?: boolean | LogisticsPartnerDefaultArgs<ExtArgs>
    shipper?: boolean | LogisticsOrder$shipperArgs<ExtArgs>
  }, ExtArgs["result"]["logisticsOrder"]>

  export type LogisticsOrderSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    orderId?: boolean
    logisticsPartnerId?: boolean
    shipperId?: boolean
    trackingCode?: boolean
    status?: boolean
    pickupAddress?: boolean
    deliveryAddress?: boolean
    pickupLocation?: boolean
    deliveryLocation?: boolean
    distance?: boolean
    estimatedTime?: boolean
    estimatedDelivery?: boolean
    pickupTime?: boolean
    deliveredTime?: boolean
    notes?: boolean
    deliveryAttempts?: boolean
    customerSignature?: boolean
    proofOfDelivery?: boolean
    updatedAt?: boolean
    cancelReason?: boolean
    rating?: boolean
    feedback?: boolean
    order?: boolean | OrderDefaultArgs<ExtArgs>
    logisticsPartner?: boolean | LogisticsPartnerDefaultArgs<ExtArgs>
    shipper?: boolean | LogisticsOrder$shipperArgs<ExtArgs>
  }, ExtArgs["result"]["logisticsOrder"]>

  export type LogisticsOrderSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    orderId?: boolean
    logisticsPartnerId?: boolean
    shipperId?: boolean
    trackingCode?: boolean
    status?: boolean
    pickupAddress?: boolean
    deliveryAddress?: boolean
    pickupLocation?: boolean
    deliveryLocation?: boolean
    distance?: boolean
    estimatedTime?: boolean
    estimatedDelivery?: boolean
    pickupTime?: boolean
    deliveredTime?: boolean
    notes?: boolean
    deliveryAttempts?: boolean
    customerSignature?: boolean
    proofOfDelivery?: boolean
    updatedAt?: boolean
    cancelReason?: boolean
    rating?: boolean
    feedback?: boolean
    order?: boolean | OrderDefaultArgs<ExtArgs>
    logisticsPartner?: boolean | LogisticsPartnerDefaultArgs<ExtArgs>
    shipper?: boolean | LogisticsOrder$shipperArgs<ExtArgs>
  }, ExtArgs["result"]["logisticsOrder"]>

  export type LogisticsOrderSelectScalar = {
    id?: boolean
    orderId?: boolean
    logisticsPartnerId?: boolean
    shipperId?: boolean
    trackingCode?: boolean
    status?: boolean
    pickupAddress?: boolean
    deliveryAddress?: boolean
    pickupLocation?: boolean
    deliveryLocation?: boolean
    distance?: boolean
    estimatedTime?: boolean
    estimatedDelivery?: boolean
    pickupTime?: boolean
    deliveredTime?: boolean
    notes?: boolean
    deliveryAttempts?: boolean
    customerSignature?: boolean
    proofOfDelivery?: boolean
    updatedAt?: boolean
    cancelReason?: boolean
    rating?: boolean
    feedback?: boolean
  }

  export type LogisticsOrderOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "orderId" | "logisticsPartnerId" | "shipperId" | "trackingCode" | "status" | "pickupAddress" | "deliveryAddress" | "pickupLocation" | "deliveryLocation" | "distance" | "estimatedTime" | "estimatedDelivery" | "pickupTime" | "deliveredTime" | "notes" | "deliveryAttempts" | "customerSignature" | "proofOfDelivery" | "updatedAt" | "cancelReason" | "rating" | "feedback", ExtArgs["result"]["logisticsOrder"]>
  export type LogisticsOrderInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    order?: boolean | OrderDefaultArgs<ExtArgs>
    logisticsPartner?: boolean | LogisticsPartnerDefaultArgs<ExtArgs>
    shipper?: boolean | LogisticsOrder$shipperArgs<ExtArgs>
  }
  export type LogisticsOrderIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    order?: boolean | OrderDefaultArgs<ExtArgs>
    logisticsPartner?: boolean | LogisticsPartnerDefaultArgs<ExtArgs>
    shipper?: boolean | LogisticsOrder$shipperArgs<ExtArgs>
  }
  export type LogisticsOrderIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    order?: boolean | OrderDefaultArgs<ExtArgs>
    logisticsPartner?: boolean | LogisticsPartnerDefaultArgs<ExtArgs>
    shipper?: boolean | LogisticsOrder$shipperArgs<ExtArgs>
  }

  export type $LogisticsOrderPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "LogisticsOrder"
    objects: {
      order: Prisma.$OrderPayload<ExtArgs>
      logisticsPartner: Prisma.$LogisticsPartnerPayload<ExtArgs>
      shipper: Prisma.$ShipperPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      orderId: string
      logisticsPartnerId: string
      shipperId: string | null
      trackingCode: string
      status: $Enums.LogisticsStatus
      pickupAddress: string
      deliveryAddress: string
      pickupLocation: Prisma.JsonValue | null
      deliveryLocation: Prisma.JsonValue | null
      distance: number | null
      estimatedTime: number | null
      estimatedDelivery: Date | null
      pickupTime: Date | null
      deliveredTime: Date | null
      notes: string | null
      deliveryAttempts: number
      customerSignature: string | null
      proofOfDelivery: string[]
      updatedAt: Date
      cancelReason: string | null
      rating: number | null
      feedback: string | null
    }, ExtArgs["result"]["logisticsOrder"]>
    composites: {}
  }

  type LogisticsOrderGetPayload<S extends boolean | null | undefined | LogisticsOrderDefaultArgs> = $Result.GetResult<Prisma.$LogisticsOrderPayload, S>

  type LogisticsOrderCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<LogisticsOrderFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LogisticsOrderCountAggregateInputType | true
    }

  export interface LogisticsOrderDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LogisticsOrder'], meta: { name: 'LogisticsOrder' } }
    /**
     * Find zero or one LogisticsOrder that matches the filter.
     * @param {LogisticsOrderFindUniqueArgs} args - Arguments to find a LogisticsOrder
     * @example
     * // Get one LogisticsOrder
     * const logisticsOrder = await prisma.logisticsOrder.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LogisticsOrderFindUniqueArgs>(args: SelectSubset<T, LogisticsOrderFindUniqueArgs<ExtArgs>>): Prisma__LogisticsOrderClient<$Result.GetResult<Prisma.$LogisticsOrderPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one LogisticsOrder that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LogisticsOrderFindUniqueOrThrowArgs} args - Arguments to find a LogisticsOrder
     * @example
     * // Get one LogisticsOrder
     * const logisticsOrder = await prisma.logisticsOrder.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LogisticsOrderFindUniqueOrThrowArgs>(args: SelectSubset<T, LogisticsOrderFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LogisticsOrderClient<$Result.GetResult<Prisma.$LogisticsOrderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LogisticsOrder that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogisticsOrderFindFirstArgs} args - Arguments to find a LogisticsOrder
     * @example
     * // Get one LogisticsOrder
     * const logisticsOrder = await prisma.logisticsOrder.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LogisticsOrderFindFirstArgs>(args?: SelectSubset<T, LogisticsOrderFindFirstArgs<ExtArgs>>): Prisma__LogisticsOrderClient<$Result.GetResult<Prisma.$LogisticsOrderPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LogisticsOrder that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogisticsOrderFindFirstOrThrowArgs} args - Arguments to find a LogisticsOrder
     * @example
     * // Get one LogisticsOrder
     * const logisticsOrder = await prisma.logisticsOrder.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LogisticsOrderFindFirstOrThrowArgs>(args?: SelectSubset<T, LogisticsOrderFindFirstOrThrowArgs<ExtArgs>>): Prisma__LogisticsOrderClient<$Result.GetResult<Prisma.$LogisticsOrderPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more LogisticsOrders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogisticsOrderFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LogisticsOrders
     * const logisticsOrders = await prisma.logisticsOrder.findMany()
     * 
     * // Get first 10 LogisticsOrders
     * const logisticsOrders = await prisma.logisticsOrder.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const logisticsOrderWithIdOnly = await prisma.logisticsOrder.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LogisticsOrderFindManyArgs>(args?: SelectSubset<T, LogisticsOrderFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LogisticsOrderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a LogisticsOrder.
     * @param {LogisticsOrderCreateArgs} args - Arguments to create a LogisticsOrder.
     * @example
     * // Create one LogisticsOrder
     * const LogisticsOrder = await prisma.logisticsOrder.create({
     *   data: {
     *     // ... data to create a LogisticsOrder
     *   }
     * })
     * 
     */
    create<T extends LogisticsOrderCreateArgs>(args: SelectSubset<T, LogisticsOrderCreateArgs<ExtArgs>>): Prisma__LogisticsOrderClient<$Result.GetResult<Prisma.$LogisticsOrderPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many LogisticsOrders.
     * @param {LogisticsOrderCreateManyArgs} args - Arguments to create many LogisticsOrders.
     * @example
     * // Create many LogisticsOrders
     * const logisticsOrder = await prisma.logisticsOrder.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LogisticsOrderCreateManyArgs>(args?: SelectSubset<T, LogisticsOrderCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many LogisticsOrders and returns the data saved in the database.
     * @param {LogisticsOrderCreateManyAndReturnArgs} args - Arguments to create many LogisticsOrders.
     * @example
     * // Create many LogisticsOrders
     * const logisticsOrder = await prisma.logisticsOrder.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many LogisticsOrders and only return the `id`
     * const logisticsOrderWithIdOnly = await prisma.logisticsOrder.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LogisticsOrderCreateManyAndReturnArgs>(args?: SelectSubset<T, LogisticsOrderCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LogisticsOrderPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a LogisticsOrder.
     * @param {LogisticsOrderDeleteArgs} args - Arguments to delete one LogisticsOrder.
     * @example
     * // Delete one LogisticsOrder
     * const LogisticsOrder = await prisma.logisticsOrder.delete({
     *   where: {
     *     // ... filter to delete one LogisticsOrder
     *   }
     * })
     * 
     */
    delete<T extends LogisticsOrderDeleteArgs>(args: SelectSubset<T, LogisticsOrderDeleteArgs<ExtArgs>>): Prisma__LogisticsOrderClient<$Result.GetResult<Prisma.$LogisticsOrderPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one LogisticsOrder.
     * @param {LogisticsOrderUpdateArgs} args - Arguments to update one LogisticsOrder.
     * @example
     * // Update one LogisticsOrder
     * const logisticsOrder = await prisma.logisticsOrder.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LogisticsOrderUpdateArgs>(args: SelectSubset<T, LogisticsOrderUpdateArgs<ExtArgs>>): Prisma__LogisticsOrderClient<$Result.GetResult<Prisma.$LogisticsOrderPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more LogisticsOrders.
     * @param {LogisticsOrderDeleteManyArgs} args - Arguments to filter LogisticsOrders to delete.
     * @example
     * // Delete a few LogisticsOrders
     * const { count } = await prisma.logisticsOrder.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LogisticsOrderDeleteManyArgs>(args?: SelectSubset<T, LogisticsOrderDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LogisticsOrders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogisticsOrderUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LogisticsOrders
     * const logisticsOrder = await prisma.logisticsOrder.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LogisticsOrderUpdateManyArgs>(args: SelectSubset<T, LogisticsOrderUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LogisticsOrders and returns the data updated in the database.
     * @param {LogisticsOrderUpdateManyAndReturnArgs} args - Arguments to update many LogisticsOrders.
     * @example
     * // Update many LogisticsOrders
     * const logisticsOrder = await prisma.logisticsOrder.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more LogisticsOrders and only return the `id`
     * const logisticsOrderWithIdOnly = await prisma.logisticsOrder.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends LogisticsOrderUpdateManyAndReturnArgs>(args: SelectSubset<T, LogisticsOrderUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LogisticsOrderPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one LogisticsOrder.
     * @param {LogisticsOrderUpsertArgs} args - Arguments to update or create a LogisticsOrder.
     * @example
     * // Update or create a LogisticsOrder
     * const logisticsOrder = await prisma.logisticsOrder.upsert({
     *   create: {
     *     // ... data to create a LogisticsOrder
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LogisticsOrder we want to update
     *   }
     * })
     */
    upsert<T extends LogisticsOrderUpsertArgs>(args: SelectSubset<T, LogisticsOrderUpsertArgs<ExtArgs>>): Prisma__LogisticsOrderClient<$Result.GetResult<Prisma.$LogisticsOrderPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of LogisticsOrders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogisticsOrderCountArgs} args - Arguments to filter LogisticsOrders to count.
     * @example
     * // Count the number of LogisticsOrders
     * const count = await prisma.logisticsOrder.count({
     *   where: {
     *     // ... the filter for the LogisticsOrders we want to count
     *   }
     * })
    **/
    count<T extends LogisticsOrderCountArgs>(
      args?: Subset<T, LogisticsOrderCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LogisticsOrderCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LogisticsOrder.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogisticsOrderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LogisticsOrderAggregateArgs>(args: Subset<T, LogisticsOrderAggregateArgs>): Prisma.PrismaPromise<GetLogisticsOrderAggregateType<T>>

    /**
     * Group by LogisticsOrder.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogisticsOrderGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LogisticsOrderGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LogisticsOrderGroupByArgs['orderBy'] }
        : { orderBy?: LogisticsOrderGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LogisticsOrderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLogisticsOrderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the LogisticsOrder model
   */
  readonly fields: LogisticsOrderFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for LogisticsOrder.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LogisticsOrderClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    order<T extends OrderDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrderDefaultArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    logisticsPartner<T extends LogisticsPartnerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LogisticsPartnerDefaultArgs<ExtArgs>>): Prisma__LogisticsPartnerClient<$Result.GetResult<Prisma.$LogisticsPartnerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    shipper<T extends LogisticsOrder$shipperArgs<ExtArgs> = {}>(args?: Subset<T, LogisticsOrder$shipperArgs<ExtArgs>>): Prisma__ShipperClient<$Result.GetResult<Prisma.$ShipperPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the LogisticsOrder model
   */
  interface LogisticsOrderFieldRefs {
    readonly id: FieldRef<"LogisticsOrder", 'String'>
    readonly orderId: FieldRef<"LogisticsOrder", 'String'>
    readonly logisticsPartnerId: FieldRef<"LogisticsOrder", 'String'>
    readonly shipperId: FieldRef<"LogisticsOrder", 'String'>
    readonly trackingCode: FieldRef<"LogisticsOrder", 'String'>
    readonly status: FieldRef<"LogisticsOrder", 'LogisticsStatus'>
    readonly pickupAddress: FieldRef<"LogisticsOrder", 'String'>
    readonly deliveryAddress: FieldRef<"LogisticsOrder", 'String'>
    readonly pickupLocation: FieldRef<"LogisticsOrder", 'Json'>
    readonly deliveryLocation: FieldRef<"LogisticsOrder", 'Json'>
    readonly distance: FieldRef<"LogisticsOrder", 'Float'>
    readonly estimatedTime: FieldRef<"LogisticsOrder", 'Int'>
    readonly estimatedDelivery: FieldRef<"LogisticsOrder", 'DateTime'>
    readonly pickupTime: FieldRef<"LogisticsOrder", 'DateTime'>
    readonly deliveredTime: FieldRef<"LogisticsOrder", 'DateTime'>
    readonly notes: FieldRef<"LogisticsOrder", 'String'>
    readonly deliveryAttempts: FieldRef<"LogisticsOrder", 'Int'>
    readonly customerSignature: FieldRef<"LogisticsOrder", 'String'>
    readonly proofOfDelivery: FieldRef<"LogisticsOrder", 'String[]'>
    readonly updatedAt: FieldRef<"LogisticsOrder", 'DateTime'>
    readonly cancelReason: FieldRef<"LogisticsOrder", 'String'>
    readonly rating: FieldRef<"LogisticsOrder", 'Int'>
    readonly feedback: FieldRef<"LogisticsOrder", 'String'>
  }
    

  // Custom InputTypes
  /**
   * LogisticsOrder findUnique
   */
  export type LogisticsOrderFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LogisticsOrder
     */
    select?: LogisticsOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LogisticsOrder
     */
    omit?: LogisticsOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogisticsOrderInclude<ExtArgs> | null
    /**
     * Filter, which LogisticsOrder to fetch.
     */
    where: LogisticsOrderWhereUniqueInput
  }

  /**
   * LogisticsOrder findUniqueOrThrow
   */
  export type LogisticsOrderFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LogisticsOrder
     */
    select?: LogisticsOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LogisticsOrder
     */
    omit?: LogisticsOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogisticsOrderInclude<ExtArgs> | null
    /**
     * Filter, which LogisticsOrder to fetch.
     */
    where: LogisticsOrderWhereUniqueInput
  }

  /**
   * LogisticsOrder findFirst
   */
  export type LogisticsOrderFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LogisticsOrder
     */
    select?: LogisticsOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LogisticsOrder
     */
    omit?: LogisticsOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogisticsOrderInclude<ExtArgs> | null
    /**
     * Filter, which LogisticsOrder to fetch.
     */
    where?: LogisticsOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LogisticsOrders to fetch.
     */
    orderBy?: LogisticsOrderOrderByWithRelationInput | LogisticsOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LogisticsOrders.
     */
    cursor?: LogisticsOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LogisticsOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LogisticsOrders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LogisticsOrders.
     */
    distinct?: LogisticsOrderScalarFieldEnum | LogisticsOrderScalarFieldEnum[]
  }

  /**
   * LogisticsOrder findFirstOrThrow
   */
  export type LogisticsOrderFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LogisticsOrder
     */
    select?: LogisticsOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LogisticsOrder
     */
    omit?: LogisticsOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogisticsOrderInclude<ExtArgs> | null
    /**
     * Filter, which LogisticsOrder to fetch.
     */
    where?: LogisticsOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LogisticsOrders to fetch.
     */
    orderBy?: LogisticsOrderOrderByWithRelationInput | LogisticsOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LogisticsOrders.
     */
    cursor?: LogisticsOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LogisticsOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LogisticsOrders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LogisticsOrders.
     */
    distinct?: LogisticsOrderScalarFieldEnum | LogisticsOrderScalarFieldEnum[]
  }

  /**
   * LogisticsOrder findMany
   */
  export type LogisticsOrderFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LogisticsOrder
     */
    select?: LogisticsOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LogisticsOrder
     */
    omit?: LogisticsOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogisticsOrderInclude<ExtArgs> | null
    /**
     * Filter, which LogisticsOrders to fetch.
     */
    where?: LogisticsOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LogisticsOrders to fetch.
     */
    orderBy?: LogisticsOrderOrderByWithRelationInput | LogisticsOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LogisticsOrders.
     */
    cursor?: LogisticsOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LogisticsOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LogisticsOrders.
     */
    skip?: number
    distinct?: LogisticsOrderScalarFieldEnum | LogisticsOrderScalarFieldEnum[]
  }

  /**
   * LogisticsOrder create
   */
  export type LogisticsOrderCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LogisticsOrder
     */
    select?: LogisticsOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LogisticsOrder
     */
    omit?: LogisticsOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogisticsOrderInclude<ExtArgs> | null
    /**
     * The data needed to create a LogisticsOrder.
     */
    data: XOR<LogisticsOrderCreateInput, LogisticsOrderUncheckedCreateInput>
  }

  /**
   * LogisticsOrder createMany
   */
  export type LogisticsOrderCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many LogisticsOrders.
     */
    data: LogisticsOrderCreateManyInput | LogisticsOrderCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * LogisticsOrder createManyAndReturn
   */
  export type LogisticsOrderCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LogisticsOrder
     */
    select?: LogisticsOrderSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LogisticsOrder
     */
    omit?: LogisticsOrderOmit<ExtArgs> | null
    /**
     * The data used to create many LogisticsOrders.
     */
    data: LogisticsOrderCreateManyInput | LogisticsOrderCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogisticsOrderIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * LogisticsOrder update
   */
  export type LogisticsOrderUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LogisticsOrder
     */
    select?: LogisticsOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LogisticsOrder
     */
    omit?: LogisticsOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogisticsOrderInclude<ExtArgs> | null
    /**
     * The data needed to update a LogisticsOrder.
     */
    data: XOR<LogisticsOrderUpdateInput, LogisticsOrderUncheckedUpdateInput>
    /**
     * Choose, which LogisticsOrder to update.
     */
    where: LogisticsOrderWhereUniqueInput
  }

  /**
   * LogisticsOrder updateMany
   */
  export type LogisticsOrderUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update LogisticsOrders.
     */
    data: XOR<LogisticsOrderUpdateManyMutationInput, LogisticsOrderUncheckedUpdateManyInput>
    /**
     * Filter which LogisticsOrders to update
     */
    where?: LogisticsOrderWhereInput
    /**
     * Limit how many LogisticsOrders to update.
     */
    limit?: number
  }

  /**
   * LogisticsOrder updateManyAndReturn
   */
  export type LogisticsOrderUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LogisticsOrder
     */
    select?: LogisticsOrderSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LogisticsOrder
     */
    omit?: LogisticsOrderOmit<ExtArgs> | null
    /**
     * The data used to update LogisticsOrders.
     */
    data: XOR<LogisticsOrderUpdateManyMutationInput, LogisticsOrderUncheckedUpdateManyInput>
    /**
     * Filter which LogisticsOrders to update
     */
    where?: LogisticsOrderWhereInput
    /**
     * Limit how many LogisticsOrders to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogisticsOrderIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * LogisticsOrder upsert
   */
  export type LogisticsOrderUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LogisticsOrder
     */
    select?: LogisticsOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LogisticsOrder
     */
    omit?: LogisticsOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogisticsOrderInclude<ExtArgs> | null
    /**
     * The filter to search for the LogisticsOrder to update in case it exists.
     */
    where: LogisticsOrderWhereUniqueInput
    /**
     * In case the LogisticsOrder found by the `where` argument doesn't exist, create a new LogisticsOrder with this data.
     */
    create: XOR<LogisticsOrderCreateInput, LogisticsOrderUncheckedCreateInput>
    /**
     * In case the LogisticsOrder was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LogisticsOrderUpdateInput, LogisticsOrderUncheckedUpdateInput>
  }

  /**
   * LogisticsOrder delete
   */
  export type LogisticsOrderDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LogisticsOrder
     */
    select?: LogisticsOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LogisticsOrder
     */
    omit?: LogisticsOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogisticsOrderInclude<ExtArgs> | null
    /**
     * Filter which LogisticsOrder to delete.
     */
    where: LogisticsOrderWhereUniqueInput
  }

  /**
   * LogisticsOrder deleteMany
   */
  export type LogisticsOrderDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LogisticsOrders to delete
     */
    where?: LogisticsOrderWhereInput
    /**
     * Limit how many LogisticsOrders to delete.
     */
    limit?: number
  }

  /**
   * LogisticsOrder.shipper
   */
  export type LogisticsOrder$shipperArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shipper
     */
    select?: ShipperSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Shipper
     */
    omit?: ShipperOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShipperInclude<ExtArgs> | null
    where?: ShipperWhereInput
  }

  /**
   * LogisticsOrder without action
   */
  export type LogisticsOrderDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LogisticsOrder
     */
    select?: LogisticsOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LogisticsOrder
     */
    omit?: LogisticsOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogisticsOrderInclude<ExtArgs> | null
  }


  /**
   * Model UserBehavior
   */

  export type AggregateUserBehavior = {
    _count: UserBehaviorCountAggregateOutputType | null
    _min: UserBehaviorMinAggregateOutputType | null
    _max: UserBehaviorMaxAggregateOutputType | null
  }

  export type UserBehaviorMinAggregateOutputType = {
    id: string | null
    userId: string | null
    productId: string | null
    type: $Enums.BehaviorType | null
    createdAt: Date | null
  }

  export type UserBehaviorMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    productId: string | null
    type: $Enums.BehaviorType | null
    createdAt: Date | null
  }

  export type UserBehaviorCountAggregateOutputType = {
    id: number
    userId: number
    productId: number
    type: number
    createdAt: number
    _all: number
  }


  export type UserBehaviorMinAggregateInputType = {
    id?: true
    userId?: true
    productId?: true
    type?: true
    createdAt?: true
  }

  export type UserBehaviorMaxAggregateInputType = {
    id?: true
    userId?: true
    productId?: true
    type?: true
    createdAt?: true
  }

  export type UserBehaviorCountAggregateInputType = {
    id?: true
    userId?: true
    productId?: true
    type?: true
    createdAt?: true
    _all?: true
  }

  export type UserBehaviorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserBehavior to aggregate.
     */
    where?: UserBehaviorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserBehaviors to fetch.
     */
    orderBy?: UserBehaviorOrderByWithRelationInput | UserBehaviorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserBehaviorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserBehaviors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserBehaviors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserBehaviors
    **/
    _count?: true | UserBehaviorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserBehaviorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserBehaviorMaxAggregateInputType
  }

  export type GetUserBehaviorAggregateType<T extends UserBehaviorAggregateArgs> = {
        [P in keyof T & keyof AggregateUserBehavior]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserBehavior[P]>
      : GetScalarType<T[P], AggregateUserBehavior[P]>
  }




  export type UserBehaviorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserBehaviorWhereInput
    orderBy?: UserBehaviorOrderByWithAggregationInput | UserBehaviorOrderByWithAggregationInput[]
    by: UserBehaviorScalarFieldEnum[] | UserBehaviorScalarFieldEnum
    having?: UserBehaviorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserBehaviorCountAggregateInputType | true
    _min?: UserBehaviorMinAggregateInputType
    _max?: UserBehaviorMaxAggregateInputType
  }

  export type UserBehaviorGroupByOutputType = {
    id: string
    userId: string
    productId: string
    type: $Enums.BehaviorType
    createdAt: Date
    _count: UserBehaviorCountAggregateOutputType | null
    _min: UserBehaviorMinAggregateOutputType | null
    _max: UserBehaviorMaxAggregateOutputType | null
  }

  type GetUserBehaviorGroupByPayload<T extends UserBehaviorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserBehaviorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserBehaviorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserBehaviorGroupByOutputType[P]>
            : GetScalarType<T[P], UserBehaviorGroupByOutputType[P]>
        }
      >
    >


  export type UserBehaviorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    productId?: boolean
    type?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userBehavior"]>

  export type UserBehaviorSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    productId?: boolean
    type?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userBehavior"]>

  export type UserBehaviorSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    productId?: boolean
    type?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userBehavior"]>

  export type UserBehaviorSelectScalar = {
    id?: boolean
    userId?: boolean
    productId?: boolean
    type?: boolean
    createdAt?: boolean
  }

  export type UserBehaviorOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "productId" | "type" | "createdAt", ExtArgs["result"]["userBehavior"]>
  export type UserBehaviorInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }
  export type UserBehaviorIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }
  export type UserBehaviorIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }

  export type $UserBehaviorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserBehavior"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      product: Prisma.$ProductPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      productId: string
      type: $Enums.BehaviorType
      createdAt: Date
    }, ExtArgs["result"]["userBehavior"]>
    composites: {}
  }

  type UserBehaviorGetPayload<S extends boolean | null | undefined | UserBehaviorDefaultArgs> = $Result.GetResult<Prisma.$UserBehaviorPayload, S>

  type UserBehaviorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserBehaviorFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserBehaviorCountAggregateInputType | true
    }

  export interface UserBehaviorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserBehavior'], meta: { name: 'UserBehavior' } }
    /**
     * Find zero or one UserBehavior that matches the filter.
     * @param {UserBehaviorFindUniqueArgs} args - Arguments to find a UserBehavior
     * @example
     * // Get one UserBehavior
     * const userBehavior = await prisma.userBehavior.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserBehaviorFindUniqueArgs>(args: SelectSubset<T, UserBehaviorFindUniqueArgs<ExtArgs>>): Prisma__UserBehaviorClient<$Result.GetResult<Prisma.$UserBehaviorPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserBehavior that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserBehaviorFindUniqueOrThrowArgs} args - Arguments to find a UserBehavior
     * @example
     * // Get one UserBehavior
     * const userBehavior = await prisma.userBehavior.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserBehaviorFindUniqueOrThrowArgs>(args: SelectSubset<T, UserBehaviorFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserBehaviorClient<$Result.GetResult<Prisma.$UserBehaviorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserBehavior that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserBehaviorFindFirstArgs} args - Arguments to find a UserBehavior
     * @example
     * // Get one UserBehavior
     * const userBehavior = await prisma.userBehavior.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserBehaviorFindFirstArgs>(args?: SelectSubset<T, UserBehaviorFindFirstArgs<ExtArgs>>): Prisma__UserBehaviorClient<$Result.GetResult<Prisma.$UserBehaviorPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserBehavior that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserBehaviorFindFirstOrThrowArgs} args - Arguments to find a UserBehavior
     * @example
     * // Get one UserBehavior
     * const userBehavior = await prisma.userBehavior.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserBehaviorFindFirstOrThrowArgs>(args?: SelectSubset<T, UserBehaviorFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserBehaviorClient<$Result.GetResult<Prisma.$UserBehaviorPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserBehaviors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserBehaviorFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserBehaviors
     * const userBehaviors = await prisma.userBehavior.findMany()
     * 
     * // Get first 10 UserBehaviors
     * const userBehaviors = await prisma.userBehavior.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userBehaviorWithIdOnly = await prisma.userBehavior.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserBehaviorFindManyArgs>(args?: SelectSubset<T, UserBehaviorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserBehaviorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserBehavior.
     * @param {UserBehaviorCreateArgs} args - Arguments to create a UserBehavior.
     * @example
     * // Create one UserBehavior
     * const UserBehavior = await prisma.userBehavior.create({
     *   data: {
     *     // ... data to create a UserBehavior
     *   }
     * })
     * 
     */
    create<T extends UserBehaviorCreateArgs>(args: SelectSubset<T, UserBehaviorCreateArgs<ExtArgs>>): Prisma__UserBehaviorClient<$Result.GetResult<Prisma.$UserBehaviorPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserBehaviors.
     * @param {UserBehaviorCreateManyArgs} args - Arguments to create many UserBehaviors.
     * @example
     * // Create many UserBehaviors
     * const userBehavior = await prisma.userBehavior.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserBehaviorCreateManyArgs>(args?: SelectSubset<T, UserBehaviorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserBehaviors and returns the data saved in the database.
     * @param {UserBehaviorCreateManyAndReturnArgs} args - Arguments to create many UserBehaviors.
     * @example
     * // Create many UserBehaviors
     * const userBehavior = await prisma.userBehavior.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserBehaviors and only return the `id`
     * const userBehaviorWithIdOnly = await prisma.userBehavior.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserBehaviorCreateManyAndReturnArgs>(args?: SelectSubset<T, UserBehaviorCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserBehaviorPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UserBehavior.
     * @param {UserBehaviorDeleteArgs} args - Arguments to delete one UserBehavior.
     * @example
     * // Delete one UserBehavior
     * const UserBehavior = await prisma.userBehavior.delete({
     *   where: {
     *     // ... filter to delete one UserBehavior
     *   }
     * })
     * 
     */
    delete<T extends UserBehaviorDeleteArgs>(args: SelectSubset<T, UserBehaviorDeleteArgs<ExtArgs>>): Prisma__UserBehaviorClient<$Result.GetResult<Prisma.$UserBehaviorPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserBehavior.
     * @param {UserBehaviorUpdateArgs} args - Arguments to update one UserBehavior.
     * @example
     * // Update one UserBehavior
     * const userBehavior = await prisma.userBehavior.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserBehaviorUpdateArgs>(args: SelectSubset<T, UserBehaviorUpdateArgs<ExtArgs>>): Prisma__UserBehaviorClient<$Result.GetResult<Prisma.$UserBehaviorPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserBehaviors.
     * @param {UserBehaviorDeleteManyArgs} args - Arguments to filter UserBehaviors to delete.
     * @example
     * // Delete a few UserBehaviors
     * const { count } = await prisma.userBehavior.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserBehaviorDeleteManyArgs>(args?: SelectSubset<T, UserBehaviorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserBehaviors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserBehaviorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserBehaviors
     * const userBehavior = await prisma.userBehavior.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserBehaviorUpdateManyArgs>(args: SelectSubset<T, UserBehaviorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserBehaviors and returns the data updated in the database.
     * @param {UserBehaviorUpdateManyAndReturnArgs} args - Arguments to update many UserBehaviors.
     * @example
     * // Update many UserBehaviors
     * const userBehavior = await prisma.userBehavior.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UserBehaviors and only return the `id`
     * const userBehaviorWithIdOnly = await prisma.userBehavior.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserBehaviorUpdateManyAndReturnArgs>(args: SelectSubset<T, UserBehaviorUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserBehaviorPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UserBehavior.
     * @param {UserBehaviorUpsertArgs} args - Arguments to update or create a UserBehavior.
     * @example
     * // Update or create a UserBehavior
     * const userBehavior = await prisma.userBehavior.upsert({
     *   create: {
     *     // ... data to create a UserBehavior
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserBehavior we want to update
     *   }
     * })
     */
    upsert<T extends UserBehaviorUpsertArgs>(args: SelectSubset<T, UserBehaviorUpsertArgs<ExtArgs>>): Prisma__UserBehaviorClient<$Result.GetResult<Prisma.$UserBehaviorPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserBehaviors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserBehaviorCountArgs} args - Arguments to filter UserBehaviors to count.
     * @example
     * // Count the number of UserBehaviors
     * const count = await prisma.userBehavior.count({
     *   where: {
     *     // ... the filter for the UserBehaviors we want to count
     *   }
     * })
    **/
    count<T extends UserBehaviorCountArgs>(
      args?: Subset<T, UserBehaviorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserBehaviorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserBehavior.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserBehaviorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserBehaviorAggregateArgs>(args: Subset<T, UserBehaviorAggregateArgs>): Prisma.PrismaPromise<GetUserBehaviorAggregateType<T>>

    /**
     * Group by UserBehavior.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserBehaviorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserBehaviorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserBehaviorGroupByArgs['orderBy'] }
        : { orderBy?: UserBehaviorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserBehaviorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserBehaviorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserBehavior model
   */
  readonly fields: UserBehaviorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserBehavior.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserBehaviorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    product<T extends ProductDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProductDefaultArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserBehavior model
   */
  interface UserBehaviorFieldRefs {
    readonly id: FieldRef<"UserBehavior", 'String'>
    readonly userId: FieldRef<"UserBehavior", 'String'>
    readonly productId: FieldRef<"UserBehavior", 'String'>
    readonly type: FieldRef<"UserBehavior", 'BehaviorType'>
    readonly createdAt: FieldRef<"UserBehavior", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserBehavior findUnique
   */
  export type UserBehaviorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBehavior
     */
    select?: UserBehaviorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserBehavior
     */
    omit?: UserBehaviorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBehaviorInclude<ExtArgs> | null
    /**
     * Filter, which UserBehavior to fetch.
     */
    where: UserBehaviorWhereUniqueInput
  }

  /**
   * UserBehavior findUniqueOrThrow
   */
  export type UserBehaviorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBehavior
     */
    select?: UserBehaviorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserBehavior
     */
    omit?: UserBehaviorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBehaviorInclude<ExtArgs> | null
    /**
     * Filter, which UserBehavior to fetch.
     */
    where: UserBehaviorWhereUniqueInput
  }

  /**
   * UserBehavior findFirst
   */
  export type UserBehaviorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBehavior
     */
    select?: UserBehaviorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserBehavior
     */
    omit?: UserBehaviorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBehaviorInclude<ExtArgs> | null
    /**
     * Filter, which UserBehavior to fetch.
     */
    where?: UserBehaviorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserBehaviors to fetch.
     */
    orderBy?: UserBehaviorOrderByWithRelationInput | UserBehaviorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserBehaviors.
     */
    cursor?: UserBehaviorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserBehaviors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserBehaviors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserBehaviors.
     */
    distinct?: UserBehaviorScalarFieldEnum | UserBehaviorScalarFieldEnum[]
  }

  /**
   * UserBehavior findFirstOrThrow
   */
  export type UserBehaviorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBehavior
     */
    select?: UserBehaviorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserBehavior
     */
    omit?: UserBehaviorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBehaviorInclude<ExtArgs> | null
    /**
     * Filter, which UserBehavior to fetch.
     */
    where?: UserBehaviorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserBehaviors to fetch.
     */
    orderBy?: UserBehaviorOrderByWithRelationInput | UserBehaviorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserBehaviors.
     */
    cursor?: UserBehaviorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserBehaviors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserBehaviors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserBehaviors.
     */
    distinct?: UserBehaviorScalarFieldEnum | UserBehaviorScalarFieldEnum[]
  }

  /**
   * UserBehavior findMany
   */
  export type UserBehaviorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBehavior
     */
    select?: UserBehaviorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserBehavior
     */
    omit?: UserBehaviorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBehaviorInclude<ExtArgs> | null
    /**
     * Filter, which UserBehaviors to fetch.
     */
    where?: UserBehaviorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserBehaviors to fetch.
     */
    orderBy?: UserBehaviorOrderByWithRelationInput | UserBehaviorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserBehaviors.
     */
    cursor?: UserBehaviorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserBehaviors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserBehaviors.
     */
    skip?: number
    distinct?: UserBehaviorScalarFieldEnum | UserBehaviorScalarFieldEnum[]
  }

  /**
   * UserBehavior create
   */
  export type UserBehaviorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBehavior
     */
    select?: UserBehaviorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserBehavior
     */
    omit?: UserBehaviorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBehaviorInclude<ExtArgs> | null
    /**
     * The data needed to create a UserBehavior.
     */
    data: XOR<UserBehaviorCreateInput, UserBehaviorUncheckedCreateInput>
  }

  /**
   * UserBehavior createMany
   */
  export type UserBehaviorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserBehaviors.
     */
    data: UserBehaviorCreateManyInput | UserBehaviorCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserBehavior createManyAndReturn
   */
  export type UserBehaviorCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBehavior
     */
    select?: UserBehaviorSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserBehavior
     */
    omit?: UserBehaviorOmit<ExtArgs> | null
    /**
     * The data used to create many UserBehaviors.
     */
    data: UserBehaviorCreateManyInput | UserBehaviorCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBehaviorIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserBehavior update
   */
  export type UserBehaviorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBehavior
     */
    select?: UserBehaviorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserBehavior
     */
    omit?: UserBehaviorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBehaviorInclude<ExtArgs> | null
    /**
     * The data needed to update a UserBehavior.
     */
    data: XOR<UserBehaviorUpdateInput, UserBehaviorUncheckedUpdateInput>
    /**
     * Choose, which UserBehavior to update.
     */
    where: UserBehaviorWhereUniqueInput
  }

  /**
   * UserBehavior updateMany
   */
  export type UserBehaviorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserBehaviors.
     */
    data: XOR<UserBehaviorUpdateManyMutationInput, UserBehaviorUncheckedUpdateManyInput>
    /**
     * Filter which UserBehaviors to update
     */
    where?: UserBehaviorWhereInput
    /**
     * Limit how many UserBehaviors to update.
     */
    limit?: number
  }

  /**
   * UserBehavior updateManyAndReturn
   */
  export type UserBehaviorUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBehavior
     */
    select?: UserBehaviorSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserBehavior
     */
    omit?: UserBehaviorOmit<ExtArgs> | null
    /**
     * The data used to update UserBehaviors.
     */
    data: XOR<UserBehaviorUpdateManyMutationInput, UserBehaviorUncheckedUpdateManyInput>
    /**
     * Filter which UserBehaviors to update
     */
    where?: UserBehaviorWhereInput
    /**
     * Limit how many UserBehaviors to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBehaviorIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserBehavior upsert
   */
  export type UserBehaviorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBehavior
     */
    select?: UserBehaviorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserBehavior
     */
    omit?: UserBehaviorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBehaviorInclude<ExtArgs> | null
    /**
     * The filter to search for the UserBehavior to update in case it exists.
     */
    where: UserBehaviorWhereUniqueInput
    /**
     * In case the UserBehavior found by the `where` argument doesn't exist, create a new UserBehavior with this data.
     */
    create: XOR<UserBehaviorCreateInput, UserBehaviorUncheckedCreateInput>
    /**
     * In case the UserBehavior was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserBehaviorUpdateInput, UserBehaviorUncheckedUpdateInput>
  }

  /**
   * UserBehavior delete
   */
  export type UserBehaviorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBehavior
     */
    select?: UserBehaviorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserBehavior
     */
    omit?: UserBehaviorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBehaviorInclude<ExtArgs> | null
    /**
     * Filter which UserBehavior to delete.
     */
    where: UserBehaviorWhereUniqueInput
  }

  /**
   * UserBehavior deleteMany
   */
  export type UserBehaviorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserBehaviors to delete
     */
    where?: UserBehaviorWhereInput
    /**
     * Limit how many UserBehaviors to delete.
     */
    limit?: number
  }

  /**
   * UserBehavior without action
   */
  export type UserBehaviorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBehavior
     */
    select?: UserBehaviorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserBehavior
     */
    omit?: UserBehaviorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBehaviorInclude<ExtArgs> | null
  }


  /**
   * Model Promotion
   */

  export type AggregatePromotion = {
    _count: PromotionCountAggregateOutputType | null
    _avg: PromotionAvgAggregateOutputType | null
    _sum: PromotionSumAggregateOutputType | null
    _min: PromotionMinAggregateOutputType | null
    _max: PromotionMaxAggregateOutputType | null
  }

  export type PromotionAvgAggregateOutputType = {
    discountPercentage: number | null
  }

  export type PromotionSumAggregateOutputType = {
    discountPercentage: number | null
  }

  export type PromotionMinAggregateOutputType = {
    id: string | null
    type: $Enums.PromotionType | null
    name: string | null
    description: string | null
    startDate: Date | null
    endDate: Date | null
    discountPercentage: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PromotionMaxAggregateOutputType = {
    id: string | null
    type: $Enums.PromotionType | null
    name: string | null
    description: string | null
    startDate: Date | null
    endDate: Date | null
    discountPercentage: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PromotionCountAggregateOutputType = {
    id: number
    type: number
    name: number
    description: number
    startDate: number
    endDate: number
    discountPercentage: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PromotionAvgAggregateInputType = {
    discountPercentage?: true
  }

  export type PromotionSumAggregateInputType = {
    discountPercentage?: true
  }

  export type PromotionMinAggregateInputType = {
    id?: true
    type?: true
    name?: true
    description?: true
    startDate?: true
    endDate?: true
    discountPercentage?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PromotionMaxAggregateInputType = {
    id?: true
    type?: true
    name?: true
    description?: true
    startDate?: true
    endDate?: true
    discountPercentage?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PromotionCountAggregateInputType = {
    id?: true
    type?: true
    name?: true
    description?: true
    startDate?: true
    endDate?: true
    discountPercentage?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PromotionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Promotion to aggregate.
     */
    where?: PromotionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Promotions to fetch.
     */
    orderBy?: PromotionOrderByWithRelationInput | PromotionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PromotionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Promotions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Promotions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Promotions
    **/
    _count?: true | PromotionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PromotionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PromotionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PromotionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PromotionMaxAggregateInputType
  }

  export type GetPromotionAggregateType<T extends PromotionAggregateArgs> = {
        [P in keyof T & keyof AggregatePromotion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePromotion[P]>
      : GetScalarType<T[P], AggregatePromotion[P]>
  }




  export type PromotionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PromotionWhereInput
    orderBy?: PromotionOrderByWithAggregationInput | PromotionOrderByWithAggregationInput[]
    by: PromotionScalarFieldEnum[] | PromotionScalarFieldEnum
    having?: PromotionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PromotionCountAggregateInputType | true
    _avg?: PromotionAvgAggregateInputType
    _sum?: PromotionSumAggregateInputType
    _min?: PromotionMinAggregateInputType
    _max?: PromotionMaxAggregateInputType
  }

  export type PromotionGroupByOutputType = {
    id: string
    type: $Enums.PromotionType
    name: string
    description: string | null
    startDate: Date
    endDate: Date
    discountPercentage: number | null
    createdAt: Date
    updatedAt: Date
    _count: PromotionCountAggregateOutputType | null
    _avg: PromotionAvgAggregateOutputType | null
    _sum: PromotionSumAggregateOutputType | null
    _min: PromotionMinAggregateOutputType | null
    _max: PromotionMaxAggregateOutputType | null
  }

  type GetPromotionGroupByPayload<T extends PromotionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PromotionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PromotionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PromotionGroupByOutputType[P]>
            : GetScalarType<T[P], PromotionGroupByOutputType[P]>
        }
      >
    >


  export type PromotionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    name?: boolean
    description?: boolean
    startDate?: boolean
    endDate?: boolean
    discountPercentage?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    products?: boolean | Promotion$productsArgs<ExtArgs>
    categories?: boolean | Promotion$categoriesArgs<ExtArgs>
    _count?: boolean | PromotionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["promotion"]>

  export type PromotionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    name?: boolean
    description?: boolean
    startDate?: boolean
    endDate?: boolean
    discountPercentage?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["promotion"]>

  export type PromotionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    name?: boolean
    description?: boolean
    startDate?: boolean
    endDate?: boolean
    discountPercentage?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["promotion"]>

  export type PromotionSelectScalar = {
    id?: boolean
    type?: boolean
    name?: boolean
    description?: boolean
    startDate?: boolean
    endDate?: boolean
    discountPercentage?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PromotionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "type" | "name" | "description" | "startDate" | "endDate" | "discountPercentage" | "createdAt" | "updatedAt", ExtArgs["result"]["promotion"]>
  export type PromotionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    products?: boolean | Promotion$productsArgs<ExtArgs>
    categories?: boolean | Promotion$categoriesArgs<ExtArgs>
    _count?: boolean | PromotionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PromotionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type PromotionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $PromotionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Promotion"
    objects: {
      products: Prisma.$PromotionProductPayload<ExtArgs>[]
      categories: Prisma.$PromotionCategoryPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      type: $Enums.PromotionType
      name: string
      description: string | null
      startDate: Date
      endDate: Date
      discountPercentage: number | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["promotion"]>
    composites: {}
  }

  type PromotionGetPayload<S extends boolean | null | undefined | PromotionDefaultArgs> = $Result.GetResult<Prisma.$PromotionPayload, S>

  type PromotionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PromotionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PromotionCountAggregateInputType | true
    }

  export interface PromotionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Promotion'], meta: { name: 'Promotion' } }
    /**
     * Find zero or one Promotion that matches the filter.
     * @param {PromotionFindUniqueArgs} args - Arguments to find a Promotion
     * @example
     * // Get one Promotion
     * const promotion = await prisma.promotion.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PromotionFindUniqueArgs>(args: SelectSubset<T, PromotionFindUniqueArgs<ExtArgs>>): Prisma__PromotionClient<$Result.GetResult<Prisma.$PromotionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Promotion that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PromotionFindUniqueOrThrowArgs} args - Arguments to find a Promotion
     * @example
     * // Get one Promotion
     * const promotion = await prisma.promotion.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PromotionFindUniqueOrThrowArgs>(args: SelectSubset<T, PromotionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PromotionClient<$Result.GetResult<Prisma.$PromotionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Promotion that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromotionFindFirstArgs} args - Arguments to find a Promotion
     * @example
     * // Get one Promotion
     * const promotion = await prisma.promotion.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PromotionFindFirstArgs>(args?: SelectSubset<T, PromotionFindFirstArgs<ExtArgs>>): Prisma__PromotionClient<$Result.GetResult<Prisma.$PromotionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Promotion that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromotionFindFirstOrThrowArgs} args - Arguments to find a Promotion
     * @example
     * // Get one Promotion
     * const promotion = await prisma.promotion.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PromotionFindFirstOrThrowArgs>(args?: SelectSubset<T, PromotionFindFirstOrThrowArgs<ExtArgs>>): Prisma__PromotionClient<$Result.GetResult<Prisma.$PromotionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Promotions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromotionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Promotions
     * const promotions = await prisma.promotion.findMany()
     * 
     * // Get first 10 Promotions
     * const promotions = await prisma.promotion.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const promotionWithIdOnly = await prisma.promotion.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PromotionFindManyArgs>(args?: SelectSubset<T, PromotionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PromotionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Promotion.
     * @param {PromotionCreateArgs} args - Arguments to create a Promotion.
     * @example
     * // Create one Promotion
     * const Promotion = await prisma.promotion.create({
     *   data: {
     *     // ... data to create a Promotion
     *   }
     * })
     * 
     */
    create<T extends PromotionCreateArgs>(args: SelectSubset<T, PromotionCreateArgs<ExtArgs>>): Prisma__PromotionClient<$Result.GetResult<Prisma.$PromotionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Promotions.
     * @param {PromotionCreateManyArgs} args - Arguments to create many Promotions.
     * @example
     * // Create many Promotions
     * const promotion = await prisma.promotion.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PromotionCreateManyArgs>(args?: SelectSubset<T, PromotionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Promotions and returns the data saved in the database.
     * @param {PromotionCreateManyAndReturnArgs} args - Arguments to create many Promotions.
     * @example
     * // Create many Promotions
     * const promotion = await prisma.promotion.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Promotions and only return the `id`
     * const promotionWithIdOnly = await prisma.promotion.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PromotionCreateManyAndReturnArgs>(args?: SelectSubset<T, PromotionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PromotionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Promotion.
     * @param {PromotionDeleteArgs} args - Arguments to delete one Promotion.
     * @example
     * // Delete one Promotion
     * const Promotion = await prisma.promotion.delete({
     *   where: {
     *     // ... filter to delete one Promotion
     *   }
     * })
     * 
     */
    delete<T extends PromotionDeleteArgs>(args: SelectSubset<T, PromotionDeleteArgs<ExtArgs>>): Prisma__PromotionClient<$Result.GetResult<Prisma.$PromotionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Promotion.
     * @param {PromotionUpdateArgs} args - Arguments to update one Promotion.
     * @example
     * // Update one Promotion
     * const promotion = await prisma.promotion.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PromotionUpdateArgs>(args: SelectSubset<T, PromotionUpdateArgs<ExtArgs>>): Prisma__PromotionClient<$Result.GetResult<Prisma.$PromotionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Promotions.
     * @param {PromotionDeleteManyArgs} args - Arguments to filter Promotions to delete.
     * @example
     * // Delete a few Promotions
     * const { count } = await prisma.promotion.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PromotionDeleteManyArgs>(args?: SelectSubset<T, PromotionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Promotions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromotionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Promotions
     * const promotion = await prisma.promotion.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PromotionUpdateManyArgs>(args: SelectSubset<T, PromotionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Promotions and returns the data updated in the database.
     * @param {PromotionUpdateManyAndReturnArgs} args - Arguments to update many Promotions.
     * @example
     * // Update many Promotions
     * const promotion = await prisma.promotion.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Promotions and only return the `id`
     * const promotionWithIdOnly = await prisma.promotion.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PromotionUpdateManyAndReturnArgs>(args: SelectSubset<T, PromotionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PromotionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Promotion.
     * @param {PromotionUpsertArgs} args - Arguments to update or create a Promotion.
     * @example
     * // Update or create a Promotion
     * const promotion = await prisma.promotion.upsert({
     *   create: {
     *     // ... data to create a Promotion
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Promotion we want to update
     *   }
     * })
     */
    upsert<T extends PromotionUpsertArgs>(args: SelectSubset<T, PromotionUpsertArgs<ExtArgs>>): Prisma__PromotionClient<$Result.GetResult<Prisma.$PromotionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Promotions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromotionCountArgs} args - Arguments to filter Promotions to count.
     * @example
     * // Count the number of Promotions
     * const count = await prisma.promotion.count({
     *   where: {
     *     // ... the filter for the Promotions we want to count
     *   }
     * })
    **/
    count<T extends PromotionCountArgs>(
      args?: Subset<T, PromotionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PromotionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Promotion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromotionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PromotionAggregateArgs>(args: Subset<T, PromotionAggregateArgs>): Prisma.PrismaPromise<GetPromotionAggregateType<T>>

    /**
     * Group by Promotion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromotionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PromotionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PromotionGroupByArgs['orderBy'] }
        : { orderBy?: PromotionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PromotionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPromotionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Promotion model
   */
  readonly fields: PromotionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Promotion.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PromotionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    products<T extends Promotion$productsArgs<ExtArgs> = {}>(args?: Subset<T, Promotion$productsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PromotionProductPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    categories<T extends Promotion$categoriesArgs<ExtArgs> = {}>(args?: Subset<T, Promotion$categoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PromotionCategoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Promotion model
   */
  interface PromotionFieldRefs {
    readonly id: FieldRef<"Promotion", 'String'>
    readonly type: FieldRef<"Promotion", 'PromotionType'>
    readonly name: FieldRef<"Promotion", 'String'>
    readonly description: FieldRef<"Promotion", 'String'>
    readonly startDate: FieldRef<"Promotion", 'DateTime'>
    readonly endDate: FieldRef<"Promotion", 'DateTime'>
    readonly discountPercentage: FieldRef<"Promotion", 'Float'>
    readonly createdAt: FieldRef<"Promotion", 'DateTime'>
    readonly updatedAt: FieldRef<"Promotion", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Promotion findUnique
   */
  export type PromotionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Promotion
     */
    select?: PromotionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Promotion
     */
    omit?: PromotionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PromotionInclude<ExtArgs> | null
    /**
     * Filter, which Promotion to fetch.
     */
    where: PromotionWhereUniqueInput
  }

  /**
   * Promotion findUniqueOrThrow
   */
  export type PromotionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Promotion
     */
    select?: PromotionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Promotion
     */
    omit?: PromotionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PromotionInclude<ExtArgs> | null
    /**
     * Filter, which Promotion to fetch.
     */
    where: PromotionWhereUniqueInput
  }

  /**
   * Promotion findFirst
   */
  export type PromotionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Promotion
     */
    select?: PromotionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Promotion
     */
    omit?: PromotionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PromotionInclude<ExtArgs> | null
    /**
     * Filter, which Promotion to fetch.
     */
    where?: PromotionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Promotions to fetch.
     */
    orderBy?: PromotionOrderByWithRelationInput | PromotionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Promotions.
     */
    cursor?: PromotionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Promotions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Promotions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Promotions.
     */
    distinct?: PromotionScalarFieldEnum | PromotionScalarFieldEnum[]
  }

  /**
   * Promotion findFirstOrThrow
   */
  export type PromotionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Promotion
     */
    select?: PromotionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Promotion
     */
    omit?: PromotionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PromotionInclude<ExtArgs> | null
    /**
     * Filter, which Promotion to fetch.
     */
    where?: PromotionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Promotions to fetch.
     */
    orderBy?: PromotionOrderByWithRelationInput | PromotionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Promotions.
     */
    cursor?: PromotionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Promotions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Promotions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Promotions.
     */
    distinct?: PromotionScalarFieldEnum | PromotionScalarFieldEnum[]
  }

  /**
   * Promotion findMany
   */
  export type PromotionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Promotion
     */
    select?: PromotionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Promotion
     */
    omit?: PromotionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PromotionInclude<ExtArgs> | null
    /**
     * Filter, which Promotions to fetch.
     */
    where?: PromotionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Promotions to fetch.
     */
    orderBy?: PromotionOrderByWithRelationInput | PromotionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Promotions.
     */
    cursor?: PromotionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Promotions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Promotions.
     */
    skip?: number
    distinct?: PromotionScalarFieldEnum | PromotionScalarFieldEnum[]
  }

  /**
   * Promotion create
   */
  export type PromotionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Promotion
     */
    select?: PromotionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Promotion
     */
    omit?: PromotionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PromotionInclude<ExtArgs> | null
    /**
     * The data needed to create a Promotion.
     */
    data: XOR<PromotionCreateInput, PromotionUncheckedCreateInput>
  }

  /**
   * Promotion createMany
   */
  export type PromotionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Promotions.
     */
    data: PromotionCreateManyInput | PromotionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Promotion createManyAndReturn
   */
  export type PromotionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Promotion
     */
    select?: PromotionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Promotion
     */
    omit?: PromotionOmit<ExtArgs> | null
    /**
     * The data used to create many Promotions.
     */
    data: PromotionCreateManyInput | PromotionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Promotion update
   */
  export type PromotionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Promotion
     */
    select?: PromotionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Promotion
     */
    omit?: PromotionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PromotionInclude<ExtArgs> | null
    /**
     * The data needed to update a Promotion.
     */
    data: XOR<PromotionUpdateInput, PromotionUncheckedUpdateInput>
    /**
     * Choose, which Promotion to update.
     */
    where: PromotionWhereUniqueInput
  }

  /**
   * Promotion updateMany
   */
  export type PromotionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Promotions.
     */
    data: XOR<PromotionUpdateManyMutationInput, PromotionUncheckedUpdateManyInput>
    /**
     * Filter which Promotions to update
     */
    where?: PromotionWhereInput
    /**
     * Limit how many Promotions to update.
     */
    limit?: number
  }

  /**
   * Promotion updateManyAndReturn
   */
  export type PromotionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Promotion
     */
    select?: PromotionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Promotion
     */
    omit?: PromotionOmit<ExtArgs> | null
    /**
     * The data used to update Promotions.
     */
    data: XOR<PromotionUpdateManyMutationInput, PromotionUncheckedUpdateManyInput>
    /**
     * Filter which Promotions to update
     */
    where?: PromotionWhereInput
    /**
     * Limit how many Promotions to update.
     */
    limit?: number
  }

  /**
   * Promotion upsert
   */
  export type PromotionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Promotion
     */
    select?: PromotionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Promotion
     */
    omit?: PromotionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PromotionInclude<ExtArgs> | null
    /**
     * The filter to search for the Promotion to update in case it exists.
     */
    where: PromotionWhereUniqueInput
    /**
     * In case the Promotion found by the `where` argument doesn't exist, create a new Promotion with this data.
     */
    create: XOR<PromotionCreateInput, PromotionUncheckedCreateInput>
    /**
     * In case the Promotion was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PromotionUpdateInput, PromotionUncheckedUpdateInput>
  }

  /**
   * Promotion delete
   */
  export type PromotionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Promotion
     */
    select?: PromotionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Promotion
     */
    omit?: PromotionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PromotionInclude<ExtArgs> | null
    /**
     * Filter which Promotion to delete.
     */
    where: PromotionWhereUniqueInput
  }

  /**
   * Promotion deleteMany
   */
  export type PromotionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Promotions to delete
     */
    where?: PromotionWhereInput
    /**
     * Limit how many Promotions to delete.
     */
    limit?: number
  }

  /**
   * Promotion.products
   */
  export type Promotion$productsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PromotionProduct
     */
    select?: PromotionProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PromotionProduct
     */
    omit?: PromotionProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PromotionProductInclude<ExtArgs> | null
    where?: PromotionProductWhereInput
    orderBy?: PromotionProductOrderByWithRelationInput | PromotionProductOrderByWithRelationInput[]
    cursor?: PromotionProductWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PromotionProductScalarFieldEnum | PromotionProductScalarFieldEnum[]
  }

  /**
   * Promotion.categories
   */
  export type Promotion$categoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PromotionCategory
     */
    select?: PromotionCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PromotionCategory
     */
    omit?: PromotionCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PromotionCategoryInclude<ExtArgs> | null
    where?: PromotionCategoryWhereInput
    orderBy?: PromotionCategoryOrderByWithRelationInput | PromotionCategoryOrderByWithRelationInput[]
    cursor?: PromotionCategoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PromotionCategoryScalarFieldEnum | PromotionCategoryScalarFieldEnum[]
  }

  /**
   * Promotion without action
   */
  export type PromotionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Promotion
     */
    select?: PromotionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Promotion
     */
    omit?: PromotionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PromotionInclude<ExtArgs> | null
  }


  /**
   * Model PromotionProduct
   */

  export type AggregatePromotionProduct = {
    _count: PromotionProductCountAggregateOutputType | null
    _avg: PromotionProductAvgAggregateOutputType | null
    _sum: PromotionProductSumAggregateOutputType | null
    _min: PromotionProductMinAggregateOutputType | null
    _max: PromotionProductMaxAggregateOutputType | null
  }

  export type PromotionProductAvgAggregateOutputType = {
    discountPercentage: number | null
    quantity: number | null
    soldQuantity: number | null
  }

  export type PromotionProductSumAggregateOutputType = {
    discountPercentage: number | null
    quantity: number | null
    soldQuantity: number | null
  }

  export type PromotionProductMinAggregateOutputType = {
    id: string | null
    promotionId: string | null
    productId: string | null
    discountPercentage: number | null
    quantity: number | null
    soldQuantity: number | null
  }

  export type PromotionProductMaxAggregateOutputType = {
    id: string | null
    promotionId: string | null
    productId: string | null
    discountPercentage: number | null
    quantity: number | null
    soldQuantity: number | null
  }

  export type PromotionProductCountAggregateOutputType = {
    id: number
    promotionId: number
    productId: number
    discountPercentage: number
    quantity: number
    soldQuantity: number
    _all: number
  }


  export type PromotionProductAvgAggregateInputType = {
    discountPercentage?: true
    quantity?: true
    soldQuantity?: true
  }

  export type PromotionProductSumAggregateInputType = {
    discountPercentage?: true
    quantity?: true
    soldQuantity?: true
  }

  export type PromotionProductMinAggregateInputType = {
    id?: true
    promotionId?: true
    productId?: true
    discountPercentage?: true
    quantity?: true
    soldQuantity?: true
  }

  export type PromotionProductMaxAggregateInputType = {
    id?: true
    promotionId?: true
    productId?: true
    discountPercentage?: true
    quantity?: true
    soldQuantity?: true
  }

  export type PromotionProductCountAggregateInputType = {
    id?: true
    promotionId?: true
    productId?: true
    discountPercentage?: true
    quantity?: true
    soldQuantity?: true
    _all?: true
  }

  export type PromotionProductAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PromotionProduct to aggregate.
     */
    where?: PromotionProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PromotionProducts to fetch.
     */
    orderBy?: PromotionProductOrderByWithRelationInput | PromotionProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PromotionProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PromotionProducts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PromotionProducts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PromotionProducts
    **/
    _count?: true | PromotionProductCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PromotionProductAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PromotionProductSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PromotionProductMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PromotionProductMaxAggregateInputType
  }

  export type GetPromotionProductAggregateType<T extends PromotionProductAggregateArgs> = {
        [P in keyof T & keyof AggregatePromotionProduct]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePromotionProduct[P]>
      : GetScalarType<T[P], AggregatePromotionProduct[P]>
  }




  export type PromotionProductGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PromotionProductWhereInput
    orderBy?: PromotionProductOrderByWithAggregationInput | PromotionProductOrderByWithAggregationInput[]
    by: PromotionProductScalarFieldEnum[] | PromotionProductScalarFieldEnum
    having?: PromotionProductScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PromotionProductCountAggregateInputType | true
    _avg?: PromotionProductAvgAggregateInputType
    _sum?: PromotionProductSumAggregateInputType
    _min?: PromotionProductMinAggregateInputType
    _max?: PromotionProductMaxAggregateInputType
  }

  export type PromotionProductGroupByOutputType = {
    id: string
    promotionId: string
    productId: string
    discountPercentage: number
    quantity: number | null
    soldQuantity: number | null
    _count: PromotionProductCountAggregateOutputType | null
    _avg: PromotionProductAvgAggregateOutputType | null
    _sum: PromotionProductSumAggregateOutputType | null
    _min: PromotionProductMinAggregateOutputType | null
    _max: PromotionProductMaxAggregateOutputType | null
  }

  type GetPromotionProductGroupByPayload<T extends PromotionProductGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PromotionProductGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PromotionProductGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PromotionProductGroupByOutputType[P]>
            : GetScalarType<T[P], PromotionProductGroupByOutputType[P]>
        }
      >
    >


  export type PromotionProductSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    promotionId?: boolean
    productId?: boolean
    discountPercentage?: boolean
    quantity?: boolean
    soldQuantity?: boolean
    promotion?: boolean | PromotionDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["promotionProduct"]>

  export type PromotionProductSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    promotionId?: boolean
    productId?: boolean
    discountPercentage?: boolean
    quantity?: boolean
    soldQuantity?: boolean
    promotion?: boolean | PromotionDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["promotionProduct"]>

  export type PromotionProductSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    promotionId?: boolean
    productId?: boolean
    discountPercentage?: boolean
    quantity?: boolean
    soldQuantity?: boolean
    promotion?: boolean | PromotionDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["promotionProduct"]>

  export type PromotionProductSelectScalar = {
    id?: boolean
    promotionId?: boolean
    productId?: boolean
    discountPercentage?: boolean
    quantity?: boolean
    soldQuantity?: boolean
  }

  export type PromotionProductOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "promotionId" | "productId" | "discountPercentage" | "quantity" | "soldQuantity", ExtArgs["result"]["promotionProduct"]>
  export type PromotionProductInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    promotion?: boolean | PromotionDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }
  export type PromotionProductIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    promotion?: boolean | PromotionDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }
  export type PromotionProductIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    promotion?: boolean | PromotionDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }

  export type $PromotionProductPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PromotionProduct"
    objects: {
      promotion: Prisma.$PromotionPayload<ExtArgs>
      product: Prisma.$ProductPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      promotionId: string
      productId: string
      discountPercentage: number
      quantity: number | null
      soldQuantity: number | null
    }, ExtArgs["result"]["promotionProduct"]>
    composites: {}
  }

  type PromotionProductGetPayload<S extends boolean | null | undefined | PromotionProductDefaultArgs> = $Result.GetResult<Prisma.$PromotionProductPayload, S>

  type PromotionProductCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PromotionProductFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PromotionProductCountAggregateInputType | true
    }

  export interface PromotionProductDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PromotionProduct'], meta: { name: 'PromotionProduct' } }
    /**
     * Find zero or one PromotionProduct that matches the filter.
     * @param {PromotionProductFindUniqueArgs} args - Arguments to find a PromotionProduct
     * @example
     * // Get one PromotionProduct
     * const promotionProduct = await prisma.promotionProduct.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PromotionProductFindUniqueArgs>(args: SelectSubset<T, PromotionProductFindUniqueArgs<ExtArgs>>): Prisma__PromotionProductClient<$Result.GetResult<Prisma.$PromotionProductPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PromotionProduct that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PromotionProductFindUniqueOrThrowArgs} args - Arguments to find a PromotionProduct
     * @example
     * // Get one PromotionProduct
     * const promotionProduct = await prisma.promotionProduct.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PromotionProductFindUniqueOrThrowArgs>(args: SelectSubset<T, PromotionProductFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PromotionProductClient<$Result.GetResult<Prisma.$PromotionProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PromotionProduct that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromotionProductFindFirstArgs} args - Arguments to find a PromotionProduct
     * @example
     * // Get one PromotionProduct
     * const promotionProduct = await prisma.promotionProduct.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PromotionProductFindFirstArgs>(args?: SelectSubset<T, PromotionProductFindFirstArgs<ExtArgs>>): Prisma__PromotionProductClient<$Result.GetResult<Prisma.$PromotionProductPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PromotionProduct that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromotionProductFindFirstOrThrowArgs} args - Arguments to find a PromotionProduct
     * @example
     * // Get one PromotionProduct
     * const promotionProduct = await prisma.promotionProduct.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PromotionProductFindFirstOrThrowArgs>(args?: SelectSubset<T, PromotionProductFindFirstOrThrowArgs<ExtArgs>>): Prisma__PromotionProductClient<$Result.GetResult<Prisma.$PromotionProductPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PromotionProducts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromotionProductFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PromotionProducts
     * const promotionProducts = await prisma.promotionProduct.findMany()
     * 
     * // Get first 10 PromotionProducts
     * const promotionProducts = await prisma.promotionProduct.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const promotionProductWithIdOnly = await prisma.promotionProduct.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PromotionProductFindManyArgs>(args?: SelectSubset<T, PromotionProductFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PromotionProductPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PromotionProduct.
     * @param {PromotionProductCreateArgs} args - Arguments to create a PromotionProduct.
     * @example
     * // Create one PromotionProduct
     * const PromotionProduct = await prisma.promotionProduct.create({
     *   data: {
     *     // ... data to create a PromotionProduct
     *   }
     * })
     * 
     */
    create<T extends PromotionProductCreateArgs>(args: SelectSubset<T, PromotionProductCreateArgs<ExtArgs>>): Prisma__PromotionProductClient<$Result.GetResult<Prisma.$PromotionProductPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PromotionProducts.
     * @param {PromotionProductCreateManyArgs} args - Arguments to create many PromotionProducts.
     * @example
     * // Create many PromotionProducts
     * const promotionProduct = await prisma.promotionProduct.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PromotionProductCreateManyArgs>(args?: SelectSubset<T, PromotionProductCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PromotionProducts and returns the data saved in the database.
     * @param {PromotionProductCreateManyAndReturnArgs} args - Arguments to create many PromotionProducts.
     * @example
     * // Create many PromotionProducts
     * const promotionProduct = await prisma.promotionProduct.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PromotionProducts and only return the `id`
     * const promotionProductWithIdOnly = await prisma.promotionProduct.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PromotionProductCreateManyAndReturnArgs>(args?: SelectSubset<T, PromotionProductCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PromotionProductPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PromotionProduct.
     * @param {PromotionProductDeleteArgs} args - Arguments to delete one PromotionProduct.
     * @example
     * // Delete one PromotionProduct
     * const PromotionProduct = await prisma.promotionProduct.delete({
     *   where: {
     *     // ... filter to delete one PromotionProduct
     *   }
     * })
     * 
     */
    delete<T extends PromotionProductDeleteArgs>(args: SelectSubset<T, PromotionProductDeleteArgs<ExtArgs>>): Prisma__PromotionProductClient<$Result.GetResult<Prisma.$PromotionProductPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PromotionProduct.
     * @param {PromotionProductUpdateArgs} args - Arguments to update one PromotionProduct.
     * @example
     * // Update one PromotionProduct
     * const promotionProduct = await prisma.promotionProduct.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PromotionProductUpdateArgs>(args: SelectSubset<T, PromotionProductUpdateArgs<ExtArgs>>): Prisma__PromotionProductClient<$Result.GetResult<Prisma.$PromotionProductPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PromotionProducts.
     * @param {PromotionProductDeleteManyArgs} args - Arguments to filter PromotionProducts to delete.
     * @example
     * // Delete a few PromotionProducts
     * const { count } = await prisma.promotionProduct.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PromotionProductDeleteManyArgs>(args?: SelectSubset<T, PromotionProductDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PromotionProducts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromotionProductUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PromotionProducts
     * const promotionProduct = await prisma.promotionProduct.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PromotionProductUpdateManyArgs>(args: SelectSubset<T, PromotionProductUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PromotionProducts and returns the data updated in the database.
     * @param {PromotionProductUpdateManyAndReturnArgs} args - Arguments to update many PromotionProducts.
     * @example
     * // Update many PromotionProducts
     * const promotionProduct = await prisma.promotionProduct.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PromotionProducts and only return the `id`
     * const promotionProductWithIdOnly = await prisma.promotionProduct.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PromotionProductUpdateManyAndReturnArgs>(args: SelectSubset<T, PromotionProductUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PromotionProductPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PromotionProduct.
     * @param {PromotionProductUpsertArgs} args - Arguments to update or create a PromotionProduct.
     * @example
     * // Update or create a PromotionProduct
     * const promotionProduct = await prisma.promotionProduct.upsert({
     *   create: {
     *     // ... data to create a PromotionProduct
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PromotionProduct we want to update
     *   }
     * })
     */
    upsert<T extends PromotionProductUpsertArgs>(args: SelectSubset<T, PromotionProductUpsertArgs<ExtArgs>>): Prisma__PromotionProductClient<$Result.GetResult<Prisma.$PromotionProductPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PromotionProducts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromotionProductCountArgs} args - Arguments to filter PromotionProducts to count.
     * @example
     * // Count the number of PromotionProducts
     * const count = await prisma.promotionProduct.count({
     *   where: {
     *     // ... the filter for the PromotionProducts we want to count
     *   }
     * })
    **/
    count<T extends PromotionProductCountArgs>(
      args?: Subset<T, PromotionProductCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PromotionProductCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PromotionProduct.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromotionProductAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PromotionProductAggregateArgs>(args: Subset<T, PromotionProductAggregateArgs>): Prisma.PrismaPromise<GetPromotionProductAggregateType<T>>

    /**
     * Group by PromotionProduct.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromotionProductGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PromotionProductGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PromotionProductGroupByArgs['orderBy'] }
        : { orderBy?: PromotionProductGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PromotionProductGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPromotionProductGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PromotionProduct model
   */
  readonly fields: PromotionProductFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PromotionProduct.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PromotionProductClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    promotion<T extends PromotionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PromotionDefaultArgs<ExtArgs>>): Prisma__PromotionClient<$Result.GetResult<Prisma.$PromotionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    product<T extends ProductDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProductDefaultArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PromotionProduct model
   */
  interface PromotionProductFieldRefs {
    readonly id: FieldRef<"PromotionProduct", 'String'>
    readonly promotionId: FieldRef<"PromotionProduct", 'String'>
    readonly productId: FieldRef<"PromotionProduct", 'String'>
    readonly discountPercentage: FieldRef<"PromotionProduct", 'Float'>
    readonly quantity: FieldRef<"PromotionProduct", 'Int'>
    readonly soldQuantity: FieldRef<"PromotionProduct", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * PromotionProduct findUnique
   */
  export type PromotionProductFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PromotionProduct
     */
    select?: PromotionProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PromotionProduct
     */
    omit?: PromotionProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PromotionProductInclude<ExtArgs> | null
    /**
     * Filter, which PromotionProduct to fetch.
     */
    where: PromotionProductWhereUniqueInput
  }

  /**
   * PromotionProduct findUniqueOrThrow
   */
  export type PromotionProductFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PromotionProduct
     */
    select?: PromotionProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PromotionProduct
     */
    omit?: PromotionProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PromotionProductInclude<ExtArgs> | null
    /**
     * Filter, which PromotionProduct to fetch.
     */
    where: PromotionProductWhereUniqueInput
  }

  /**
   * PromotionProduct findFirst
   */
  export type PromotionProductFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PromotionProduct
     */
    select?: PromotionProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PromotionProduct
     */
    omit?: PromotionProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PromotionProductInclude<ExtArgs> | null
    /**
     * Filter, which PromotionProduct to fetch.
     */
    where?: PromotionProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PromotionProducts to fetch.
     */
    orderBy?: PromotionProductOrderByWithRelationInput | PromotionProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PromotionProducts.
     */
    cursor?: PromotionProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PromotionProducts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PromotionProducts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PromotionProducts.
     */
    distinct?: PromotionProductScalarFieldEnum | PromotionProductScalarFieldEnum[]
  }

  /**
   * PromotionProduct findFirstOrThrow
   */
  export type PromotionProductFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PromotionProduct
     */
    select?: PromotionProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PromotionProduct
     */
    omit?: PromotionProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PromotionProductInclude<ExtArgs> | null
    /**
     * Filter, which PromotionProduct to fetch.
     */
    where?: PromotionProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PromotionProducts to fetch.
     */
    orderBy?: PromotionProductOrderByWithRelationInput | PromotionProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PromotionProducts.
     */
    cursor?: PromotionProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PromotionProducts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PromotionProducts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PromotionProducts.
     */
    distinct?: PromotionProductScalarFieldEnum | PromotionProductScalarFieldEnum[]
  }

  /**
   * PromotionProduct findMany
   */
  export type PromotionProductFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PromotionProduct
     */
    select?: PromotionProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PromotionProduct
     */
    omit?: PromotionProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PromotionProductInclude<ExtArgs> | null
    /**
     * Filter, which PromotionProducts to fetch.
     */
    where?: PromotionProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PromotionProducts to fetch.
     */
    orderBy?: PromotionProductOrderByWithRelationInput | PromotionProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PromotionProducts.
     */
    cursor?: PromotionProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PromotionProducts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PromotionProducts.
     */
    skip?: number
    distinct?: PromotionProductScalarFieldEnum | PromotionProductScalarFieldEnum[]
  }

  /**
   * PromotionProduct create
   */
  export type PromotionProductCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PromotionProduct
     */
    select?: PromotionProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PromotionProduct
     */
    omit?: PromotionProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PromotionProductInclude<ExtArgs> | null
    /**
     * The data needed to create a PromotionProduct.
     */
    data: XOR<PromotionProductCreateInput, PromotionProductUncheckedCreateInput>
  }

  /**
   * PromotionProduct createMany
   */
  export type PromotionProductCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PromotionProducts.
     */
    data: PromotionProductCreateManyInput | PromotionProductCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PromotionProduct createManyAndReturn
   */
  export type PromotionProductCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PromotionProduct
     */
    select?: PromotionProductSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PromotionProduct
     */
    omit?: PromotionProductOmit<ExtArgs> | null
    /**
     * The data used to create many PromotionProducts.
     */
    data: PromotionProductCreateManyInput | PromotionProductCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PromotionProductIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PromotionProduct update
   */
  export type PromotionProductUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PromotionProduct
     */
    select?: PromotionProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PromotionProduct
     */
    omit?: PromotionProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PromotionProductInclude<ExtArgs> | null
    /**
     * The data needed to update a PromotionProduct.
     */
    data: XOR<PromotionProductUpdateInput, PromotionProductUncheckedUpdateInput>
    /**
     * Choose, which PromotionProduct to update.
     */
    where: PromotionProductWhereUniqueInput
  }

  /**
   * PromotionProduct updateMany
   */
  export type PromotionProductUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PromotionProducts.
     */
    data: XOR<PromotionProductUpdateManyMutationInput, PromotionProductUncheckedUpdateManyInput>
    /**
     * Filter which PromotionProducts to update
     */
    where?: PromotionProductWhereInput
    /**
     * Limit how many PromotionProducts to update.
     */
    limit?: number
  }

  /**
   * PromotionProduct updateManyAndReturn
   */
  export type PromotionProductUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PromotionProduct
     */
    select?: PromotionProductSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PromotionProduct
     */
    omit?: PromotionProductOmit<ExtArgs> | null
    /**
     * The data used to update PromotionProducts.
     */
    data: XOR<PromotionProductUpdateManyMutationInput, PromotionProductUncheckedUpdateManyInput>
    /**
     * Filter which PromotionProducts to update
     */
    where?: PromotionProductWhereInput
    /**
     * Limit how many PromotionProducts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PromotionProductIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PromotionProduct upsert
   */
  export type PromotionProductUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PromotionProduct
     */
    select?: PromotionProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PromotionProduct
     */
    omit?: PromotionProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PromotionProductInclude<ExtArgs> | null
    /**
     * The filter to search for the PromotionProduct to update in case it exists.
     */
    where: PromotionProductWhereUniqueInput
    /**
     * In case the PromotionProduct found by the `where` argument doesn't exist, create a new PromotionProduct with this data.
     */
    create: XOR<PromotionProductCreateInput, PromotionProductUncheckedCreateInput>
    /**
     * In case the PromotionProduct was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PromotionProductUpdateInput, PromotionProductUncheckedUpdateInput>
  }

  /**
   * PromotionProduct delete
   */
  export type PromotionProductDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PromotionProduct
     */
    select?: PromotionProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PromotionProduct
     */
    omit?: PromotionProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PromotionProductInclude<ExtArgs> | null
    /**
     * Filter which PromotionProduct to delete.
     */
    where: PromotionProductWhereUniqueInput
  }

  /**
   * PromotionProduct deleteMany
   */
  export type PromotionProductDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PromotionProducts to delete
     */
    where?: PromotionProductWhereInput
    /**
     * Limit how many PromotionProducts to delete.
     */
    limit?: number
  }

  /**
   * PromotionProduct without action
   */
  export type PromotionProductDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PromotionProduct
     */
    select?: PromotionProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PromotionProduct
     */
    omit?: PromotionProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PromotionProductInclude<ExtArgs> | null
  }


  /**
   * Model PromotionCategory
   */

  export type AggregatePromotionCategory = {
    _count: PromotionCategoryCountAggregateOutputType | null
    _min: PromotionCategoryMinAggregateOutputType | null
    _max: PromotionCategoryMaxAggregateOutputType | null
  }

  export type PromotionCategoryMinAggregateOutputType = {
    id: string | null
    promotionId: string | null
    categoryId: string | null
  }

  export type PromotionCategoryMaxAggregateOutputType = {
    id: string | null
    promotionId: string | null
    categoryId: string | null
  }

  export type PromotionCategoryCountAggregateOutputType = {
    id: number
    promotionId: number
    categoryId: number
    _all: number
  }


  export type PromotionCategoryMinAggregateInputType = {
    id?: true
    promotionId?: true
    categoryId?: true
  }

  export type PromotionCategoryMaxAggregateInputType = {
    id?: true
    promotionId?: true
    categoryId?: true
  }

  export type PromotionCategoryCountAggregateInputType = {
    id?: true
    promotionId?: true
    categoryId?: true
    _all?: true
  }

  export type PromotionCategoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PromotionCategory to aggregate.
     */
    where?: PromotionCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PromotionCategories to fetch.
     */
    orderBy?: PromotionCategoryOrderByWithRelationInput | PromotionCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PromotionCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PromotionCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PromotionCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PromotionCategories
    **/
    _count?: true | PromotionCategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PromotionCategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PromotionCategoryMaxAggregateInputType
  }

  export type GetPromotionCategoryAggregateType<T extends PromotionCategoryAggregateArgs> = {
        [P in keyof T & keyof AggregatePromotionCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePromotionCategory[P]>
      : GetScalarType<T[P], AggregatePromotionCategory[P]>
  }




  export type PromotionCategoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PromotionCategoryWhereInput
    orderBy?: PromotionCategoryOrderByWithAggregationInput | PromotionCategoryOrderByWithAggregationInput[]
    by: PromotionCategoryScalarFieldEnum[] | PromotionCategoryScalarFieldEnum
    having?: PromotionCategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PromotionCategoryCountAggregateInputType | true
    _min?: PromotionCategoryMinAggregateInputType
    _max?: PromotionCategoryMaxAggregateInputType
  }

  export type PromotionCategoryGroupByOutputType = {
    id: string
    promotionId: string
    categoryId: string
    _count: PromotionCategoryCountAggregateOutputType | null
    _min: PromotionCategoryMinAggregateOutputType | null
    _max: PromotionCategoryMaxAggregateOutputType | null
  }

  type GetPromotionCategoryGroupByPayload<T extends PromotionCategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PromotionCategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PromotionCategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PromotionCategoryGroupByOutputType[P]>
            : GetScalarType<T[P], PromotionCategoryGroupByOutputType[P]>
        }
      >
    >


  export type PromotionCategorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    promotionId?: boolean
    categoryId?: boolean
    promotion?: boolean | PromotionDefaultArgs<ExtArgs>
    category?: boolean | CategoryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["promotionCategory"]>

  export type PromotionCategorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    promotionId?: boolean
    categoryId?: boolean
    promotion?: boolean | PromotionDefaultArgs<ExtArgs>
    category?: boolean | CategoryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["promotionCategory"]>

  export type PromotionCategorySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    promotionId?: boolean
    categoryId?: boolean
    promotion?: boolean | PromotionDefaultArgs<ExtArgs>
    category?: boolean | CategoryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["promotionCategory"]>

  export type PromotionCategorySelectScalar = {
    id?: boolean
    promotionId?: boolean
    categoryId?: boolean
  }

  export type PromotionCategoryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "promotionId" | "categoryId", ExtArgs["result"]["promotionCategory"]>
  export type PromotionCategoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    promotion?: boolean | PromotionDefaultArgs<ExtArgs>
    category?: boolean | CategoryDefaultArgs<ExtArgs>
  }
  export type PromotionCategoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    promotion?: boolean | PromotionDefaultArgs<ExtArgs>
    category?: boolean | CategoryDefaultArgs<ExtArgs>
  }
  export type PromotionCategoryIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    promotion?: boolean | PromotionDefaultArgs<ExtArgs>
    category?: boolean | CategoryDefaultArgs<ExtArgs>
  }

  export type $PromotionCategoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PromotionCategory"
    objects: {
      promotion: Prisma.$PromotionPayload<ExtArgs>
      category: Prisma.$CategoryPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      promotionId: string
      categoryId: string
    }, ExtArgs["result"]["promotionCategory"]>
    composites: {}
  }

  type PromotionCategoryGetPayload<S extends boolean | null | undefined | PromotionCategoryDefaultArgs> = $Result.GetResult<Prisma.$PromotionCategoryPayload, S>

  type PromotionCategoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PromotionCategoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PromotionCategoryCountAggregateInputType | true
    }

  export interface PromotionCategoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PromotionCategory'], meta: { name: 'PromotionCategory' } }
    /**
     * Find zero or one PromotionCategory that matches the filter.
     * @param {PromotionCategoryFindUniqueArgs} args - Arguments to find a PromotionCategory
     * @example
     * // Get one PromotionCategory
     * const promotionCategory = await prisma.promotionCategory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PromotionCategoryFindUniqueArgs>(args: SelectSubset<T, PromotionCategoryFindUniqueArgs<ExtArgs>>): Prisma__PromotionCategoryClient<$Result.GetResult<Prisma.$PromotionCategoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PromotionCategory that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PromotionCategoryFindUniqueOrThrowArgs} args - Arguments to find a PromotionCategory
     * @example
     * // Get one PromotionCategory
     * const promotionCategory = await prisma.promotionCategory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PromotionCategoryFindUniqueOrThrowArgs>(args: SelectSubset<T, PromotionCategoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PromotionCategoryClient<$Result.GetResult<Prisma.$PromotionCategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PromotionCategory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromotionCategoryFindFirstArgs} args - Arguments to find a PromotionCategory
     * @example
     * // Get one PromotionCategory
     * const promotionCategory = await prisma.promotionCategory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PromotionCategoryFindFirstArgs>(args?: SelectSubset<T, PromotionCategoryFindFirstArgs<ExtArgs>>): Prisma__PromotionCategoryClient<$Result.GetResult<Prisma.$PromotionCategoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PromotionCategory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromotionCategoryFindFirstOrThrowArgs} args - Arguments to find a PromotionCategory
     * @example
     * // Get one PromotionCategory
     * const promotionCategory = await prisma.promotionCategory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PromotionCategoryFindFirstOrThrowArgs>(args?: SelectSubset<T, PromotionCategoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__PromotionCategoryClient<$Result.GetResult<Prisma.$PromotionCategoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PromotionCategories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromotionCategoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PromotionCategories
     * const promotionCategories = await prisma.promotionCategory.findMany()
     * 
     * // Get first 10 PromotionCategories
     * const promotionCategories = await prisma.promotionCategory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const promotionCategoryWithIdOnly = await prisma.promotionCategory.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PromotionCategoryFindManyArgs>(args?: SelectSubset<T, PromotionCategoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PromotionCategoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PromotionCategory.
     * @param {PromotionCategoryCreateArgs} args - Arguments to create a PromotionCategory.
     * @example
     * // Create one PromotionCategory
     * const PromotionCategory = await prisma.promotionCategory.create({
     *   data: {
     *     // ... data to create a PromotionCategory
     *   }
     * })
     * 
     */
    create<T extends PromotionCategoryCreateArgs>(args: SelectSubset<T, PromotionCategoryCreateArgs<ExtArgs>>): Prisma__PromotionCategoryClient<$Result.GetResult<Prisma.$PromotionCategoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PromotionCategories.
     * @param {PromotionCategoryCreateManyArgs} args - Arguments to create many PromotionCategories.
     * @example
     * // Create many PromotionCategories
     * const promotionCategory = await prisma.promotionCategory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PromotionCategoryCreateManyArgs>(args?: SelectSubset<T, PromotionCategoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PromotionCategories and returns the data saved in the database.
     * @param {PromotionCategoryCreateManyAndReturnArgs} args - Arguments to create many PromotionCategories.
     * @example
     * // Create many PromotionCategories
     * const promotionCategory = await prisma.promotionCategory.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PromotionCategories and only return the `id`
     * const promotionCategoryWithIdOnly = await prisma.promotionCategory.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PromotionCategoryCreateManyAndReturnArgs>(args?: SelectSubset<T, PromotionCategoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PromotionCategoryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PromotionCategory.
     * @param {PromotionCategoryDeleteArgs} args - Arguments to delete one PromotionCategory.
     * @example
     * // Delete one PromotionCategory
     * const PromotionCategory = await prisma.promotionCategory.delete({
     *   where: {
     *     // ... filter to delete one PromotionCategory
     *   }
     * })
     * 
     */
    delete<T extends PromotionCategoryDeleteArgs>(args: SelectSubset<T, PromotionCategoryDeleteArgs<ExtArgs>>): Prisma__PromotionCategoryClient<$Result.GetResult<Prisma.$PromotionCategoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PromotionCategory.
     * @param {PromotionCategoryUpdateArgs} args - Arguments to update one PromotionCategory.
     * @example
     * // Update one PromotionCategory
     * const promotionCategory = await prisma.promotionCategory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PromotionCategoryUpdateArgs>(args: SelectSubset<T, PromotionCategoryUpdateArgs<ExtArgs>>): Prisma__PromotionCategoryClient<$Result.GetResult<Prisma.$PromotionCategoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PromotionCategories.
     * @param {PromotionCategoryDeleteManyArgs} args - Arguments to filter PromotionCategories to delete.
     * @example
     * // Delete a few PromotionCategories
     * const { count } = await prisma.promotionCategory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PromotionCategoryDeleteManyArgs>(args?: SelectSubset<T, PromotionCategoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PromotionCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromotionCategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PromotionCategories
     * const promotionCategory = await prisma.promotionCategory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PromotionCategoryUpdateManyArgs>(args: SelectSubset<T, PromotionCategoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PromotionCategories and returns the data updated in the database.
     * @param {PromotionCategoryUpdateManyAndReturnArgs} args - Arguments to update many PromotionCategories.
     * @example
     * // Update many PromotionCategories
     * const promotionCategory = await prisma.promotionCategory.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PromotionCategories and only return the `id`
     * const promotionCategoryWithIdOnly = await prisma.promotionCategory.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PromotionCategoryUpdateManyAndReturnArgs>(args: SelectSubset<T, PromotionCategoryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PromotionCategoryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PromotionCategory.
     * @param {PromotionCategoryUpsertArgs} args - Arguments to update or create a PromotionCategory.
     * @example
     * // Update or create a PromotionCategory
     * const promotionCategory = await prisma.promotionCategory.upsert({
     *   create: {
     *     // ... data to create a PromotionCategory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PromotionCategory we want to update
     *   }
     * })
     */
    upsert<T extends PromotionCategoryUpsertArgs>(args: SelectSubset<T, PromotionCategoryUpsertArgs<ExtArgs>>): Prisma__PromotionCategoryClient<$Result.GetResult<Prisma.$PromotionCategoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PromotionCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromotionCategoryCountArgs} args - Arguments to filter PromotionCategories to count.
     * @example
     * // Count the number of PromotionCategories
     * const count = await prisma.promotionCategory.count({
     *   where: {
     *     // ... the filter for the PromotionCategories we want to count
     *   }
     * })
    **/
    count<T extends PromotionCategoryCountArgs>(
      args?: Subset<T, PromotionCategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PromotionCategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PromotionCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromotionCategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PromotionCategoryAggregateArgs>(args: Subset<T, PromotionCategoryAggregateArgs>): Prisma.PrismaPromise<GetPromotionCategoryAggregateType<T>>

    /**
     * Group by PromotionCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromotionCategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PromotionCategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PromotionCategoryGroupByArgs['orderBy'] }
        : { orderBy?: PromotionCategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PromotionCategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPromotionCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PromotionCategory model
   */
  readonly fields: PromotionCategoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PromotionCategory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PromotionCategoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    promotion<T extends PromotionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PromotionDefaultArgs<ExtArgs>>): Prisma__PromotionClient<$Result.GetResult<Prisma.$PromotionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    category<T extends CategoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CategoryDefaultArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PromotionCategory model
   */
  interface PromotionCategoryFieldRefs {
    readonly id: FieldRef<"PromotionCategory", 'String'>
    readonly promotionId: FieldRef<"PromotionCategory", 'String'>
    readonly categoryId: FieldRef<"PromotionCategory", 'String'>
  }
    

  // Custom InputTypes
  /**
   * PromotionCategory findUnique
   */
  export type PromotionCategoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PromotionCategory
     */
    select?: PromotionCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PromotionCategory
     */
    omit?: PromotionCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PromotionCategoryInclude<ExtArgs> | null
    /**
     * Filter, which PromotionCategory to fetch.
     */
    where: PromotionCategoryWhereUniqueInput
  }

  /**
   * PromotionCategory findUniqueOrThrow
   */
  export type PromotionCategoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PromotionCategory
     */
    select?: PromotionCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PromotionCategory
     */
    omit?: PromotionCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PromotionCategoryInclude<ExtArgs> | null
    /**
     * Filter, which PromotionCategory to fetch.
     */
    where: PromotionCategoryWhereUniqueInput
  }

  /**
   * PromotionCategory findFirst
   */
  export type PromotionCategoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PromotionCategory
     */
    select?: PromotionCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PromotionCategory
     */
    omit?: PromotionCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PromotionCategoryInclude<ExtArgs> | null
    /**
     * Filter, which PromotionCategory to fetch.
     */
    where?: PromotionCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PromotionCategories to fetch.
     */
    orderBy?: PromotionCategoryOrderByWithRelationInput | PromotionCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PromotionCategories.
     */
    cursor?: PromotionCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PromotionCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PromotionCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PromotionCategories.
     */
    distinct?: PromotionCategoryScalarFieldEnum | PromotionCategoryScalarFieldEnum[]
  }

  /**
   * PromotionCategory findFirstOrThrow
   */
  export type PromotionCategoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PromotionCategory
     */
    select?: PromotionCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PromotionCategory
     */
    omit?: PromotionCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PromotionCategoryInclude<ExtArgs> | null
    /**
     * Filter, which PromotionCategory to fetch.
     */
    where?: PromotionCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PromotionCategories to fetch.
     */
    orderBy?: PromotionCategoryOrderByWithRelationInput | PromotionCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PromotionCategories.
     */
    cursor?: PromotionCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PromotionCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PromotionCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PromotionCategories.
     */
    distinct?: PromotionCategoryScalarFieldEnum | PromotionCategoryScalarFieldEnum[]
  }

  /**
   * PromotionCategory findMany
   */
  export type PromotionCategoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PromotionCategory
     */
    select?: PromotionCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PromotionCategory
     */
    omit?: PromotionCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PromotionCategoryInclude<ExtArgs> | null
    /**
     * Filter, which PromotionCategories to fetch.
     */
    where?: PromotionCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PromotionCategories to fetch.
     */
    orderBy?: PromotionCategoryOrderByWithRelationInput | PromotionCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PromotionCategories.
     */
    cursor?: PromotionCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PromotionCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PromotionCategories.
     */
    skip?: number
    distinct?: PromotionCategoryScalarFieldEnum | PromotionCategoryScalarFieldEnum[]
  }

  /**
   * PromotionCategory create
   */
  export type PromotionCategoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PromotionCategory
     */
    select?: PromotionCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PromotionCategory
     */
    omit?: PromotionCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PromotionCategoryInclude<ExtArgs> | null
    /**
     * The data needed to create a PromotionCategory.
     */
    data: XOR<PromotionCategoryCreateInput, PromotionCategoryUncheckedCreateInput>
  }

  /**
   * PromotionCategory createMany
   */
  export type PromotionCategoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PromotionCategories.
     */
    data: PromotionCategoryCreateManyInput | PromotionCategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PromotionCategory createManyAndReturn
   */
  export type PromotionCategoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PromotionCategory
     */
    select?: PromotionCategorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PromotionCategory
     */
    omit?: PromotionCategoryOmit<ExtArgs> | null
    /**
     * The data used to create many PromotionCategories.
     */
    data: PromotionCategoryCreateManyInput | PromotionCategoryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PromotionCategoryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PromotionCategory update
   */
  export type PromotionCategoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PromotionCategory
     */
    select?: PromotionCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PromotionCategory
     */
    omit?: PromotionCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PromotionCategoryInclude<ExtArgs> | null
    /**
     * The data needed to update a PromotionCategory.
     */
    data: XOR<PromotionCategoryUpdateInput, PromotionCategoryUncheckedUpdateInput>
    /**
     * Choose, which PromotionCategory to update.
     */
    where: PromotionCategoryWhereUniqueInput
  }

  /**
   * PromotionCategory updateMany
   */
  export type PromotionCategoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PromotionCategories.
     */
    data: XOR<PromotionCategoryUpdateManyMutationInput, PromotionCategoryUncheckedUpdateManyInput>
    /**
     * Filter which PromotionCategories to update
     */
    where?: PromotionCategoryWhereInput
    /**
     * Limit how many PromotionCategories to update.
     */
    limit?: number
  }

  /**
   * PromotionCategory updateManyAndReturn
   */
  export type PromotionCategoryUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PromotionCategory
     */
    select?: PromotionCategorySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PromotionCategory
     */
    omit?: PromotionCategoryOmit<ExtArgs> | null
    /**
     * The data used to update PromotionCategories.
     */
    data: XOR<PromotionCategoryUpdateManyMutationInput, PromotionCategoryUncheckedUpdateManyInput>
    /**
     * Filter which PromotionCategories to update
     */
    where?: PromotionCategoryWhereInput
    /**
     * Limit how many PromotionCategories to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PromotionCategoryIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PromotionCategory upsert
   */
  export type PromotionCategoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PromotionCategory
     */
    select?: PromotionCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PromotionCategory
     */
    omit?: PromotionCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PromotionCategoryInclude<ExtArgs> | null
    /**
     * The filter to search for the PromotionCategory to update in case it exists.
     */
    where: PromotionCategoryWhereUniqueInput
    /**
     * In case the PromotionCategory found by the `where` argument doesn't exist, create a new PromotionCategory with this data.
     */
    create: XOR<PromotionCategoryCreateInput, PromotionCategoryUncheckedCreateInput>
    /**
     * In case the PromotionCategory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PromotionCategoryUpdateInput, PromotionCategoryUncheckedUpdateInput>
  }

  /**
   * PromotionCategory delete
   */
  export type PromotionCategoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PromotionCategory
     */
    select?: PromotionCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PromotionCategory
     */
    omit?: PromotionCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PromotionCategoryInclude<ExtArgs> | null
    /**
     * Filter which PromotionCategory to delete.
     */
    where: PromotionCategoryWhereUniqueInput
  }

  /**
   * PromotionCategory deleteMany
   */
  export type PromotionCategoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PromotionCategories to delete
     */
    where?: PromotionCategoryWhereInput
    /**
     * Limit how many PromotionCategories to delete.
     */
    limit?: number
  }

  /**
   * PromotionCategory without action
   */
  export type PromotionCategoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PromotionCategory
     */
    select?: PromotionCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PromotionCategory
     */
    omit?: PromotionCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PromotionCategoryInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    name: 'name',
    avatar: 'avatar',
    phone: 'phone',
    role: 'role',
    isVerified: 'isVerified',
    verificationToken: 'verificationToken',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const AddressScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    label: 'label',
    fullName: 'fullName',
    phone: 'phone',
    province: 'province',
    district: 'district',
    ward: 'ward',
    street: 'street',
    isDefault: 'isDefault',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AddressScalarFieldEnum = (typeof AddressScalarFieldEnum)[keyof typeof AddressScalarFieldEnum]


  export const SellerScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    storeName: 'storeName',
    verified: 'verified',
    rating: 'rating'
  };

  export type SellerScalarFieldEnum = (typeof SellerScalarFieldEnum)[keyof typeof SellerScalarFieldEnum]


  export const EnterpriseScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    companyName: 'companyName',
    taxCode: 'taxCode',
    verified: 'verified',
    officialBrand: 'officialBrand',
    rating: 'rating'
  };

  export type EnterpriseScalarFieldEnum = (typeof EnterpriseScalarFieldEnum)[keyof typeof EnterpriseScalarFieldEnum]


  export const ProductScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    categoryId: 'categoryId',
    sellerId: 'sellerId',
    enterpriseId: 'enterpriseId',
    basePrice: 'basePrice',
    stock: 'stock',
    active: 'active',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ProductScalarFieldEnum = (typeof ProductScalarFieldEnum)[keyof typeof ProductScalarFieldEnum]


  export const ProductVariantScalarFieldEnum: {
    id: 'id',
    productId: 'productId',
    color: 'color',
    size: 'size',
    price: 'price',
    stock: 'stock'
  };

  export type ProductVariantScalarFieldEnum = (typeof ProductVariantScalarFieldEnum)[keyof typeof ProductVariantScalarFieldEnum]


  export const CategoryScalarFieldEnum: {
    id: 'id',
    name: 'name',
    parentId: 'parentId'
  };

  export type CategoryScalarFieldEnum = (typeof CategoryScalarFieldEnum)[keyof typeof CategoryScalarFieldEnum]


  export const SellerProductScalarFieldEnum: {
    id: 'id',
    sellerId: 'sellerId',
    productId: 'productId',
    price: 'price',
    stock: 'stock',
    active: 'active',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SellerProductScalarFieldEnum = (typeof SellerProductScalarFieldEnum)[keyof typeof SellerProductScalarFieldEnum]


  export const ReviewScalarFieldEnum: {
    id: 'id',
    productId: 'productId',
    userId: 'userId',
    rating: 'rating',
    comment: 'comment',
    createdAt: 'createdAt'
  };

  export type ReviewScalarFieldEnum = (typeof ReviewScalarFieldEnum)[keyof typeof ReviewScalarFieldEnum]


  export const VoucherScalarFieldEnum: {
    id: 'id',
    code: 'code',
    discountType: 'discountType',
    discountValue: 'discountValue',
    minOrderValue: 'minOrderValue',
    startDate: 'startDate',
    endDate: 'endDate',
    usageLimit: 'usageLimit',
    usedCount: 'usedCount'
  };

  export type VoucherScalarFieldEnum = (typeof VoucherScalarFieldEnum)[keyof typeof VoucherScalarFieldEnum]


  export const OrderScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    totalAmount: 'totalAmount',
    status: 'status',
    paymentId: 'paymentId',
    shippingId: 'shippingId',
    voucherId: 'voucherId',
    createdAt: 'createdAt'
  };

  export type OrderScalarFieldEnum = (typeof OrderScalarFieldEnum)[keyof typeof OrderScalarFieldEnum]


  export const OrderItemScalarFieldEnum: {
    id: 'id',
    orderId: 'orderId',
    productId: 'productId',
    variantId: 'variantId',
    quantity: 'quantity',
    price: 'price'
  };

  export type OrderItemScalarFieldEnum = (typeof OrderItemScalarFieldEnum)[keyof typeof OrderItemScalarFieldEnum]


  export const PaymentScalarFieldEnum: {
    id: 'id',
    orderId: 'orderId',
    method: 'method',
    status: 'status',
    transactionId: 'transactionId',
    createdAt: 'createdAt'
  };

  export type PaymentScalarFieldEnum = (typeof PaymentScalarFieldEnum)[keyof typeof PaymentScalarFieldEnum]


  export const LogisticsPartnerScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    name: 'name',
    apiEndpoint: 'apiEndpoint',
    baseRate: 'baseRate',
    rating: 'rating',
    verified: 'verified'
  };

  export type LogisticsPartnerScalarFieldEnum = (typeof LogisticsPartnerScalarFieldEnum)[keyof typeof LogisticsPartnerScalarFieldEnum]


  export const ShipperScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    name: 'name',
    phone: 'phone',
    avatar: 'avatar',
    logisticsPartnerId: 'logisticsPartnerId',
    active: 'active',
    currentLocation: 'currentLocation',
    status: 'status',
    rating: 'rating',
    totalDeliveries: 'totalDeliveries',
    totalRatings: 'totalRatings',
    deliveryRange: 'deliveryRange',
    deliveryHistory: 'deliveryHistory',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ShipperScalarFieldEnum = (typeof ShipperScalarFieldEnum)[keyof typeof ShipperScalarFieldEnum]


  export const LogisticsOrderScalarFieldEnum: {
    id: 'id',
    orderId: 'orderId',
    logisticsPartnerId: 'logisticsPartnerId',
    shipperId: 'shipperId',
    trackingCode: 'trackingCode',
    status: 'status',
    pickupAddress: 'pickupAddress',
    deliveryAddress: 'deliveryAddress',
    pickupLocation: 'pickupLocation',
    deliveryLocation: 'deliveryLocation',
    distance: 'distance',
    estimatedTime: 'estimatedTime',
    estimatedDelivery: 'estimatedDelivery',
    pickupTime: 'pickupTime',
    deliveredTime: 'deliveredTime',
    notes: 'notes',
    deliveryAttempts: 'deliveryAttempts',
    customerSignature: 'customerSignature',
    proofOfDelivery: 'proofOfDelivery',
    updatedAt: 'updatedAt',
    cancelReason: 'cancelReason',
    rating: 'rating',
    feedback: 'feedback'
  };

  export type LogisticsOrderScalarFieldEnum = (typeof LogisticsOrderScalarFieldEnum)[keyof typeof LogisticsOrderScalarFieldEnum]


  export const UserBehaviorScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    productId: 'productId',
    type: 'type',
    createdAt: 'createdAt'
  };

  export type UserBehaviorScalarFieldEnum = (typeof UserBehaviorScalarFieldEnum)[keyof typeof UserBehaviorScalarFieldEnum]


  export const PromotionScalarFieldEnum: {
    id: 'id',
    type: 'type',
    name: 'name',
    description: 'description',
    startDate: 'startDate',
    endDate: 'endDate',
    discountPercentage: 'discountPercentage',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PromotionScalarFieldEnum = (typeof PromotionScalarFieldEnum)[keyof typeof PromotionScalarFieldEnum]


  export const PromotionProductScalarFieldEnum: {
    id: 'id',
    promotionId: 'promotionId',
    productId: 'productId',
    discountPercentage: 'discountPercentage',
    quantity: 'quantity',
    soldQuantity: 'soldQuantity'
  };

  export type PromotionProductScalarFieldEnum = (typeof PromotionProductScalarFieldEnum)[keyof typeof PromotionProductScalarFieldEnum]


  export const PromotionCategoryScalarFieldEnum: {
    id: 'id',
    promotionId: 'promotionId',
    categoryId: 'categoryId'
  };

  export type PromotionCategoryScalarFieldEnum = (typeof PromotionCategoryScalarFieldEnum)[keyof typeof PromotionCategoryScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Role'
   */
  export type EnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role'>
    


  /**
   * Reference to a field of type 'Role[]'
   */
  export type ListEnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'DiscountType'
   */
  export type EnumDiscountTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DiscountType'>
    


  /**
   * Reference to a field of type 'DiscountType[]'
   */
  export type ListEnumDiscountTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DiscountType[]'>
    


  /**
   * Reference to a field of type 'OrderStatus'
   */
  export type EnumOrderStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'OrderStatus'>
    


  /**
   * Reference to a field of type 'OrderStatus[]'
   */
  export type ListEnumOrderStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'OrderStatus[]'>
    


  /**
   * Reference to a field of type 'PaymentMethod'
   */
  export type EnumPaymentMethodFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentMethod'>
    


  /**
   * Reference to a field of type 'PaymentMethod[]'
   */
  export type ListEnumPaymentMethodFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentMethod[]'>
    


  /**
   * Reference to a field of type 'PaymentStatus'
   */
  export type EnumPaymentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentStatus'>
    


  /**
   * Reference to a field of type 'PaymentStatus[]'
   */
  export type ListEnumPaymentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentStatus[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


  /**
   * Reference to a field of type 'ShipperStatus'
   */
  export type EnumShipperStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ShipperStatus'>
    


  /**
   * Reference to a field of type 'ShipperStatus[]'
   */
  export type ListEnumShipperStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ShipperStatus[]'>
    


  /**
   * Reference to a field of type 'Json[]'
   */
  export type ListJsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json[]'>
    


  /**
   * Reference to a field of type 'LogisticsStatus'
   */
  export type EnumLogisticsStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'LogisticsStatus'>
    


  /**
   * Reference to a field of type 'LogisticsStatus[]'
   */
  export type ListEnumLogisticsStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'LogisticsStatus[]'>
    


  /**
   * Reference to a field of type 'BehaviorType'
   */
  export type EnumBehaviorTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BehaviorType'>
    


  /**
   * Reference to a field of type 'BehaviorType[]'
   */
  export type ListEnumBehaviorTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BehaviorType[]'>
    


  /**
   * Reference to a field of type 'PromotionType'
   */
  export type EnumPromotionTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PromotionType'>
    


  /**
   * Reference to a field of type 'PromotionType[]'
   */
  export type ListEnumPromotionTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PromotionType[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    avatar?: StringNullableFilter<"User"> | string | null
    phone?: StringNullableFilter<"User"> | string | null
    role?: EnumRoleFilter<"User"> | $Enums.Role
    isVerified?: BoolFilter<"User"> | boolean
    verificationToken?: StringNullableFilter<"User"> | string | null
    isActive?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    seller?: XOR<SellerNullableScalarRelationFilter, SellerWhereInput> | null
    enterprise?: XOR<EnterpriseNullableScalarRelationFilter, EnterpriseWhereInput> | null
    logistics?: XOR<LogisticsPartnerNullableScalarRelationFilter, LogisticsPartnerWhereInput> | null
    addresses?: AddressListRelationFilter
    orders?: OrderListRelationFilter
    reviews?: ReviewListRelationFilter
    behaviors?: UserBehaviorListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    avatar?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    role?: SortOrder
    isVerified?: SortOrder
    verificationToken?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    seller?: SellerOrderByWithRelationInput
    enterprise?: EnterpriseOrderByWithRelationInput
    logistics?: LogisticsPartnerOrderByWithRelationInput
    addresses?: AddressOrderByRelationAggregateInput
    orders?: OrderOrderByRelationAggregateInput
    reviews?: ReviewOrderByRelationAggregateInput
    behaviors?: UserBehaviorOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    avatar?: StringNullableFilter<"User"> | string | null
    phone?: StringNullableFilter<"User"> | string | null
    role?: EnumRoleFilter<"User"> | $Enums.Role
    isVerified?: BoolFilter<"User"> | boolean
    verificationToken?: StringNullableFilter<"User"> | string | null
    isActive?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    seller?: XOR<SellerNullableScalarRelationFilter, SellerWhereInput> | null
    enterprise?: XOR<EnterpriseNullableScalarRelationFilter, EnterpriseWhereInput> | null
    logistics?: XOR<LogisticsPartnerNullableScalarRelationFilter, LogisticsPartnerWhereInput> | null
    addresses?: AddressListRelationFilter
    orders?: OrderListRelationFilter
    reviews?: ReviewListRelationFilter
    behaviors?: UserBehaviorListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    avatar?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    role?: SortOrder
    isVerified?: SortOrder
    verificationToken?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    name?: StringWithAggregatesFilter<"User"> | string
    avatar?: StringNullableWithAggregatesFilter<"User"> | string | null
    phone?: StringNullableWithAggregatesFilter<"User"> | string | null
    role?: EnumRoleWithAggregatesFilter<"User"> | $Enums.Role
    isVerified?: BoolWithAggregatesFilter<"User"> | boolean
    verificationToken?: StringNullableWithAggregatesFilter<"User"> | string | null
    isActive?: BoolWithAggregatesFilter<"User"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type AddressWhereInput = {
    AND?: AddressWhereInput | AddressWhereInput[]
    OR?: AddressWhereInput[]
    NOT?: AddressWhereInput | AddressWhereInput[]
    id?: StringFilter<"Address"> | string
    userId?: StringFilter<"Address"> | string
    label?: StringNullableFilter<"Address"> | string | null
    fullName?: StringFilter<"Address"> | string
    phone?: StringFilter<"Address"> | string
    province?: StringFilter<"Address"> | string
    district?: StringFilter<"Address"> | string
    ward?: StringFilter<"Address"> | string
    street?: StringFilter<"Address"> | string
    isDefault?: BoolFilter<"Address"> | boolean
    createdAt?: DateTimeFilter<"Address"> | Date | string
    updatedAt?: DateTimeFilter<"Address"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type AddressOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    label?: SortOrderInput | SortOrder
    fullName?: SortOrder
    phone?: SortOrder
    province?: SortOrder
    district?: SortOrder
    ward?: SortOrder
    street?: SortOrder
    isDefault?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type AddressWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AddressWhereInput | AddressWhereInput[]
    OR?: AddressWhereInput[]
    NOT?: AddressWhereInput | AddressWhereInput[]
    userId?: StringFilter<"Address"> | string
    label?: StringNullableFilter<"Address"> | string | null
    fullName?: StringFilter<"Address"> | string
    phone?: StringFilter<"Address"> | string
    province?: StringFilter<"Address"> | string
    district?: StringFilter<"Address"> | string
    ward?: StringFilter<"Address"> | string
    street?: StringFilter<"Address"> | string
    isDefault?: BoolFilter<"Address"> | boolean
    createdAt?: DateTimeFilter<"Address"> | Date | string
    updatedAt?: DateTimeFilter<"Address"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type AddressOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    label?: SortOrderInput | SortOrder
    fullName?: SortOrder
    phone?: SortOrder
    province?: SortOrder
    district?: SortOrder
    ward?: SortOrder
    street?: SortOrder
    isDefault?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AddressCountOrderByAggregateInput
    _max?: AddressMaxOrderByAggregateInput
    _min?: AddressMinOrderByAggregateInput
  }

  export type AddressScalarWhereWithAggregatesInput = {
    AND?: AddressScalarWhereWithAggregatesInput | AddressScalarWhereWithAggregatesInput[]
    OR?: AddressScalarWhereWithAggregatesInput[]
    NOT?: AddressScalarWhereWithAggregatesInput | AddressScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Address"> | string
    userId?: StringWithAggregatesFilter<"Address"> | string
    label?: StringNullableWithAggregatesFilter<"Address"> | string | null
    fullName?: StringWithAggregatesFilter<"Address"> | string
    phone?: StringWithAggregatesFilter<"Address"> | string
    province?: StringWithAggregatesFilter<"Address"> | string
    district?: StringWithAggregatesFilter<"Address"> | string
    ward?: StringWithAggregatesFilter<"Address"> | string
    street?: StringWithAggregatesFilter<"Address"> | string
    isDefault?: BoolWithAggregatesFilter<"Address"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Address"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Address"> | Date | string
  }

  export type SellerWhereInput = {
    AND?: SellerWhereInput | SellerWhereInput[]
    OR?: SellerWhereInput[]
    NOT?: SellerWhereInput | SellerWhereInput[]
    id?: StringFilter<"Seller"> | string
    userId?: StringFilter<"Seller"> | string
    storeName?: StringFilter<"Seller"> | string
    verified?: BoolFilter<"Seller"> | boolean
    rating?: FloatNullableFilter<"Seller"> | number | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    products?: ProductListRelationFilter
    sellerProducts?: SellerProductListRelationFilter
  }

  export type SellerOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    storeName?: SortOrder
    verified?: SortOrder
    rating?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    products?: ProductOrderByRelationAggregateInput
    sellerProducts?: SellerProductOrderByRelationAggregateInput
  }

  export type SellerWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    AND?: SellerWhereInput | SellerWhereInput[]
    OR?: SellerWhereInput[]
    NOT?: SellerWhereInput | SellerWhereInput[]
    storeName?: StringFilter<"Seller"> | string
    verified?: BoolFilter<"Seller"> | boolean
    rating?: FloatNullableFilter<"Seller"> | number | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    products?: ProductListRelationFilter
    sellerProducts?: SellerProductListRelationFilter
  }, "id" | "userId">

  export type SellerOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    storeName?: SortOrder
    verified?: SortOrder
    rating?: SortOrderInput | SortOrder
    _count?: SellerCountOrderByAggregateInput
    _avg?: SellerAvgOrderByAggregateInput
    _max?: SellerMaxOrderByAggregateInput
    _min?: SellerMinOrderByAggregateInput
    _sum?: SellerSumOrderByAggregateInput
  }

  export type SellerScalarWhereWithAggregatesInput = {
    AND?: SellerScalarWhereWithAggregatesInput | SellerScalarWhereWithAggregatesInput[]
    OR?: SellerScalarWhereWithAggregatesInput[]
    NOT?: SellerScalarWhereWithAggregatesInput | SellerScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Seller"> | string
    userId?: StringWithAggregatesFilter<"Seller"> | string
    storeName?: StringWithAggregatesFilter<"Seller"> | string
    verified?: BoolWithAggregatesFilter<"Seller"> | boolean
    rating?: FloatNullableWithAggregatesFilter<"Seller"> | number | null
  }

  export type EnterpriseWhereInput = {
    AND?: EnterpriseWhereInput | EnterpriseWhereInput[]
    OR?: EnterpriseWhereInput[]
    NOT?: EnterpriseWhereInput | EnterpriseWhereInput[]
    id?: StringFilter<"Enterprise"> | string
    userId?: StringFilter<"Enterprise"> | string
    companyName?: StringFilter<"Enterprise"> | string
    taxCode?: StringNullableFilter<"Enterprise"> | string | null
    verified?: BoolFilter<"Enterprise"> | boolean
    officialBrand?: BoolFilter<"Enterprise"> | boolean
    rating?: FloatNullableFilter<"Enterprise"> | number | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    products?: ProductListRelationFilter
  }

  export type EnterpriseOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    companyName?: SortOrder
    taxCode?: SortOrderInput | SortOrder
    verified?: SortOrder
    officialBrand?: SortOrder
    rating?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    products?: ProductOrderByRelationAggregateInput
  }

  export type EnterpriseWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    AND?: EnterpriseWhereInput | EnterpriseWhereInput[]
    OR?: EnterpriseWhereInput[]
    NOT?: EnterpriseWhereInput | EnterpriseWhereInput[]
    companyName?: StringFilter<"Enterprise"> | string
    taxCode?: StringNullableFilter<"Enterprise"> | string | null
    verified?: BoolFilter<"Enterprise"> | boolean
    officialBrand?: BoolFilter<"Enterprise"> | boolean
    rating?: FloatNullableFilter<"Enterprise"> | number | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    products?: ProductListRelationFilter
  }, "id" | "userId">

  export type EnterpriseOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    companyName?: SortOrder
    taxCode?: SortOrderInput | SortOrder
    verified?: SortOrder
    officialBrand?: SortOrder
    rating?: SortOrderInput | SortOrder
    _count?: EnterpriseCountOrderByAggregateInput
    _avg?: EnterpriseAvgOrderByAggregateInput
    _max?: EnterpriseMaxOrderByAggregateInput
    _min?: EnterpriseMinOrderByAggregateInput
    _sum?: EnterpriseSumOrderByAggregateInput
  }

  export type EnterpriseScalarWhereWithAggregatesInput = {
    AND?: EnterpriseScalarWhereWithAggregatesInput | EnterpriseScalarWhereWithAggregatesInput[]
    OR?: EnterpriseScalarWhereWithAggregatesInput[]
    NOT?: EnterpriseScalarWhereWithAggregatesInput | EnterpriseScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Enterprise"> | string
    userId?: StringWithAggregatesFilter<"Enterprise"> | string
    companyName?: StringWithAggregatesFilter<"Enterprise"> | string
    taxCode?: StringNullableWithAggregatesFilter<"Enterprise"> | string | null
    verified?: BoolWithAggregatesFilter<"Enterprise"> | boolean
    officialBrand?: BoolWithAggregatesFilter<"Enterprise"> | boolean
    rating?: FloatNullableWithAggregatesFilter<"Enterprise"> | number | null
  }

  export type ProductWhereInput = {
    AND?: ProductWhereInput | ProductWhereInput[]
    OR?: ProductWhereInput[]
    NOT?: ProductWhereInput | ProductWhereInput[]
    id?: StringFilter<"Product"> | string
    name?: StringFilter<"Product"> | string
    description?: StringFilter<"Product"> | string
    categoryId?: StringFilter<"Product"> | string
    sellerId?: StringNullableFilter<"Product"> | string | null
    enterpriseId?: StringNullableFilter<"Product"> | string | null
    basePrice?: FloatFilter<"Product"> | number
    stock?: IntFilter<"Product"> | number
    active?: BoolFilter<"Product"> | boolean
    createdAt?: DateTimeFilter<"Product"> | Date | string
    updatedAt?: DateTimeFilter<"Product"> | Date | string
    category?: XOR<CategoryScalarRelationFilter, CategoryWhereInput>
    seller?: XOR<SellerNullableScalarRelationFilter, SellerWhereInput> | null
    enterprise?: XOR<EnterpriseNullableScalarRelationFilter, EnterpriseWhereInput> | null
    variants?: ProductVariantListRelationFilter
    reviews?: ReviewListRelationFilter
    orderItems?: OrderItemListRelationFilter
    behaviors?: UserBehaviorListRelationFilter
    promotions?: PromotionProductListRelationFilter
    sellerProducts?: SellerProductListRelationFilter
  }

  export type ProductOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    categoryId?: SortOrder
    sellerId?: SortOrderInput | SortOrder
    enterpriseId?: SortOrderInput | SortOrder
    basePrice?: SortOrder
    stock?: SortOrder
    active?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    category?: CategoryOrderByWithRelationInput
    seller?: SellerOrderByWithRelationInput
    enterprise?: EnterpriseOrderByWithRelationInput
    variants?: ProductVariantOrderByRelationAggregateInput
    reviews?: ReviewOrderByRelationAggregateInput
    orderItems?: OrderItemOrderByRelationAggregateInput
    behaviors?: UserBehaviorOrderByRelationAggregateInput
    promotions?: PromotionProductOrderByRelationAggregateInput
    sellerProducts?: SellerProductOrderByRelationAggregateInput
  }

  export type ProductWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ProductWhereInput | ProductWhereInput[]
    OR?: ProductWhereInput[]
    NOT?: ProductWhereInput | ProductWhereInput[]
    name?: StringFilter<"Product"> | string
    description?: StringFilter<"Product"> | string
    categoryId?: StringFilter<"Product"> | string
    sellerId?: StringNullableFilter<"Product"> | string | null
    enterpriseId?: StringNullableFilter<"Product"> | string | null
    basePrice?: FloatFilter<"Product"> | number
    stock?: IntFilter<"Product"> | number
    active?: BoolFilter<"Product"> | boolean
    createdAt?: DateTimeFilter<"Product"> | Date | string
    updatedAt?: DateTimeFilter<"Product"> | Date | string
    category?: XOR<CategoryScalarRelationFilter, CategoryWhereInput>
    seller?: XOR<SellerNullableScalarRelationFilter, SellerWhereInput> | null
    enterprise?: XOR<EnterpriseNullableScalarRelationFilter, EnterpriseWhereInput> | null
    variants?: ProductVariantListRelationFilter
    reviews?: ReviewListRelationFilter
    orderItems?: OrderItemListRelationFilter
    behaviors?: UserBehaviorListRelationFilter
    promotions?: PromotionProductListRelationFilter
    sellerProducts?: SellerProductListRelationFilter
  }, "id">

  export type ProductOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    categoryId?: SortOrder
    sellerId?: SortOrderInput | SortOrder
    enterpriseId?: SortOrderInput | SortOrder
    basePrice?: SortOrder
    stock?: SortOrder
    active?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ProductCountOrderByAggregateInput
    _avg?: ProductAvgOrderByAggregateInput
    _max?: ProductMaxOrderByAggregateInput
    _min?: ProductMinOrderByAggregateInput
    _sum?: ProductSumOrderByAggregateInput
  }

  export type ProductScalarWhereWithAggregatesInput = {
    AND?: ProductScalarWhereWithAggregatesInput | ProductScalarWhereWithAggregatesInput[]
    OR?: ProductScalarWhereWithAggregatesInput[]
    NOT?: ProductScalarWhereWithAggregatesInput | ProductScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Product"> | string
    name?: StringWithAggregatesFilter<"Product"> | string
    description?: StringWithAggregatesFilter<"Product"> | string
    categoryId?: StringWithAggregatesFilter<"Product"> | string
    sellerId?: StringNullableWithAggregatesFilter<"Product"> | string | null
    enterpriseId?: StringNullableWithAggregatesFilter<"Product"> | string | null
    basePrice?: FloatWithAggregatesFilter<"Product"> | number
    stock?: IntWithAggregatesFilter<"Product"> | number
    active?: BoolWithAggregatesFilter<"Product"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Product"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Product"> | Date | string
  }

  export type ProductVariantWhereInput = {
    AND?: ProductVariantWhereInput | ProductVariantWhereInput[]
    OR?: ProductVariantWhereInput[]
    NOT?: ProductVariantWhereInput | ProductVariantWhereInput[]
    id?: StringFilter<"ProductVariant"> | string
    productId?: StringFilter<"ProductVariant"> | string
    color?: StringNullableFilter<"ProductVariant"> | string | null
    size?: StringNullableFilter<"ProductVariant"> | string | null
    price?: FloatFilter<"ProductVariant"> | number
    stock?: IntFilter<"ProductVariant"> | number
    product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
  }

  export type ProductVariantOrderByWithRelationInput = {
    id?: SortOrder
    productId?: SortOrder
    color?: SortOrderInput | SortOrder
    size?: SortOrderInput | SortOrder
    price?: SortOrder
    stock?: SortOrder
    product?: ProductOrderByWithRelationInput
  }

  export type ProductVariantWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ProductVariantWhereInput | ProductVariantWhereInput[]
    OR?: ProductVariantWhereInput[]
    NOT?: ProductVariantWhereInput | ProductVariantWhereInput[]
    productId?: StringFilter<"ProductVariant"> | string
    color?: StringNullableFilter<"ProductVariant"> | string | null
    size?: StringNullableFilter<"ProductVariant"> | string | null
    price?: FloatFilter<"ProductVariant"> | number
    stock?: IntFilter<"ProductVariant"> | number
    product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
  }, "id">

  export type ProductVariantOrderByWithAggregationInput = {
    id?: SortOrder
    productId?: SortOrder
    color?: SortOrderInput | SortOrder
    size?: SortOrderInput | SortOrder
    price?: SortOrder
    stock?: SortOrder
    _count?: ProductVariantCountOrderByAggregateInput
    _avg?: ProductVariantAvgOrderByAggregateInput
    _max?: ProductVariantMaxOrderByAggregateInput
    _min?: ProductVariantMinOrderByAggregateInput
    _sum?: ProductVariantSumOrderByAggregateInput
  }

  export type ProductVariantScalarWhereWithAggregatesInput = {
    AND?: ProductVariantScalarWhereWithAggregatesInput | ProductVariantScalarWhereWithAggregatesInput[]
    OR?: ProductVariantScalarWhereWithAggregatesInput[]
    NOT?: ProductVariantScalarWhereWithAggregatesInput | ProductVariantScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ProductVariant"> | string
    productId?: StringWithAggregatesFilter<"ProductVariant"> | string
    color?: StringNullableWithAggregatesFilter<"ProductVariant"> | string | null
    size?: StringNullableWithAggregatesFilter<"ProductVariant"> | string | null
    price?: FloatWithAggregatesFilter<"ProductVariant"> | number
    stock?: IntWithAggregatesFilter<"ProductVariant"> | number
  }

  export type CategoryWhereInput = {
    AND?: CategoryWhereInput | CategoryWhereInput[]
    OR?: CategoryWhereInput[]
    NOT?: CategoryWhereInput | CategoryWhereInput[]
    id?: StringFilter<"Category"> | string
    name?: StringFilter<"Category"> | string
    parentId?: StringNullableFilter<"Category"> | string | null
    parent?: XOR<CategoryNullableScalarRelationFilter, CategoryWhereInput> | null
    children?: CategoryListRelationFilter
    products?: ProductListRelationFilter
    promotions?: PromotionCategoryListRelationFilter
  }

  export type CategoryOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    parentId?: SortOrderInput | SortOrder
    parent?: CategoryOrderByWithRelationInput
    children?: CategoryOrderByRelationAggregateInput
    products?: ProductOrderByRelationAggregateInput
    promotions?: PromotionCategoryOrderByRelationAggregateInput
  }

  export type CategoryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CategoryWhereInput | CategoryWhereInput[]
    OR?: CategoryWhereInput[]
    NOT?: CategoryWhereInput | CategoryWhereInput[]
    name?: StringFilter<"Category"> | string
    parentId?: StringNullableFilter<"Category"> | string | null
    parent?: XOR<CategoryNullableScalarRelationFilter, CategoryWhereInput> | null
    children?: CategoryListRelationFilter
    products?: ProductListRelationFilter
    promotions?: PromotionCategoryListRelationFilter
  }, "id">

  export type CategoryOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    parentId?: SortOrderInput | SortOrder
    _count?: CategoryCountOrderByAggregateInput
    _max?: CategoryMaxOrderByAggregateInput
    _min?: CategoryMinOrderByAggregateInput
  }

  export type CategoryScalarWhereWithAggregatesInput = {
    AND?: CategoryScalarWhereWithAggregatesInput | CategoryScalarWhereWithAggregatesInput[]
    OR?: CategoryScalarWhereWithAggregatesInput[]
    NOT?: CategoryScalarWhereWithAggregatesInput | CategoryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Category"> | string
    name?: StringWithAggregatesFilter<"Category"> | string
    parentId?: StringNullableWithAggregatesFilter<"Category"> | string | null
  }

  export type SellerProductWhereInput = {
    AND?: SellerProductWhereInput | SellerProductWhereInput[]
    OR?: SellerProductWhereInput[]
    NOT?: SellerProductWhereInput | SellerProductWhereInput[]
    id?: StringFilter<"SellerProduct"> | string
    sellerId?: StringFilter<"SellerProduct"> | string
    productId?: StringFilter<"SellerProduct"> | string
    price?: FloatFilter<"SellerProduct"> | number
    stock?: IntFilter<"SellerProduct"> | number
    active?: BoolFilter<"SellerProduct"> | boolean
    createdAt?: DateTimeFilter<"SellerProduct"> | Date | string
    updatedAt?: DateTimeFilter<"SellerProduct"> | Date | string
    seller?: XOR<SellerScalarRelationFilter, SellerWhereInput>
    product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
  }

  export type SellerProductOrderByWithRelationInput = {
    id?: SortOrder
    sellerId?: SortOrder
    productId?: SortOrder
    price?: SortOrder
    stock?: SortOrder
    active?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    seller?: SellerOrderByWithRelationInput
    product?: ProductOrderByWithRelationInput
  }

  export type SellerProductWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SellerProductWhereInput | SellerProductWhereInput[]
    OR?: SellerProductWhereInput[]
    NOT?: SellerProductWhereInput | SellerProductWhereInput[]
    sellerId?: StringFilter<"SellerProduct"> | string
    productId?: StringFilter<"SellerProduct"> | string
    price?: FloatFilter<"SellerProduct"> | number
    stock?: IntFilter<"SellerProduct"> | number
    active?: BoolFilter<"SellerProduct"> | boolean
    createdAt?: DateTimeFilter<"SellerProduct"> | Date | string
    updatedAt?: DateTimeFilter<"SellerProduct"> | Date | string
    seller?: XOR<SellerScalarRelationFilter, SellerWhereInput>
    product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
  }, "id">

  export type SellerProductOrderByWithAggregationInput = {
    id?: SortOrder
    sellerId?: SortOrder
    productId?: SortOrder
    price?: SortOrder
    stock?: SortOrder
    active?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SellerProductCountOrderByAggregateInput
    _avg?: SellerProductAvgOrderByAggregateInput
    _max?: SellerProductMaxOrderByAggregateInput
    _min?: SellerProductMinOrderByAggregateInput
    _sum?: SellerProductSumOrderByAggregateInput
  }

  export type SellerProductScalarWhereWithAggregatesInput = {
    AND?: SellerProductScalarWhereWithAggregatesInput | SellerProductScalarWhereWithAggregatesInput[]
    OR?: SellerProductScalarWhereWithAggregatesInput[]
    NOT?: SellerProductScalarWhereWithAggregatesInput | SellerProductScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SellerProduct"> | string
    sellerId?: StringWithAggregatesFilter<"SellerProduct"> | string
    productId?: StringWithAggregatesFilter<"SellerProduct"> | string
    price?: FloatWithAggregatesFilter<"SellerProduct"> | number
    stock?: IntWithAggregatesFilter<"SellerProduct"> | number
    active?: BoolWithAggregatesFilter<"SellerProduct"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"SellerProduct"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"SellerProduct"> | Date | string
  }

  export type ReviewWhereInput = {
    AND?: ReviewWhereInput | ReviewWhereInput[]
    OR?: ReviewWhereInput[]
    NOT?: ReviewWhereInput | ReviewWhereInput[]
    id?: StringFilter<"Review"> | string
    productId?: StringFilter<"Review"> | string
    userId?: StringFilter<"Review"> | string
    rating?: IntFilter<"Review"> | number
    comment?: StringNullableFilter<"Review"> | string | null
    createdAt?: DateTimeFilter<"Review"> | Date | string
    product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type ReviewOrderByWithRelationInput = {
    id?: SortOrder
    productId?: SortOrder
    userId?: SortOrder
    rating?: SortOrder
    comment?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    product?: ProductOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type ReviewWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ReviewWhereInput | ReviewWhereInput[]
    OR?: ReviewWhereInput[]
    NOT?: ReviewWhereInput | ReviewWhereInput[]
    productId?: StringFilter<"Review"> | string
    userId?: StringFilter<"Review"> | string
    rating?: IntFilter<"Review"> | number
    comment?: StringNullableFilter<"Review"> | string | null
    createdAt?: DateTimeFilter<"Review"> | Date | string
    product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type ReviewOrderByWithAggregationInput = {
    id?: SortOrder
    productId?: SortOrder
    userId?: SortOrder
    rating?: SortOrder
    comment?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: ReviewCountOrderByAggregateInput
    _avg?: ReviewAvgOrderByAggregateInput
    _max?: ReviewMaxOrderByAggregateInput
    _min?: ReviewMinOrderByAggregateInput
    _sum?: ReviewSumOrderByAggregateInput
  }

  export type ReviewScalarWhereWithAggregatesInput = {
    AND?: ReviewScalarWhereWithAggregatesInput | ReviewScalarWhereWithAggregatesInput[]
    OR?: ReviewScalarWhereWithAggregatesInput[]
    NOT?: ReviewScalarWhereWithAggregatesInput | ReviewScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Review"> | string
    productId?: StringWithAggregatesFilter<"Review"> | string
    userId?: StringWithAggregatesFilter<"Review"> | string
    rating?: IntWithAggregatesFilter<"Review"> | number
    comment?: StringNullableWithAggregatesFilter<"Review"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Review"> | Date | string
  }

  export type VoucherWhereInput = {
    AND?: VoucherWhereInput | VoucherWhereInput[]
    OR?: VoucherWhereInput[]
    NOT?: VoucherWhereInput | VoucherWhereInput[]
    id?: StringFilter<"Voucher"> | string
    code?: StringFilter<"Voucher"> | string
    discountType?: EnumDiscountTypeFilter<"Voucher"> | $Enums.DiscountType
    discountValue?: FloatFilter<"Voucher"> | number
    minOrderValue?: FloatNullableFilter<"Voucher"> | number | null
    startDate?: DateTimeFilter<"Voucher"> | Date | string
    endDate?: DateTimeFilter<"Voucher"> | Date | string
    usageLimit?: IntNullableFilter<"Voucher"> | number | null
    usedCount?: IntFilter<"Voucher"> | number
    orders?: OrderListRelationFilter
  }

  export type VoucherOrderByWithRelationInput = {
    id?: SortOrder
    code?: SortOrder
    discountType?: SortOrder
    discountValue?: SortOrder
    minOrderValue?: SortOrderInput | SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    usageLimit?: SortOrderInput | SortOrder
    usedCount?: SortOrder
    orders?: OrderOrderByRelationAggregateInput
  }

  export type VoucherWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    code?: string
    AND?: VoucherWhereInput | VoucherWhereInput[]
    OR?: VoucherWhereInput[]
    NOT?: VoucherWhereInput | VoucherWhereInput[]
    discountType?: EnumDiscountTypeFilter<"Voucher"> | $Enums.DiscountType
    discountValue?: FloatFilter<"Voucher"> | number
    minOrderValue?: FloatNullableFilter<"Voucher"> | number | null
    startDate?: DateTimeFilter<"Voucher"> | Date | string
    endDate?: DateTimeFilter<"Voucher"> | Date | string
    usageLimit?: IntNullableFilter<"Voucher"> | number | null
    usedCount?: IntFilter<"Voucher"> | number
    orders?: OrderListRelationFilter
  }, "id" | "code">

  export type VoucherOrderByWithAggregationInput = {
    id?: SortOrder
    code?: SortOrder
    discountType?: SortOrder
    discountValue?: SortOrder
    minOrderValue?: SortOrderInput | SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    usageLimit?: SortOrderInput | SortOrder
    usedCount?: SortOrder
    _count?: VoucherCountOrderByAggregateInput
    _avg?: VoucherAvgOrderByAggregateInput
    _max?: VoucherMaxOrderByAggregateInput
    _min?: VoucherMinOrderByAggregateInput
    _sum?: VoucherSumOrderByAggregateInput
  }

  export type VoucherScalarWhereWithAggregatesInput = {
    AND?: VoucherScalarWhereWithAggregatesInput | VoucherScalarWhereWithAggregatesInput[]
    OR?: VoucherScalarWhereWithAggregatesInput[]
    NOT?: VoucherScalarWhereWithAggregatesInput | VoucherScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Voucher"> | string
    code?: StringWithAggregatesFilter<"Voucher"> | string
    discountType?: EnumDiscountTypeWithAggregatesFilter<"Voucher"> | $Enums.DiscountType
    discountValue?: FloatWithAggregatesFilter<"Voucher"> | number
    minOrderValue?: FloatNullableWithAggregatesFilter<"Voucher"> | number | null
    startDate?: DateTimeWithAggregatesFilter<"Voucher"> | Date | string
    endDate?: DateTimeWithAggregatesFilter<"Voucher"> | Date | string
    usageLimit?: IntNullableWithAggregatesFilter<"Voucher"> | number | null
    usedCount?: IntWithAggregatesFilter<"Voucher"> | number
  }

  export type OrderWhereInput = {
    AND?: OrderWhereInput | OrderWhereInput[]
    OR?: OrderWhereInput[]
    NOT?: OrderWhereInput | OrderWhereInput[]
    id?: StringFilter<"Order"> | string
    userId?: StringFilter<"Order"> | string
    totalAmount?: FloatFilter<"Order"> | number
    status?: EnumOrderStatusFilter<"Order"> | $Enums.OrderStatus
    paymentId?: StringNullableFilter<"Order"> | string | null
    shippingId?: StringNullableFilter<"Order"> | string | null
    voucherId?: StringNullableFilter<"Order"> | string | null
    createdAt?: DateTimeFilter<"Order"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    voucher?: XOR<VoucherNullableScalarRelationFilter, VoucherWhereInput> | null
    payment?: XOR<PaymentNullableScalarRelationFilter, PaymentWhereInput> | null
    orderItems?: OrderItemListRelationFilter
    logisticsOrders?: LogisticsOrderListRelationFilter
  }

  export type OrderOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    totalAmount?: SortOrder
    status?: SortOrder
    paymentId?: SortOrderInput | SortOrder
    shippingId?: SortOrderInput | SortOrder
    voucherId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    voucher?: VoucherOrderByWithRelationInput
    payment?: PaymentOrderByWithRelationInput
    orderItems?: OrderItemOrderByRelationAggregateInput
    logisticsOrders?: LogisticsOrderOrderByRelationAggregateInput
  }

  export type OrderWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: OrderWhereInput | OrderWhereInput[]
    OR?: OrderWhereInput[]
    NOT?: OrderWhereInput | OrderWhereInput[]
    userId?: StringFilter<"Order"> | string
    totalAmount?: FloatFilter<"Order"> | number
    status?: EnumOrderStatusFilter<"Order"> | $Enums.OrderStatus
    paymentId?: StringNullableFilter<"Order"> | string | null
    shippingId?: StringNullableFilter<"Order"> | string | null
    voucherId?: StringNullableFilter<"Order"> | string | null
    createdAt?: DateTimeFilter<"Order"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    voucher?: XOR<VoucherNullableScalarRelationFilter, VoucherWhereInput> | null
    payment?: XOR<PaymentNullableScalarRelationFilter, PaymentWhereInput> | null
    orderItems?: OrderItemListRelationFilter
    logisticsOrders?: LogisticsOrderListRelationFilter
  }, "id">

  export type OrderOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    totalAmount?: SortOrder
    status?: SortOrder
    paymentId?: SortOrderInput | SortOrder
    shippingId?: SortOrderInput | SortOrder
    voucherId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: OrderCountOrderByAggregateInput
    _avg?: OrderAvgOrderByAggregateInput
    _max?: OrderMaxOrderByAggregateInput
    _min?: OrderMinOrderByAggregateInput
    _sum?: OrderSumOrderByAggregateInput
  }

  export type OrderScalarWhereWithAggregatesInput = {
    AND?: OrderScalarWhereWithAggregatesInput | OrderScalarWhereWithAggregatesInput[]
    OR?: OrderScalarWhereWithAggregatesInput[]
    NOT?: OrderScalarWhereWithAggregatesInput | OrderScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Order"> | string
    userId?: StringWithAggregatesFilter<"Order"> | string
    totalAmount?: FloatWithAggregatesFilter<"Order"> | number
    status?: EnumOrderStatusWithAggregatesFilter<"Order"> | $Enums.OrderStatus
    paymentId?: StringNullableWithAggregatesFilter<"Order"> | string | null
    shippingId?: StringNullableWithAggregatesFilter<"Order"> | string | null
    voucherId?: StringNullableWithAggregatesFilter<"Order"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Order"> | Date | string
  }

  export type OrderItemWhereInput = {
    AND?: OrderItemWhereInput | OrderItemWhereInput[]
    OR?: OrderItemWhereInput[]
    NOT?: OrderItemWhereInput | OrderItemWhereInput[]
    id?: StringFilter<"OrderItem"> | string
    orderId?: StringFilter<"OrderItem"> | string
    productId?: StringFilter<"OrderItem"> | string
    variantId?: StringNullableFilter<"OrderItem"> | string | null
    quantity?: IntFilter<"OrderItem"> | number
    price?: FloatFilter<"OrderItem"> | number
    order?: XOR<OrderScalarRelationFilter, OrderWhereInput>
    product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
  }

  export type OrderItemOrderByWithRelationInput = {
    id?: SortOrder
    orderId?: SortOrder
    productId?: SortOrder
    variantId?: SortOrderInput | SortOrder
    quantity?: SortOrder
    price?: SortOrder
    order?: OrderOrderByWithRelationInput
    product?: ProductOrderByWithRelationInput
  }

  export type OrderItemWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: OrderItemWhereInput | OrderItemWhereInput[]
    OR?: OrderItemWhereInput[]
    NOT?: OrderItemWhereInput | OrderItemWhereInput[]
    orderId?: StringFilter<"OrderItem"> | string
    productId?: StringFilter<"OrderItem"> | string
    variantId?: StringNullableFilter<"OrderItem"> | string | null
    quantity?: IntFilter<"OrderItem"> | number
    price?: FloatFilter<"OrderItem"> | number
    order?: XOR<OrderScalarRelationFilter, OrderWhereInput>
    product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
  }, "id">

  export type OrderItemOrderByWithAggregationInput = {
    id?: SortOrder
    orderId?: SortOrder
    productId?: SortOrder
    variantId?: SortOrderInput | SortOrder
    quantity?: SortOrder
    price?: SortOrder
    _count?: OrderItemCountOrderByAggregateInput
    _avg?: OrderItemAvgOrderByAggregateInput
    _max?: OrderItemMaxOrderByAggregateInput
    _min?: OrderItemMinOrderByAggregateInput
    _sum?: OrderItemSumOrderByAggregateInput
  }

  export type OrderItemScalarWhereWithAggregatesInput = {
    AND?: OrderItemScalarWhereWithAggregatesInput | OrderItemScalarWhereWithAggregatesInput[]
    OR?: OrderItemScalarWhereWithAggregatesInput[]
    NOT?: OrderItemScalarWhereWithAggregatesInput | OrderItemScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"OrderItem"> | string
    orderId?: StringWithAggregatesFilter<"OrderItem"> | string
    productId?: StringWithAggregatesFilter<"OrderItem"> | string
    variantId?: StringNullableWithAggregatesFilter<"OrderItem"> | string | null
    quantity?: IntWithAggregatesFilter<"OrderItem"> | number
    price?: FloatWithAggregatesFilter<"OrderItem"> | number
  }

  export type PaymentWhereInput = {
    AND?: PaymentWhereInput | PaymentWhereInput[]
    OR?: PaymentWhereInput[]
    NOT?: PaymentWhereInput | PaymentWhereInput[]
    id?: StringFilter<"Payment"> | string
    orderId?: StringFilter<"Payment"> | string
    method?: EnumPaymentMethodFilter<"Payment"> | $Enums.PaymentMethod
    status?: EnumPaymentStatusFilter<"Payment"> | $Enums.PaymentStatus
    transactionId?: StringNullableFilter<"Payment"> | string | null
    createdAt?: DateTimeFilter<"Payment"> | Date | string
    order?: XOR<OrderScalarRelationFilter, OrderWhereInput>
  }

  export type PaymentOrderByWithRelationInput = {
    id?: SortOrder
    orderId?: SortOrder
    method?: SortOrder
    status?: SortOrder
    transactionId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    order?: OrderOrderByWithRelationInput
  }

  export type PaymentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    orderId?: string
    AND?: PaymentWhereInput | PaymentWhereInput[]
    OR?: PaymentWhereInput[]
    NOT?: PaymentWhereInput | PaymentWhereInput[]
    method?: EnumPaymentMethodFilter<"Payment"> | $Enums.PaymentMethod
    status?: EnumPaymentStatusFilter<"Payment"> | $Enums.PaymentStatus
    transactionId?: StringNullableFilter<"Payment"> | string | null
    createdAt?: DateTimeFilter<"Payment"> | Date | string
    order?: XOR<OrderScalarRelationFilter, OrderWhereInput>
  }, "id" | "orderId">

  export type PaymentOrderByWithAggregationInput = {
    id?: SortOrder
    orderId?: SortOrder
    method?: SortOrder
    status?: SortOrder
    transactionId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: PaymentCountOrderByAggregateInput
    _max?: PaymentMaxOrderByAggregateInput
    _min?: PaymentMinOrderByAggregateInput
  }

  export type PaymentScalarWhereWithAggregatesInput = {
    AND?: PaymentScalarWhereWithAggregatesInput | PaymentScalarWhereWithAggregatesInput[]
    OR?: PaymentScalarWhereWithAggregatesInput[]
    NOT?: PaymentScalarWhereWithAggregatesInput | PaymentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Payment"> | string
    orderId?: StringWithAggregatesFilter<"Payment"> | string
    method?: EnumPaymentMethodWithAggregatesFilter<"Payment"> | $Enums.PaymentMethod
    status?: EnumPaymentStatusWithAggregatesFilter<"Payment"> | $Enums.PaymentStatus
    transactionId?: StringNullableWithAggregatesFilter<"Payment"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Payment"> | Date | string
  }

  export type LogisticsPartnerWhereInput = {
    AND?: LogisticsPartnerWhereInput | LogisticsPartnerWhereInput[]
    OR?: LogisticsPartnerWhereInput[]
    NOT?: LogisticsPartnerWhereInput | LogisticsPartnerWhereInput[]
    id?: StringFilter<"LogisticsPartner"> | string
    userId?: StringFilter<"LogisticsPartner"> | string
    name?: StringFilter<"LogisticsPartner"> | string
    apiEndpoint?: StringNullableFilter<"LogisticsPartner"> | string | null
    baseRate?: FloatFilter<"LogisticsPartner"> | number
    rating?: FloatNullableFilter<"LogisticsPartner"> | number | null
    verified?: BoolFilter<"LogisticsPartner"> | boolean
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    shippers?: ShipperListRelationFilter
    orders?: LogisticsOrderListRelationFilter
  }

  export type LogisticsPartnerOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    apiEndpoint?: SortOrderInput | SortOrder
    baseRate?: SortOrder
    rating?: SortOrderInput | SortOrder
    verified?: SortOrder
    user?: UserOrderByWithRelationInput
    shippers?: ShipperOrderByRelationAggregateInput
    orders?: LogisticsOrderOrderByRelationAggregateInput
  }

  export type LogisticsPartnerWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    AND?: LogisticsPartnerWhereInput | LogisticsPartnerWhereInput[]
    OR?: LogisticsPartnerWhereInput[]
    NOT?: LogisticsPartnerWhereInput | LogisticsPartnerWhereInput[]
    name?: StringFilter<"LogisticsPartner"> | string
    apiEndpoint?: StringNullableFilter<"LogisticsPartner"> | string | null
    baseRate?: FloatFilter<"LogisticsPartner"> | number
    rating?: FloatNullableFilter<"LogisticsPartner"> | number | null
    verified?: BoolFilter<"LogisticsPartner"> | boolean
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    shippers?: ShipperListRelationFilter
    orders?: LogisticsOrderListRelationFilter
  }, "id" | "userId">

  export type LogisticsPartnerOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    apiEndpoint?: SortOrderInput | SortOrder
    baseRate?: SortOrder
    rating?: SortOrderInput | SortOrder
    verified?: SortOrder
    _count?: LogisticsPartnerCountOrderByAggregateInput
    _avg?: LogisticsPartnerAvgOrderByAggregateInput
    _max?: LogisticsPartnerMaxOrderByAggregateInput
    _min?: LogisticsPartnerMinOrderByAggregateInput
    _sum?: LogisticsPartnerSumOrderByAggregateInput
  }

  export type LogisticsPartnerScalarWhereWithAggregatesInput = {
    AND?: LogisticsPartnerScalarWhereWithAggregatesInput | LogisticsPartnerScalarWhereWithAggregatesInput[]
    OR?: LogisticsPartnerScalarWhereWithAggregatesInput[]
    NOT?: LogisticsPartnerScalarWhereWithAggregatesInput | LogisticsPartnerScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"LogisticsPartner"> | string
    userId?: StringWithAggregatesFilter<"LogisticsPartner"> | string
    name?: StringWithAggregatesFilter<"LogisticsPartner"> | string
    apiEndpoint?: StringNullableWithAggregatesFilter<"LogisticsPartner"> | string | null
    baseRate?: FloatWithAggregatesFilter<"LogisticsPartner"> | number
    rating?: FloatNullableWithAggregatesFilter<"LogisticsPartner"> | number | null
    verified?: BoolWithAggregatesFilter<"LogisticsPartner"> | boolean
  }

  export type ShipperWhereInput = {
    AND?: ShipperWhereInput | ShipperWhereInput[]
    OR?: ShipperWhereInput[]
    NOT?: ShipperWhereInput | ShipperWhereInput[]
    id?: StringFilter<"Shipper"> | string
    email?: StringFilter<"Shipper"> | string
    password?: StringFilter<"Shipper"> | string
    name?: StringFilter<"Shipper"> | string
    phone?: StringNullableFilter<"Shipper"> | string | null
    avatar?: StringNullableFilter<"Shipper"> | string | null
    logisticsPartnerId?: StringFilter<"Shipper"> | string
    active?: BoolFilter<"Shipper"> | boolean
    currentLocation?: JsonNullableFilter<"Shipper">
    status?: EnumShipperStatusFilter<"Shipper"> | $Enums.ShipperStatus
    rating?: FloatNullableFilter<"Shipper"> | number | null
    totalDeliveries?: IntFilter<"Shipper"> | number
    totalRatings?: IntFilter<"Shipper"> | number
    deliveryRange?: FloatFilter<"Shipper"> | number
    deliveryHistory?: JsonNullableListFilter<"Shipper">
    createdAt?: DateTimeFilter<"Shipper"> | Date | string
    updatedAt?: DateTimeFilter<"Shipper"> | Date | string
    logisticsPartner?: XOR<LogisticsPartnerScalarRelationFilter, LogisticsPartnerWhereInput>
    assignedOrders?: LogisticsOrderListRelationFilter
  }

  export type ShipperOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    phone?: SortOrderInput | SortOrder
    avatar?: SortOrderInput | SortOrder
    logisticsPartnerId?: SortOrder
    active?: SortOrder
    currentLocation?: SortOrderInput | SortOrder
    status?: SortOrder
    rating?: SortOrderInput | SortOrder
    totalDeliveries?: SortOrder
    totalRatings?: SortOrder
    deliveryRange?: SortOrder
    deliveryHistory?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    logisticsPartner?: LogisticsPartnerOrderByWithRelationInput
    assignedOrders?: LogisticsOrderOrderByRelationAggregateInput
  }

  export type ShipperWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: ShipperWhereInput | ShipperWhereInput[]
    OR?: ShipperWhereInput[]
    NOT?: ShipperWhereInput | ShipperWhereInput[]
    password?: StringFilter<"Shipper"> | string
    name?: StringFilter<"Shipper"> | string
    phone?: StringNullableFilter<"Shipper"> | string | null
    avatar?: StringNullableFilter<"Shipper"> | string | null
    logisticsPartnerId?: StringFilter<"Shipper"> | string
    active?: BoolFilter<"Shipper"> | boolean
    currentLocation?: JsonNullableFilter<"Shipper">
    status?: EnumShipperStatusFilter<"Shipper"> | $Enums.ShipperStatus
    rating?: FloatNullableFilter<"Shipper"> | number | null
    totalDeliveries?: IntFilter<"Shipper"> | number
    totalRatings?: IntFilter<"Shipper"> | number
    deliveryRange?: FloatFilter<"Shipper"> | number
    deliveryHistory?: JsonNullableListFilter<"Shipper">
    createdAt?: DateTimeFilter<"Shipper"> | Date | string
    updatedAt?: DateTimeFilter<"Shipper"> | Date | string
    logisticsPartner?: XOR<LogisticsPartnerScalarRelationFilter, LogisticsPartnerWhereInput>
    assignedOrders?: LogisticsOrderListRelationFilter
  }, "id" | "email">

  export type ShipperOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    phone?: SortOrderInput | SortOrder
    avatar?: SortOrderInput | SortOrder
    logisticsPartnerId?: SortOrder
    active?: SortOrder
    currentLocation?: SortOrderInput | SortOrder
    status?: SortOrder
    rating?: SortOrderInput | SortOrder
    totalDeliveries?: SortOrder
    totalRatings?: SortOrder
    deliveryRange?: SortOrder
    deliveryHistory?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ShipperCountOrderByAggregateInput
    _avg?: ShipperAvgOrderByAggregateInput
    _max?: ShipperMaxOrderByAggregateInput
    _min?: ShipperMinOrderByAggregateInput
    _sum?: ShipperSumOrderByAggregateInput
  }

  export type ShipperScalarWhereWithAggregatesInput = {
    AND?: ShipperScalarWhereWithAggregatesInput | ShipperScalarWhereWithAggregatesInput[]
    OR?: ShipperScalarWhereWithAggregatesInput[]
    NOT?: ShipperScalarWhereWithAggregatesInput | ShipperScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Shipper"> | string
    email?: StringWithAggregatesFilter<"Shipper"> | string
    password?: StringWithAggregatesFilter<"Shipper"> | string
    name?: StringWithAggregatesFilter<"Shipper"> | string
    phone?: StringNullableWithAggregatesFilter<"Shipper"> | string | null
    avatar?: StringNullableWithAggregatesFilter<"Shipper"> | string | null
    logisticsPartnerId?: StringWithAggregatesFilter<"Shipper"> | string
    active?: BoolWithAggregatesFilter<"Shipper"> | boolean
    currentLocation?: JsonNullableWithAggregatesFilter<"Shipper">
    status?: EnumShipperStatusWithAggregatesFilter<"Shipper"> | $Enums.ShipperStatus
    rating?: FloatNullableWithAggregatesFilter<"Shipper"> | number | null
    totalDeliveries?: IntWithAggregatesFilter<"Shipper"> | number
    totalRatings?: IntWithAggregatesFilter<"Shipper"> | number
    deliveryRange?: FloatWithAggregatesFilter<"Shipper"> | number
    deliveryHistory?: JsonNullableListFilter<"Shipper">
    createdAt?: DateTimeWithAggregatesFilter<"Shipper"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Shipper"> | Date | string
  }

  export type LogisticsOrderWhereInput = {
    AND?: LogisticsOrderWhereInput | LogisticsOrderWhereInput[]
    OR?: LogisticsOrderWhereInput[]
    NOT?: LogisticsOrderWhereInput | LogisticsOrderWhereInput[]
    id?: StringFilter<"LogisticsOrder"> | string
    orderId?: StringFilter<"LogisticsOrder"> | string
    logisticsPartnerId?: StringFilter<"LogisticsOrder"> | string
    shipperId?: StringNullableFilter<"LogisticsOrder"> | string | null
    trackingCode?: StringFilter<"LogisticsOrder"> | string
    status?: EnumLogisticsStatusFilter<"LogisticsOrder"> | $Enums.LogisticsStatus
    pickupAddress?: StringFilter<"LogisticsOrder"> | string
    deliveryAddress?: StringFilter<"LogisticsOrder"> | string
    pickupLocation?: JsonNullableFilter<"LogisticsOrder">
    deliveryLocation?: JsonNullableFilter<"LogisticsOrder">
    distance?: FloatNullableFilter<"LogisticsOrder"> | number | null
    estimatedTime?: IntNullableFilter<"LogisticsOrder"> | number | null
    estimatedDelivery?: DateTimeNullableFilter<"LogisticsOrder"> | Date | string | null
    pickupTime?: DateTimeNullableFilter<"LogisticsOrder"> | Date | string | null
    deliveredTime?: DateTimeNullableFilter<"LogisticsOrder"> | Date | string | null
    notes?: StringNullableFilter<"LogisticsOrder"> | string | null
    deliveryAttempts?: IntFilter<"LogisticsOrder"> | number
    customerSignature?: StringNullableFilter<"LogisticsOrder"> | string | null
    proofOfDelivery?: StringNullableListFilter<"LogisticsOrder">
    updatedAt?: DateTimeFilter<"LogisticsOrder"> | Date | string
    cancelReason?: StringNullableFilter<"LogisticsOrder"> | string | null
    rating?: IntNullableFilter<"LogisticsOrder"> | number | null
    feedback?: StringNullableFilter<"LogisticsOrder"> | string | null
    order?: XOR<OrderScalarRelationFilter, OrderWhereInput>
    logisticsPartner?: XOR<LogisticsPartnerScalarRelationFilter, LogisticsPartnerWhereInput>
    shipper?: XOR<ShipperNullableScalarRelationFilter, ShipperWhereInput> | null
  }

  export type LogisticsOrderOrderByWithRelationInput = {
    id?: SortOrder
    orderId?: SortOrder
    logisticsPartnerId?: SortOrder
    shipperId?: SortOrderInput | SortOrder
    trackingCode?: SortOrder
    status?: SortOrder
    pickupAddress?: SortOrder
    deliveryAddress?: SortOrder
    pickupLocation?: SortOrderInput | SortOrder
    deliveryLocation?: SortOrderInput | SortOrder
    distance?: SortOrderInput | SortOrder
    estimatedTime?: SortOrderInput | SortOrder
    estimatedDelivery?: SortOrderInput | SortOrder
    pickupTime?: SortOrderInput | SortOrder
    deliveredTime?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    deliveryAttempts?: SortOrder
    customerSignature?: SortOrderInput | SortOrder
    proofOfDelivery?: SortOrder
    updatedAt?: SortOrder
    cancelReason?: SortOrderInput | SortOrder
    rating?: SortOrderInput | SortOrder
    feedback?: SortOrderInput | SortOrder
    order?: OrderOrderByWithRelationInput
    logisticsPartner?: LogisticsPartnerOrderByWithRelationInput
    shipper?: ShipperOrderByWithRelationInput
  }

  export type LogisticsOrderWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: LogisticsOrderWhereInput | LogisticsOrderWhereInput[]
    OR?: LogisticsOrderWhereInput[]
    NOT?: LogisticsOrderWhereInput | LogisticsOrderWhereInput[]
    orderId?: StringFilter<"LogisticsOrder"> | string
    logisticsPartnerId?: StringFilter<"LogisticsOrder"> | string
    shipperId?: StringNullableFilter<"LogisticsOrder"> | string | null
    trackingCode?: StringFilter<"LogisticsOrder"> | string
    status?: EnumLogisticsStatusFilter<"LogisticsOrder"> | $Enums.LogisticsStatus
    pickupAddress?: StringFilter<"LogisticsOrder"> | string
    deliveryAddress?: StringFilter<"LogisticsOrder"> | string
    pickupLocation?: JsonNullableFilter<"LogisticsOrder">
    deliveryLocation?: JsonNullableFilter<"LogisticsOrder">
    distance?: FloatNullableFilter<"LogisticsOrder"> | number | null
    estimatedTime?: IntNullableFilter<"LogisticsOrder"> | number | null
    estimatedDelivery?: DateTimeNullableFilter<"LogisticsOrder"> | Date | string | null
    pickupTime?: DateTimeNullableFilter<"LogisticsOrder"> | Date | string | null
    deliveredTime?: DateTimeNullableFilter<"LogisticsOrder"> | Date | string | null
    notes?: StringNullableFilter<"LogisticsOrder"> | string | null
    deliveryAttempts?: IntFilter<"LogisticsOrder"> | number
    customerSignature?: StringNullableFilter<"LogisticsOrder"> | string | null
    proofOfDelivery?: StringNullableListFilter<"LogisticsOrder">
    updatedAt?: DateTimeFilter<"LogisticsOrder"> | Date | string
    cancelReason?: StringNullableFilter<"LogisticsOrder"> | string | null
    rating?: IntNullableFilter<"LogisticsOrder"> | number | null
    feedback?: StringNullableFilter<"LogisticsOrder"> | string | null
    order?: XOR<OrderScalarRelationFilter, OrderWhereInput>
    logisticsPartner?: XOR<LogisticsPartnerScalarRelationFilter, LogisticsPartnerWhereInput>
    shipper?: XOR<ShipperNullableScalarRelationFilter, ShipperWhereInput> | null
  }, "id">

  export type LogisticsOrderOrderByWithAggregationInput = {
    id?: SortOrder
    orderId?: SortOrder
    logisticsPartnerId?: SortOrder
    shipperId?: SortOrderInput | SortOrder
    trackingCode?: SortOrder
    status?: SortOrder
    pickupAddress?: SortOrder
    deliveryAddress?: SortOrder
    pickupLocation?: SortOrderInput | SortOrder
    deliveryLocation?: SortOrderInput | SortOrder
    distance?: SortOrderInput | SortOrder
    estimatedTime?: SortOrderInput | SortOrder
    estimatedDelivery?: SortOrderInput | SortOrder
    pickupTime?: SortOrderInput | SortOrder
    deliveredTime?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    deliveryAttempts?: SortOrder
    customerSignature?: SortOrderInput | SortOrder
    proofOfDelivery?: SortOrder
    updatedAt?: SortOrder
    cancelReason?: SortOrderInput | SortOrder
    rating?: SortOrderInput | SortOrder
    feedback?: SortOrderInput | SortOrder
    _count?: LogisticsOrderCountOrderByAggregateInput
    _avg?: LogisticsOrderAvgOrderByAggregateInput
    _max?: LogisticsOrderMaxOrderByAggregateInput
    _min?: LogisticsOrderMinOrderByAggregateInput
    _sum?: LogisticsOrderSumOrderByAggregateInput
  }

  export type LogisticsOrderScalarWhereWithAggregatesInput = {
    AND?: LogisticsOrderScalarWhereWithAggregatesInput | LogisticsOrderScalarWhereWithAggregatesInput[]
    OR?: LogisticsOrderScalarWhereWithAggregatesInput[]
    NOT?: LogisticsOrderScalarWhereWithAggregatesInput | LogisticsOrderScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"LogisticsOrder"> | string
    orderId?: StringWithAggregatesFilter<"LogisticsOrder"> | string
    logisticsPartnerId?: StringWithAggregatesFilter<"LogisticsOrder"> | string
    shipperId?: StringNullableWithAggregatesFilter<"LogisticsOrder"> | string | null
    trackingCode?: StringWithAggregatesFilter<"LogisticsOrder"> | string
    status?: EnumLogisticsStatusWithAggregatesFilter<"LogisticsOrder"> | $Enums.LogisticsStatus
    pickupAddress?: StringWithAggregatesFilter<"LogisticsOrder"> | string
    deliveryAddress?: StringWithAggregatesFilter<"LogisticsOrder"> | string
    pickupLocation?: JsonNullableWithAggregatesFilter<"LogisticsOrder">
    deliveryLocation?: JsonNullableWithAggregatesFilter<"LogisticsOrder">
    distance?: FloatNullableWithAggregatesFilter<"LogisticsOrder"> | number | null
    estimatedTime?: IntNullableWithAggregatesFilter<"LogisticsOrder"> | number | null
    estimatedDelivery?: DateTimeNullableWithAggregatesFilter<"LogisticsOrder"> | Date | string | null
    pickupTime?: DateTimeNullableWithAggregatesFilter<"LogisticsOrder"> | Date | string | null
    deliveredTime?: DateTimeNullableWithAggregatesFilter<"LogisticsOrder"> | Date | string | null
    notes?: StringNullableWithAggregatesFilter<"LogisticsOrder"> | string | null
    deliveryAttempts?: IntWithAggregatesFilter<"LogisticsOrder"> | number
    customerSignature?: StringNullableWithAggregatesFilter<"LogisticsOrder"> | string | null
    proofOfDelivery?: StringNullableListFilter<"LogisticsOrder">
    updatedAt?: DateTimeWithAggregatesFilter<"LogisticsOrder"> | Date | string
    cancelReason?: StringNullableWithAggregatesFilter<"LogisticsOrder"> | string | null
    rating?: IntNullableWithAggregatesFilter<"LogisticsOrder"> | number | null
    feedback?: StringNullableWithAggregatesFilter<"LogisticsOrder"> | string | null
  }

  export type UserBehaviorWhereInput = {
    AND?: UserBehaviorWhereInput | UserBehaviorWhereInput[]
    OR?: UserBehaviorWhereInput[]
    NOT?: UserBehaviorWhereInput | UserBehaviorWhereInput[]
    id?: StringFilter<"UserBehavior"> | string
    userId?: StringFilter<"UserBehavior"> | string
    productId?: StringFilter<"UserBehavior"> | string
    type?: EnumBehaviorTypeFilter<"UserBehavior"> | $Enums.BehaviorType
    createdAt?: DateTimeFilter<"UserBehavior"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
  }

  export type UserBehaviorOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    product?: ProductOrderByWithRelationInput
  }

  export type UserBehaviorWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: UserBehaviorWhereInput | UserBehaviorWhereInput[]
    OR?: UserBehaviorWhereInput[]
    NOT?: UserBehaviorWhereInput | UserBehaviorWhereInput[]
    userId?: StringFilter<"UserBehavior"> | string
    productId?: StringFilter<"UserBehavior"> | string
    type?: EnumBehaviorTypeFilter<"UserBehavior"> | $Enums.BehaviorType
    createdAt?: DateTimeFilter<"UserBehavior"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
  }, "id">

  export type UserBehaviorOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    _count?: UserBehaviorCountOrderByAggregateInput
    _max?: UserBehaviorMaxOrderByAggregateInput
    _min?: UserBehaviorMinOrderByAggregateInput
  }

  export type UserBehaviorScalarWhereWithAggregatesInput = {
    AND?: UserBehaviorScalarWhereWithAggregatesInput | UserBehaviorScalarWhereWithAggregatesInput[]
    OR?: UserBehaviorScalarWhereWithAggregatesInput[]
    NOT?: UserBehaviorScalarWhereWithAggregatesInput | UserBehaviorScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserBehavior"> | string
    userId?: StringWithAggregatesFilter<"UserBehavior"> | string
    productId?: StringWithAggregatesFilter<"UserBehavior"> | string
    type?: EnumBehaviorTypeWithAggregatesFilter<"UserBehavior"> | $Enums.BehaviorType
    createdAt?: DateTimeWithAggregatesFilter<"UserBehavior"> | Date | string
  }

  export type PromotionWhereInput = {
    AND?: PromotionWhereInput | PromotionWhereInput[]
    OR?: PromotionWhereInput[]
    NOT?: PromotionWhereInput | PromotionWhereInput[]
    id?: StringFilter<"Promotion"> | string
    type?: EnumPromotionTypeFilter<"Promotion"> | $Enums.PromotionType
    name?: StringFilter<"Promotion"> | string
    description?: StringNullableFilter<"Promotion"> | string | null
    startDate?: DateTimeFilter<"Promotion"> | Date | string
    endDate?: DateTimeFilter<"Promotion"> | Date | string
    discountPercentage?: FloatNullableFilter<"Promotion"> | number | null
    createdAt?: DateTimeFilter<"Promotion"> | Date | string
    updatedAt?: DateTimeFilter<"Promotion"> | Date | string
    products?: PromotionProductListRelationFilter
    categories?: PromotionCategoryListRelationFilter
  }

  export type PromotionOrderByWithRelationInput = {
    id?: SortOrder
    type?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    discountPercentage?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    products?: PromotionProductOrderByRelationAggregateInput
    categories?: PromotionCategoryOrderByRelationAggregateInput
  }

  export type PromotionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PromotionWhereInput | PromotionWhereInput[]
    OR?: PromotionWhereInput[]
    NOT?: PromotionWhereInput | PromotionWhereInput[]
    type?: EnumPromotionTypeFilter<"Promotion"> | $Enums.PromotionType
    name?: StringFilter<"Promotion"> | string
    description?: StringNullableFilter<"Promotion"> | string | null
    startDate?: DateTimeFilter<"Promotion"> | Date | string
    endDate?: DateTimeFilter<"Promotion"> | Date | string
    discountPercentage?: FloatNullableFilter<"Promotion"> | number | null
    createdAt?: DateTimeFilter<"Promotion"> | Date | string
    updatedAt?: DateTimeFilter<"Promotion"> | Date | string
    products?: PromotionProductListRelationFilter
    categories?: PromotionCategoryListRelationFilter
  }, "id">

  export type PromotionOrderByWithAggregationInput = {
    id?: SortOrder
    type?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    discountPercentage?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PromotionCountOrderByAggregateInput
    _avg?: PromotionAvgOrderByAggregateInput
    _max?: PromotionMaxOrderByAggregateInput
    _min?: PromotionMinOrderByAggregateInput
    _sum?: PromotionSumOrderByAggregateInput
  }

  export type PromotionScalarWhereWithAggregatesInput = {
    AND?: PromotionScalarWhereWithAggregatesInput | PromotionScalarWhereWithAggregatesInput[]
    OR?: PromotionScalarWhereWithAggregatesInput[]
    NOT?: PromotionScalarWhereWithAggregatesInput | PromotionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Promotion"> | string
    type?: EnumPromotionTypeWithAggregatesFilter<"Promotion"> | $Enums.PromotionType
    name?: StringWithAggregatesFilter<"Promotion"> | string
    description?: StringNullableWithAggregatesFilter<"Promotion"> | string | null
    startDate?: DateTimeWithAggregatesFilter<"Promotion"> | Date | string
    endDate?: DateTimeWithAggregatesFilter<"Promotion"> | Date | string
    discountPercentage?: FloatNullableWithAggregatesFilter<"Promotion"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"Promotion"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Promotion"> | Date | string
  }

  export type PromotionProductWhereInput = {
    AND?: PromotionProductWhereInput | PromotionProductWhereInput[]
    OR?: PromotionProductWhereInput[]
    NOT?: PromotionProductWhereInput | PromotionProductWhereInput[]
    id?: StringFilter<"PromotionProduct"> | string
    promotionId?: StringFilter<"PromotionProduct"> | string
    productId?: StringFilter<"PromotionProduct"> | string
    discountPercentage?: FloatFilter<"PromotionProduct"> | number
    quantity?: IntNullableFilter<"PromotionProduct"> | number | null
    soldQuantity?: IntNullableFilter<"PromotionProduct"> | number | null
    promotion?: XOR<PromotionScalarRelationFilter, PromotionWhereInput>
    product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
  }

  export type PromotionProductOrderByWithRelationInput = {
    id?: SortOrder
    promotionId?: SortOrder
    productId?: SortOrder
    discountPercentage?: SortOrder
    quantity?: SortOrderInput | SortOrder
    soldQuantity?: SortOrderInput | SortOrder
    promotion?: PromotionOrderByWithRelationInput
    product?: ProductOrderByWithRelationInput
  }

  export type PromotionProductWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PromotionProductWhereInput | PromotionProductWhereInput[]
    OR?: PromotionProductWhereInput[]
    NOT?: PromotionProductWhereInput | PromotionProductWhereInput[]
    promotionId?: StringFilter<"PromotionProduct"> | string
    productId?: StringFilter<"PromotionProduct"> | string
    discountPercentage?: FloatFilter<"PromotionProduct"> | number
    quantity?: IntNullableFilter<"PromotionProduct"> | number | null
    soldQuantity?: IntNullableFilter<"PromotionProduct"> | number | null
    promotion?: XOR<PromotionScalarRelationFilter, PromotionWhereInput>
    product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
  }, "id">

  export type PromotionProductOrderByWithAggregationInput = {
    id?: SortOrder
    promotionId?: SortOrder
    productId?: SortOrder
    discountPercentage?: SortOrder
    quantity?: SortOrderInput | SortOrder
    soldQuantity?: SortOrderInput | SortOrder
    _count?: PromotionProductCountOrderByAggregateInput
    _avg?: PromotionProductAvgOrderByAggregateInput
    _max?: PromotionProductMaxOrderByAggregateInput
    _min?: PromotionProductMinOrderByAggregateInput
    _sum?: PromotionProductSumOrderByAggregateInput
  }

  export type PromotionProductScalarWhereWithAggregatesInput = {
    AND?: PromotionProductScalarWhereWithAggregatesInput | PromotionProductScalarWhereWithAggregatesInput[]
    OR?: PromotionProductScalarWhereWithAggregatesInput[]
    NOT?: PromotionProductScalarWhereWithAggregatesInput | PromotionProductScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PromotionProduct"> | string
    promotionId?: StringWithAggregatesFilter<"PromotionProduct"> | string
    productId?: StringWithAggregatesFilter<"PromotionProduct"> | string
    discountPercentage?: FloatWithAggregatesFilter<"PromotionProduct"> | number
    quantity?: IntNullableWithAggregatesFilter<"PromotionProduct"> | number | null
    soldQuantity?: IntNullableWithAggregatesFilter<"PromotionProduct"> | number | null
  }

  export type PromotionCategoryWhereInput = {
    AND?: PromotionCategoryWhereInput | PromotionCategoryWhereInput[]
    OR?: PromotionCategoryWhereInput[]
    NOT?: PromotionCategoryWhereInput | PromotionCategoryWhereInput[]
    id?: StringFilter<"PromotionCategory"> | string
    promotionId?: StringFilter<"PromotionCategory"> | string
    categoryId?: StringFilter<"PromotionCategory"> | string
    promotion?: XOR<PromotionScalarRelationFilter, PromotionWhereInput>
    category?: XOR<CategoryScalarRelationFilter, CategoryWhereInput>
  }

  export type PromotionCategoryOrderByWithRelationInput = {
    id?: SortOrder
    promotionId?: SortOrder
    categoryId?: SortOrder
    promotion?: PromotionOrderByWithRelationInput
    category?: CategoryOrderByWithRelationInput
  }

  export type PromotionCategoryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PromotionCategoryWhereInput | PromotionCategoryWhereInput[]
    OR?: PromotionCategoryWhereInput[]
    NOT?: PromotionCategoryWhereInput | PromotionCategoryWhereInput[]
    promotionId?: StringFilter<"PromotionCategory"> | string
    categoryId?: StringFilter<"PromotionCategory"> | string
    promotion?: XOR<PromotionScalarRelationFilter, PromotionWhereInput>
    category?: XOR<CategoryScalarRelationFilter, CategoryWhereInput>
  }, "id">

  export type PromotionCategoryOrderByWithAggregationInput = {
    id?: SortOrder
    promotionId?: SortOrder
    categoryId?: SortOrder
    _count?: PromotionCategoryCountOrderByAggregateInput
    _max?: PromotionCategoryMaxOrderByAggregateInput
    _min?: PromotionCategoryMinOrderByAggregateInput
  }

  export type PromotionCategoryScalarWhereWithAggregatesInput = {
    AND?: PromotionCategoryScalarWhereWithAggregatesInput | PromotionCategoryScalarWhereWithAggregatesInput[]
    OR?: PromotionCategoryScalarWhereWithAggregatesInput[]
    NOT?: PromotionCategoryScalarWhereWithAggregatesInput | PromotionCategoryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PromotionCategory"> | string
    promotionId?: StringWithAggregatesFilter<"PromotionCategory"> | string
    categoryId?: StringWithAggregatesFilter<"PromotionCategory"> | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    password: string
    name: string
    avatar?: string | null
    phone?: string | null
    role: $Enums.Role
    isVerified?: boolean
    verificationToken?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    seller?: SellerCreateNestedOneWithoutUserInput
    enterprise?: EnterpriseCreateNestedOneWithoutUserInput
    logistics?: LogisticsPartnerCreateNestedOneWithoutUserInput
    addresses?: AddressCreateNestedManyWithoutUserInput
    orders?: OrderCreateNestedManyWithoutUserInput
    reviews?: ReviewCreateNestedManyWithoutUserInput
    behaviors?: UserBehaviorCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    password: string
    name: string
    avatar?: string | null
    phone?: string | null
    role: $Enums.Role
    isVerified?: boolean
    verificationToken?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    seller?: SellerUncheckedCreateNestedOneWithoutUserInput
    enterprise?: EnterpriseUncheckedCreateNestedOneWithoutUserInput
    logistics?: LogisticsPartnerUncheckedCreateNestedOneWithoutUserInput
    addresses?: AddressUncheckedCreateNestedManyWithoutUserInput
    orders?: OrderUncheckedCreateNestedManyWithoutUserInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutUserInput
    behaviors?: UserBehaviorUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    seller?: SellerUpdateOneWithoutUserNestedInput
    enterprise?: EnterpriseUpdateOneWithoutUserNestedInput
    logistics?: LogisticsPartnerUpdateOneWithoutUserNestedInput
    addresses?: AddressUpdateManyWithoutUserNestedInput
    orders?: OrderUpdateManyWithoutUserNestedInput
    reviews?: ReviewUpdateManyWithoutUserNestedInput
    behaviors?: UserBehaviorUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    seller?: SellerUncheckedUpdateOneWithoutUserNestedInput
    enterprise?: EnterpriseUncheckedUpdateOneWithoutUserNestedInput
    logistics?: LogisticsPartnerUncheckedUpdateOneWithoutUserNestedInput
    addresses?: AddressUncheckedUpdateManyWithoutUserNestedInput
    orders?: OrderUncheckedUpdateManyWithoutUserNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutUserNestedInput
    behaviors?: UserBehaviorUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    password: string
    name: string
    avatar?: string | null
    phone?: string | null
    role: $Enums.Role
    isVerified?: boolean
    verificationToken?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AddressCreateInput = {
    id?: string
    label?: string | null
    fullName: string
    phone: string
    province: string
    district: string
    ward: string
    street: string
    isDefault?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutAddressesInput
  }

  export type AddressUncheckedCreateInput = {
    id?: string
    userId: string
    label?: string | null
    fullName: string
    phone: string
    province: string
    district: string
    ward: string
    street: string
    isDefault?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AddressUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: NullableStringFieldUpdateOperationsInput | string | null
    fullName?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    province?: StringFieldUpdateOperationsInput | string
    district?: StringFieldUpdateOperationsInput | string
    ward?: StringFieldUpdateOperationsInput | string
    street?: StringFieldUpdateOperationsInput | string
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAddressesNestedInput
  }

  export type AddressUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    label?: NullableStringFieldUpdateOperationsInput | string | null
    fullName?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    province?: StringFieldUpdateOperationsInput | string
    district?: StringFieldUpdateOperationsInput | string
    ward?: StringFieldUpdateOperationsInput | string
    street?: StringFieldUpdateOperationsInput | string
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AddressCreateManyInput = {
    id?: string
    userId: string
    label?: string | null
    fullName: string
    phone: string
    province: string
    district: string
    ward: string
    street: string
    isDefault?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AddressUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: NullableStringFieldUpdateOperationsInput | string | null
    fullName?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    province?: StringFieldUpdateOperationsInput | string
    district?: StringFieldUpdateOperationsInput | string
    ward?: StringFieldUpdateOperationsInput | string
    street?: StringFieldUpdateOperationsInput | string
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AddressUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    label?: NullableStringFieldUpdateOperationsInput | string | null
    fullName?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    province?: StringFieldUpdateOperationsInput | string
    district?: StringFieldUpdateOperationsInput | string
    ward?: StringFieldUpdateOperationsInput | string
    street?: StringFieldUpdateOperationsInput | string
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SellerCreateInput = {
    id?: string
    storeName: string
    verified?: boolean
    rating?: number | null
    user: UserCreateNestedOneWithoutSellerInput
    products?: ProductCreateNestedManyWithoutSellerInput
    sellerProducts?: SellerProductCreateNestedManyWithoutSellerInput
  }

  export type SellerUncheckedCreateInput = {
    id?: string
    userId: string
    storeName: string
    verified?: boolean
    rating?: number | null
    products?: ProductUncheckedCreateNestedManyWithoutSellerInput
    sellerProducts?: SellerProductUncheckedCreateNestedManyWithoutSellerInput
  }

  export type SellerUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    storeName?: StringFieldUpdateOperationsInput | string
    verified?: BoolFieldUpdateOperationsInput | boolean
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    user?: UserUpdateOneRequiredWithoutSellerNestedInput
    products?: ProductUpdateManyWithoutSellerNestedInput
    sellerProducts?: SellerProductUpdateManyWithoutSellerNestedInput
  }

  export type SellerUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    storeName?: StringFieldUpdateOperationsInput | string
    verified?: BoolFieldUpdateOperationsInput | boolean
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    products?: ProductUncheckedUpdateManyWithoutSellerNestedInput
    sellerProducts?: SellerProductUncheckedUpdateManyWithoutSellerNestedInput
  }

  export type SellerCreateManyInput = {
    id?: string
    userId: string
    storeName: string
    verified?: boolean
    rating?: number | null
  }

  export type SellerUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    storeName?: StringFieldUpdateOperationsInput | string
    verified?: BoolFieldUpdateOperationsInput | boolean
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type SellerUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    storeName?: StringFieldUpdateOperationsInput | string
    verified?: BoolFieldUpdateOperationsInput | boolean
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type EnterpriseCreateInput = {
    id?: string
    companyName: string
    taxCode?: string | null
    verified?: boolean
    officialBrand?: boolean
    rating?: number | null
    user: UserCreateNestedOneWithoutEnterpriseInput
    products?: ProductCreateNestedManyWithoutEnterpriseInput
  }

  export type EnterpriseUncheckedCreateInput = {
    id?: string
    userId: string
    companyName: string
    taxCode?: string | null
    verified?: boolean
    officialBrand?: boolean
    rating?: number | null
    products?: ProductUncheckedCreateNestedManyWithoutEnterpriseInput
  }

  export type EnterpriseUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyName?: StringFieldUpdateOperationsInput | string
    taxCode?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    officialBrand?: BoolFieldUpdateOperationsInput | boolean
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    user?: UserUpdateOneRequiredWithoutEnterpriseNestedInput
    products?: ProductUpdateManyWithoutEnterpriseNestedInput
  }

  export type EnterpriseUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    companyName?: StringFieldUpdateOperationsInput | string
    taxCode?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    officialBrand?: BoolFieldUpdateOperationsInput | boolean
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    products?: ProductUncheckedUpdateManyWithoutEnterpriseNestedInput
  }

  export type EnterpriseCreateManyInput = {
    id?: string
    userId: string
    companyName: string
    taxCode?: string | null
    verified?: boolean
    officialBrand?: boolean
    rating?: number | null
  }

  export type EnterpriseUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyName?: StringFieldUpdateOperationsInput | string
    taxCode?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    officialBrand?: BoolFieldUpdateOperationsInput | boolean
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type EnterpriseUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    companyName?: StringFieldUpdateOperationsInput | string
    taxCode?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    officialBrand?: BoolFieldUpdateOperationsInput | boolean
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type ProductCreateInput = {
    id?: string
    name: string
    description: string
    basePrice: number
    stock: number
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    category: CategoryCreateNestedOneWithoutProductsInput
    seller?: SellerCreateNestedOneWithoutProductsInput
    enterprise?: EnterpriseCreateNestedOneWithoutProductsInput
    variants?: ProductVariantCreateNestedManyWithoutProductInput
    reviews?: ReviewCreateNestedManyWithoutProductInput
    orderItems?: OrderItemCreateNestedManyWithoutProductInput
    behaviors?: UserBehaviorCreateNestedManyWithoutProductInput
    promotions?: PromotionProductCreateNestedManyWithoutProductInput
    sellerProducts?: SellerProductCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateInput = {
    id?: string
    name: string
    description: string
    categoryId: string
    sellerId?: string | null
    enterpriseId?: string | null
    basePrice: number
    stock: number
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    variants?: ProductVariantUncheckedCreateNestedManyWithoutProductInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutProductInput
    orderItems?: OrderItemUncheckedCreateNestedManyWithoutProductInput
    behaviors?: UserBehaviorUncheckedCreateNestedManyWithoutProductInput
    promotions?: PromotionProductUncheckedCreateNestedManyWithoutProductInput
    sellerProducts?: SellerProductUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    basePrice?: FloatFieldUpdateOperationsInput | number
    stock?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: CategoryUpdateOneRequiredWithoutProductsNestedInput
    seller?: SellerUpdateOneWithoutProductsNestedInput
    enterprise?: EnterpriseUpdateOneWithoutProductsNestedInput
    variants?: ProductVariantUpdateManyWithoutProductNestedInput
    reviews?: ReviewUpdateManyWithoutProductNestedInput
    orderItems?: OrderItemUpdateManyWithoutProductNestedInput
    behaviors?: UserBehaviorUpdateManyWithoutProductNestedInput
    promotions?: PromotionProductUpdateManyWithoutProductNestedInput
    sellerProducts?: SellerProductUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    sellerId?: NullableStringFieldUpdateOperationsInput | string | null
    enterpriseId?: NullableStringFieldUpdateOperationsInput | string | null
    basePrice?: FloatFieldUpdateOperationsInput | number
    stock?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    variants?: ProductVariantUncheckedUpdateManyWithoutProductNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutProductNestedInput
    orderItems?: OrderItemUncheckedUpdateManyWithoutProductNestedInput
    behaviors?: UserBehaviorUncheckedUpdateManyWithoutProductNestedInput
    promotions?: PromotionProductUncheckedUpdateManyWithoutProductNestedInput
    sellerProducts?: SellerProductUncheckedUpdateManyWithoutProductNestedInput
  }

  export type ProductCreateManyInput = {
    id?: string
    name: string
    description: string
    categoryId: string
    sellerId?: string | null
    enterpriseId?: string | null
    basePrice: number
    stock: number
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProductUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    basePrice?: FloatFieldUpdateOperationsInput | number
    stock?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    sellerId?: NullableStringFieldUpdateOperationsInput | string | null
    enterpriseId?: NullableStringFieldUpdateOperationsInput | string | null
    basePrice?: FloatFieldUpdateOperationsInput | number
    stock?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductVariantCreateInput = {
    id?: string
    color?: string | null
    size?: string | null
    price: number
    stock: number
    product: ProductCreateNestedOneWithoutVariantsInput
  }

  export type ProductVariantUncheckedCreateInput = {
    id?: string
    productId: string
    color?: string | null
    size?: string | null
    price: number
    stock: number
  }

  export type ProductVariantUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    color?: NullableStringFieldUpdateOperationsInput | string | null
    size?: NullableStringFieldUpdateOperationsInput | string | null
    price?: FloatFieldUpdateOperationsInput | number
    stock?: IntFieldUpdateOperationsInput | number
    product?: ProductUpdateOneRequiredWithoutVariantsNestedInput
  }

  export type ProductVariantUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    color?: NullableStringFieldUpdateOperationsInput | string | null
    size?: NullableStringFieldUpdateOperationsInput | string | null
    price?: FloatFieldUpdateOperationsInput | number
    stock?: IntFieldUpdateOperationsInput | number
  }

  export type ProductVariantCreateManyInput = {
    id?: string
    productId: string
    color?: string | null
    size?: string | null
    price: number
    stock: number
  }

  export type ProductVariantUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    color?: NullableStringFieldUpdateOperationsInput | string | null
    size?: NullableStringFieldUpdateOperationsInput | string | null
    price?: FloatFieldUpdateOperationsInput | number
    stock?: IntFieldUpdateOperationsInput | number
  }

  export type ProductVariantUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    color?: NullableStringFieldUpdateOperationsInput | string | null
    size?: NullableStringFieldUpdateOperationsInput | string | null
    price?: FloatFieldUpdateOperationsInput | number
    stock?: IntFieldUpdateOperationsInput | number
  }

  export type CategoryCreateInput = {
    id?: string
    name: string
    parent?: CategoryCreateNestedOneWithoutChildrenInput
    children?: CategoryCreateNestedManyWithoutParentInput
    products?: ProductCreateNestedManyWithoutCategoryInput
    promotions?: PromotionCategoryCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUncheckedCreateInput = {
    id?: string
    name: string
    parentId?: string | null
    children?: CategoryUncheckedCreateNestedManyWithoutParentInput
    products?: ProductUncheckedCreateNestedManyWithoutCategoryInput
    promotions?: PromotionCategoryUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    parent?: CategoryUpdateOneWithoutChildrenNestedInput
    children?: CategoryUpdateManyWithoutParentNestedInput
    products?: ProductUpdateManyWithoutCategoryNestedInput
    promotions?: PromotionCategoryUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    children?: CategoryUncheckedUpdateManyWithoutParentNestedInput
    products?: ProductUncheckedUpdateManyWithoutCategoryNestedInput
    promotions?: PromotionCategoryUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryCreateManyInput = {
    id?: string
    name: string
    parentId?: string | null
  }

  export type CategoryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type CategoryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SellerProductCreateInput = {
    id?: string
    price: number
    stock: number
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    seller: SellerCreateNestedOneWithoutSellerProductsInput
    product: ProductCreateNestedOneWithoutSellerProductsInput
  }

  export type SellerProductUncheckedCreateInput = {
    id?: string
    sellerId: string
    productId: string
    price: number
    stock: number
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SellerProductUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    stock?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    seller?: SellerUpdateOneRequiredWithoutSellerProductsNestedInput
    product?: ProductUpdateOneRequiredWithoutSellerProductsNestedInput
  }

  export type SellerProductUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sellerId?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    stock?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SellerProductCreateManyInput = {
    id?: string
    sellerId: string
    productId: string
    price: number
    stock: number
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SellerProductUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    stock?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SellerProductUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    sellerId?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    stock?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReviewCreateInput = {
    id?: string
    rating: number
    comment?: string | null
    createdAt?: Date | string
    product: ProductCreateNestedOneWithoutReviewsInput
    user: UserCreateNestedOneWithoutReviewsInput
  }

  export type ReviewUncheckedCreateInput = {
    id?: string
    productId: string
    userId: string
    rating: number
    comment?: string | null
    createdAt?: Date | string
  }

  export type ReviewUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    product?: ProductUpdateOneRequiredWithoutReviewsNestedInput
    user?: UserUpdateOneRequiredWithoutReviewsNestedInput
  }

  export type ReviewUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReviewCreateManyInput = {
    id?: string
    productId: string
    userId: string
    rating: number
    comment?: string | null
    createdAt?: Date | string
  }

  export type ReviewUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReviewUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VoucherCreateInput = {
    id?: string
    code: string
    discountType: $Enums.DiscountType
    discountValue: number
    minOrderValue?: number | null
    startDate: Date | string
    endDate: Date | string
    usageLimit?: number | null
    usedCount?: number
    orders?: OrderCreateNestedManyWithoutVoucherInput
  }

  export type VoucherUncheckedCreateInput = {
    id?: string
    code: string
    discountType: $Enums.DiscountType
    discountValue: number
    minOrderValue?: number | null
    startDate: Date | string
    endDate: Date | string
    usageLimit?: number | null
    usedCount?: number
    orders?: OrderUncheckedCreateNestedManyWithoutVoucherInput
  }

  export type VoucherUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    discountType?: EnumDiscountTypeFieldUpdateOperationsInput | $Enums.DiscountType
    discountValue?: FloatFieldUpdateOperationsInput | number
    minOrderValue?: NullableFloatFieldUpdateOperationsInput | number | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    usageLimit?: NullableIntFieldUpdateOperationsInput | number | null
    usedCount?: IntFieldUpdateOperationsInput | number
    orders?: OrderUpdateManyWithoutVoucherNestedInput
  }

  export type VoucherUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    discountType?: EnumDiscountTypeFieldUpdateOperationsInput | $Enums.DiscountType
    discountValue?: FloatFieldUpdateOperationsInput | number
    minOrderValue?: NullableFloatFieldUpdateOperationsInput | number | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    usageLimit?: NullableIntFieldUpdateOperationsInput | number | null
    usedCount?: IntFieldUpdateOperationsInput | number
    orders?: OrderUncheckedUpdateManyWithoutVoucherNestedInput
  }

  export type VoucherCreateManyInput = {
    id?: string
    code: string
    discountType: $Enums.DiscountType
    discountValue: number
    minOrderValue?: number | null
    startDate: Date | string
    endDate: Date | string
    usageLimit?: number | null
    usedCount?: number
  }

  export type VoucherUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    discountType?: EnumDiscountTypeFieldUpdateOperationsInput | $Enums.DiscountType
    discountValue?: FloatFieldUpdateOperationsInput | number
    minOrderValue?: NullableFloatFieldUpdateOperationsInput | number | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    usageLimit?: NullableIntFieldUpdateOperationsInput | number | null
    usedCount?: IntFieldUpdateOperationsInput | number
  }

  export type VoucherUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    discountType?: EnumDiscountTypeFieldUpdateOperationsInput | $Enums.DiscountType
    discountValue?: FloatFieldUpdateOperationsInput | number
    minOrderValue?: NullableFloatFieldUpdateOperationsInput | number | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    usageLimit?: NullableIntFieldUpdateOperationsInput | number | null
    usedCount?: IntFieldUpdateOperationsInput | number
  }

  export type OrderCreateInput = {
    id?: string
    totalAmount: number
    status?: $Enums.OrderStatus
    paymentId?: string | null
    shippingId?: string | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutOrdersInput
    voucher?: VoucherCreateNestedOneWithoutOrdersInput
    payment?: PaymentCreateNestedOneWithoutOrderInput
    orderItems?: OrderItemCreateNestedManyWithoutOrderInput
    logisticsOrders?: LogisticsOrderCreateNestedManyWithoutOrderInput
  }

  export type OrderUncheckedCreateInput = {
    id?: string
    userId: string
    totalAmount: number
    status?: $Enums.OrderStatus
    paymentId?: string | null
    shippingId?: string | null
    voucherId?: string | null
    createdAt?: Date | string
    payment?: PaymentUncheckedCreateNestedOneWithoutOrderInput
    orderItems?: OrderItemUncheckedCreateNestedManyWithoutOrderInput
    logisticsOrders?: LogisticsOrderUncheckedCreateNestedManyWithoutOrderInput
  }

  export type OrderUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    totalAmount?: FloatFieldUpdateOperationsInput | number
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    shippingId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutOrdersNestedInput
    voucher?: VoucherUpdateOneWithoutOrdersNestedInput
    payment?: PaymentUpdateOneWithoutOrderNestedInput
    orderItems?: OrderItemUpdateManyWithoutOrderNestedInput
    logisticsOrders?: LogisticsOrderUpdateManyWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    totalAmount?: FloatFieldUpdateOperationsInput | number
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    shippingId?: NullableStringFieldUpdateOperationsInput | string | null
    voucherId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    payment?: PaymentUncheckedUpdateOneWithoutOrderNestedInput
    orderItems?: OrderItemUncheckedUpdateManyWithoutOrderNestedInput
    logisticsOrders?: LogisticsOrderUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type OrderCreateManyInput = {
    id?: string
    userId: string
    totalAmount: number
    status?: $Enums.OrderStatus
    paymentId?: string | null
    shippingId?: string | null
    voucherId?: string | null
    createdAt?: Date | string
  }

  export type OrderUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    totalAmount?: FloatFieldUpdateOperationsInput | number
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    shippingId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    totalAmount?: FloatFieldUpdateOperationsInput | number
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    shippingId?: NullableStringFieldUpdateOperationsInput | string | null
    voucherId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderItemCreateInput = {
    id?: string
    variantId?: string | null
    quantity: number
    price: number
    order: OrderCreateNestedOneWithoutOrderItemsInput
    product: ProductCreateNestedOneWithoutOrderItemsInput
  }

  export type OrderItemUncheckedCreateInput = {
    id?: string
    orderId: string
    productId: string
    variantId?: string | null
    quantity: number
    price: number
  }

  export type OrderItemUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    variantId?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    order?: OrderUpdateOneRequiredWithoutOrderItemsNestedInput
    product?: ProductUpdateOneRequiredWithoutOrderItemsNestedInput
  }

  export type OrderItemUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderId?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    variantId?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
  }

  export type OrderItemCreateManyInput = {
    id?: string
    orderId: string
    productId: string
    variantId?: string | null
    quantity: number
    price: number
  }

  export type OrderItemUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    variantId?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
  }

  export type OrderItemUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderId?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    variantId?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
  }

  export type PaymentCreateInput = {
    id?: string
    method: $Enums.PaymentMethod
    status?: $Enums.PaymentStatus
    transactionId?: string | null
    createdAt?: Date | string
    order: OrderCreateNestedOneWithoutPaymentInput
  }

  export type PaymentUncheckedCreateInput = {
    id?: string
    orderId: string
    method: $Enums.PaymentMethod
    status?: $Enums.PaymentStatus
    transactionId?: string | null
    createdAt?: Date | string
  }

  export type PaymentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    transactionId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    order?: OrderUpdateOneRequiredWithoutPaymentNestedInput
  }

  export type PaymentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderId?: StringFieldUpdateOperationsInput | string
    method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    transactionId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentCreateManyInput = {
    id?: string
    orderId: string
    method: $Enums.PaymentMethod
    status?: $Enums.PaymentStatus
    transactionId?: string | null
    createdAt?: Date | string
  }

  export type PaymentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    transactionId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderId?: StringFieldUpdateOperationsInput | string
    method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    transactionId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LogisticsPartnerCreateInput = {
    id?: string
    name: string
    apiEndpoint?: string | null
    baseRate: number
    rating?: number | null
    verified?: boolean
    user: UserCreateNestedOneWithoutLogisticsInput
    shippers?: ShipperCreateNestedManyWithoutLogisticsPartnerInput
    orders?: LogisticsOrderCreateNestedManyWithoutLogisticsPartnerInput
  }

  export type LogisticsPartnerUncheckedCreateInput = {
    id?: string
    userId: string
    name: string
    apiEndpoint?: string | null
    baseRate: number
    rating?: number | null
    verified?: boolean
    shippers?: ShipperUncheckedCreateNestedManyWithoutLogisticsPartnerInput
    orders?: LogisticsOrderUncheckedCreateNestedManyWithoutLogisticsPartnerInput
  }

  export type LogisticsPartnerUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    apiEndpoint?: NullableStringFieldUpdateOperationsInput | string | null
    baseRate?: FloatFieldUpdateOperationsInput | number
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutLogisticsNestedInput
    shippers?: ShipperUpdateManyWithoutLogisticsPartnerNestedInput
    orders?: LogisticsOrderUpdateManyWithoutLogisticsPartnerNestedInput
  }

  export type LogisticsPartnerUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    apiEndpoint?: NullableStringFieldUpdateOperationsInput | string | null
    baseRate?: FloatFieldUpdateOperationsInput | number
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    shippers?: ShipperUncheckedUpdateManyWithoutLogisticsPartnerNestedInput
    orders?: LogisticsOrderUncheckedUpdateManyWithoutLogisticsPartnerNestedInput
  }

  export type LogisticsPartnerCreateManyInput = {
    id?: string
    userId: string
    name: string
    apiEndpoint?: string | null
    baseRate: number
    rating?: number | null
    verified?: boolean
  }

  export type LogisticsPartnerUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    apiEndpoint?: NullableStringFieldUpdateOperationsInput | string | null
    baseRate?: FloatFieldUpdateOperationsInput | number
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    verified?: BoolFieldUpdateOperationsInput | boolean
  }

  export type LogisticsPartnerUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    apiEndpoint?: NullableStringFieldUpdateOperationsInput | string | null
    baseRate?: FloatFieldUpdateOperationsInput | number
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    verified?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ShipperCreateInput = {
    id?: string
    email: string
    password: string
    name: string
    phone?: string | null
    avatar?: string | null
    active?: boolean
    currentLocation?: NullableJsonNullValueInput | InputJsonValue
    status?: $Enums.ShipperStatus
    rating?: number | null
    totalDeliveries?: number
    totalRatings?: number
    deliveryRange?: number
    deliveryHistory?: ShipperCreatedeliveryHistoryInput | InputJsonValue[]
    createdAt?: Date | string
    updatedAt?: Date | string
    logisticsPartner: LogisticsPartnerCreateNestedOneWithoutShippersInput
    assignedOrders?: LogisticsOrderCreateNestedManyWithoutShipperInput
  }

  export type ShipperUncheckedCreateInput = {
    id?: string
    email: string
    password: string
    name: string
    phone?: string | null
    avatar?: string | null
    logisticsPartnerId: string
    active?: boolean
    currentLocation?: NullableJsonNullValueInput | InputJsonValue
    status?: $Enums.ShipperStatus
    rating?: number | null
    totalDeliveries?: number
    totalRatings?: number
    deliveryRange?: number
    deliveryHistory?: ShipperCreatedeliveryHistoryInput | InputJsonValue[]
    createdAt?: Date | string
    updatedAt?: Date | string
    assignedOrders?: LogisticsOrderUncheckedCreateNestedManyWithoutShipperInput
  }

  export type ShipperUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    currentLocation?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumShipperStatusFieldUpdateOperationsInput | $Enums.ShipperStatus
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    totalDeliveries?: IntFieldUpdateOperationsInput | number
    totalRatings?: IntFieldUpdateOperationsInput | number
    deliveryRange?: FloatFieldUpdateOperationsInput | number
    deliveryHistory?: ShipperUpdatedeliveryHistoryInput | InputJsonValue[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    logisticsPartner?: LogisticsPartnerUpdateOneRequiredWithoutShippersNestedInput
    assignedOrders?: LogisticsOrderUpdateManyWithoutShipperNestedInput
  }

  export type ShipperUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    logisticsPartnerId?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    currentLocation?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumShipperStatusFieldUpdateOperationsInput | $Enums.ShipperStatus
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    totalDeliveries?: IntFieldUpdateOperationsInput | number
    totalRatings?: IntFieldUpdateOperationsInput | number
    deliveryRange?: FloatFieldUpdateOperationsInput | number
    deliveryHistory?: ShipperUpdatedeliveryHistoryInput | InputJsonValue[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedOrders?: LogisticsOrderUncheckedUpdateManyWithoutShipperNestedInput
  }

  export type ShipperCreateManyInput = {
    id?: string
    email: string
    password: string
    name: string
    phone?: string | null
    avatar?: string | null
    logisticsPartnerId: string
    active?: boolean
    currentLocation?: NullableJsonNullValueInput | InputJsonValue
    status?: $Enums.ShipperStatus
    rating?: number | null
    totalDeliveries?: number
    totalRatings?: number
    deliveryRange?: number
    deliveryHistory?: ShipperCreatedeliveryHistoryInput | InputJsonValue[]
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ShipperUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    currentLocation?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumShipperStatusFieldUpdateOperationsInput | $Enums.ShipperStatus
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    totalDeliveries?: IntFieldUpdateOperationsInput | number
    totalRatings?: IntFieldUpdateOperationsInput | number
    deliveryRange?: FloatFieldUpdateOperationsInput | number
    deliveryHistory?: ShipperUpdatedeliveryHistoryInput | InputJsonValue[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShipperUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    logisticsPartnerId?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    currentLocation?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumShipperStatusFieldUpdateOperationsInput | $Enums.ShipperStatus
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    totalDeliveries?: IntFieldUpdateOperationsInput | number
    totalRatings?: IntFieldUpdateOperationsInput | number
    deliveryRange?: FloatFieldUpdateOperationsInput | number
    deliveryHistory?: ShipperUpdatedeliveryHistoryInput | InputJsonValue[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LogisticsOrderCreateInput = {
    id?: string
    trackingCode: string
    status?: $Enums.LogisticsStatus
    pickupAddress: string
    deliveryAddress: string
    pickupLocation?: NullableJsonNullValueInput | InputJsonValue
    deliveryLocation?: NullableJsonNullValueInput | InputJsonValue
    distance?: number | null
    estimatedTime?: number | null
    estimatedDelivery?: Date | string | null
    pickupTime?: Date | string | null
    deliveredTime?: Date | string | null
    notes?: string | null
    deliveryAttempts?: number
    customerSignature?: string | null
    proofOfDelivery?: LogisticsOrderCreateproofOfDeliveryInput | string[]
    updatedAt?: Date | string
    cancelReason?: string | null
    rating?: number | null
    feedback?: string | null
    order: OrderCreateNestedOneWithoutLogisticsOrdersInput
    logisticsPartner: LogisticsPartnerCreateNestedOneWithoutOrdersInput
    shipper?: ShipperCreateNestedOneWithoutAssignedOrdersInput
  }

  export type LogisticsOrderUncheckedCreateInput = {
    id?: string
    orderId: string
    logisticsPartnerId: string
    shipperId?: string | null
    trackingCode: string
    status?: $Enums.LogisticsStatus
    pickupAddress: string
    deliveryAddress: string
    pickupLocation?: NullableJsonNullValueInput | InputJsonValue
    deliveryLocation?: NullableJsonNullValueInput | InputJsonValue
    distance?: number | null
    estimatedTime?: number | null
    estimatedDelivery?: Date | string | null
    pickupTime?: Date | string | null
    deliveredTime?: Date | string | null
    notes?: string | null
    deliveryAttempts?: number
    customerSignature?: string | null
    proofOfDelivery?: LogisticsOrderCreateproofOfDeliveryInput | string[]
    updatedAt?: Date | string
    cancelReason?: string | null
    rating?: number | null
    feedback?: string | null
  }

  export type LogisticsOrderUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    trackingCode?: StringFieldUpdateOperationsInput | string
    status?: EnumLogisticsStatusFieldUpdateOperationsInput | $Enums.LogisticsStatus
    pickupAddress?: StringFieldUpdateOperationsInput | string
    deliveryAddress?: StringFieldUpdateOperationsInput | string
    pickupLocation?: NullableJsonNullValueInput | InputJsonValue
    deliveryLocation?: NullableJsonNullValueInput | InputJsonValue
    distance?: NullableFloatFieldUpdateOperationsInput | number | null
    estimatedTime?: NullableIntFieldUpdateOperationsInput | number | null
    estimatedDelivery?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pickupTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deliveredTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    deliveryAttempts?: IntFieldUpdateOperationsInput | number
    customerSignature?: NullableStringFieldUpdateOperationsInput | string | null
    proofOfDelivery?: LogisticsOrderUpdateproofOfDeliveryInput | string[]
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cancelReason?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
    order?: OrderUpdateOneRequiredWithoutLogisticsOrdersNestedInput
    logisticsPartner?: LogisticsPartnerUpdateOneRequiredWithoutOrdersNestedInput
    shipper?: ShipperUpdateOneWithoutAssignedOrdersNestedInput
  }

  export type LogisticsOrderUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderId?: StringFieldUpdateOperationsInput | string
    logisticsPartnerId?: StringFieldUpdateOperationsInput | string
    shipperId?: NullableStringFieldUpdateOperationsInput | string | null
    trackingCode?: StringFieldUpdateOperationsInput | string
    status?: EnumLogisticsStatusFieldUpdateOperationsInput | $Enums.LogisticsStatus
    pickupAddress?: StringFieldUpdateOperationsInput | string
    deliveryAddress?: StringFieldUpdateOperationsInput | string
    pickupLocation?: NullableJsonNullValueInput | InputJsonValue
    deliveryLocation?: NullableJsonNullValueInput | InputJsonValue
    distance?: NullableFloatFieldUpdateOperationsInput | number | null
    estimatedTime?: NullableIntFieldUpdateOperationsInput | number | null
    estimatedDelivery?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pickupTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deliveredTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    deliveryAttempts?: IntFieldUpdateOperationsInput | number
    customerSignature?: NullableStringFieldUpdateOperationsInput | string | null
    proofOfDelivery?: LogisticsOrderUpdateproofOfDeliveryInput | string[]
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cancelReason?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type LogisticsOrderCreateManyInput = {
    id?: string
    orderId: string
    logisticsPartnerId: string
    shipperId?: string | null
    trackingCode: string
    status?: $Enums.LogisticsStatus
    pickupAddress: string
    deliveryAddress: string
    pickupLocation?: NullableJsonNullValueInput | InputJsonValue
    deliveryLocation?: NullableJsonNullValueInput | InputJsonValue
    distance?: number | null
    estimatedTime?: number | null
    estimatedDelivery?: Date | string | null
    pickupTime?: Date | string | null
    deliveredTime?: Date | string | null
    notes?: string | null
    deliveryAttempts?: number
    customerSignature?: string | null
    proofOfDelivery?: LogisticsOrderCreateproofOfDeliveryInput | string[]
    updatedAt?: Date | string
    cancelReason?: string | null
    rating?: number | null
    feedback?: string | null
  }

  export type LogisticsOrderUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    trackingCode?: StringFieldUpdateOperationsInput | string
    status?: EnumLogisticsStatusFieldUpdateOperationsInput | $Enums.LogisticsStatus
    pickupAddress?: StringFieldUpdateOperationsInput | string
    deliveryAddress?: StringFieldUpdateOperationsInput | string
    pickupLocation?: NullableJsonNullValueInput | InputJsonValue
    deliveryLocation?: NullableJsonNullValueInput | InputJsonValue
    distance?: NullableFloatFieldUpdateOperationsInput | number | null
    estimatedTime?: NullableIntFieldUpdateOperationsInput | number | null
    estimatedDelivery?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pickupTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deliveredTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    deliveryAttempts?: IntFieldUpdateOperationsInput | number
    customerSignature?: NullableStringFieldUpdateOperationsInput | string | null
    proofOfDelivery?: LogisticsOrderUpdateproofOfDeliveryInput | string[]
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cancelReason?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type LogisticsOrderUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderId?: StringFieldUpdateOperationsInput | string
    logisticsPartnerId?: StringFieldUpdateOperationsInput | string
    shipperId?: NullableStringFieldUpdateOperationsInput | string | null
    trackingCode?: StringFieldUpdateOperationsInput | string
    status?: EnumLogisticsStatusFieldUpdateOperationsInput | $Enums.LogisticsStatus
    pickupAddress?: StringFieldUpdateOperationsInput | string
    deliveryAddress?: StringFieldUpdateOperationsInput | string
    pickupLocation?: NullableJsonNullValueInput | InputJsonValue
    deliveryLocation?: NullableJsonNullValueInput | InputJsonValue
    distance?: NullableFloatFieldUpdateOperationsInput | number | null
    estimatedTime?: NullableIntFieldUpdateOperationsInput | number | null
    estimatedDelivery?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pickupTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deliveredTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    deliveryAttempts?: IntFieldUpdateOperationsInput | number
    customerSignature?: NullableStringFieldUpdateOperationsInput | string | null
    proofOfDelivery?: LogisticsOrderUpdateproofOfDeliveryInput | string[]
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cancelReason?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserBehaviorCreateInput = {
    id?: string
    type: $Enums.BehaviorType
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutBehaviorsInput
    product: ProductCreateNestedOneWithoutBehaviorsInput
  }

  export type UserBehaviorUncheckedCreateInput = {
    id?: string
    userId: string
    productId: string
    type: $Enums.BehaviorType
    createdAt?: Date | string
  }

  export type UserBehaviorUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumBehaviorTypeFieldUpdateOperationsInput | $Enums.BehaviorType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutBehaviorsNestedInput
    product?: ProductUpdateOneRequiredWithoutBehaviorsNestedInput
  }

  export type UserBehaviorUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    type?: EnumBehaviorTypeFieldUpdateOperationsInput | $Enums.BehaviorType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserBehaviorCreateManyInput = {
    id?: string
    userId: string
    productId: string
    type: $Enums.BehaviorType
    createdAt?: Date | string
  }

  export type UserBehaviorUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumBehaviorTypeFieldUpdateOperationsInput | $Enums.BehaviorType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserBehaviorUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    type?: EnumBehaviorTypeFieldUpdateOperationsInput | $Enums.BehaviorType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PromotionCreateInput = {
    id?: string
    type: $Enums.PromotionType
    name: string
    description?: string | null
    startDate: Date | string
    endDate: Date | string
    discountPercentage?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    products?: PromotionProductCreateNestedManyWithoutPromotionInput
    categories?: PromotionCategoryCreateNestedManyWithoutPromotionInput
  }

  export type PromotionUncheckedCreateInput = {
    id?: string
    type: $Enums.PromotionType
    name: string
    description?: string | null
    startDate: Date | string
    endDate: Date | string
    discountPercentage?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    products?: PromotionProductUncheckedCreateNestedManyWithoutPromotionInput
    categories?: PromotionCategoryUncheckedCreateNestedManyWithoutPromotionInput
  }

  export type PromotionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumPromotionTypeFieldUpdateOperationsInput | $Enums.PromotionType
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    discountPercentage?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    products?: PromotionProductUpdateManyWithoutPromotionNestedInput
    categories?: PromotionCategoryUpdateManyWithoutPromotionNestedInput
  }

  export type PromotionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumPromotionTypeFieldUpdateOperationsInput | $Enums.PromotionType
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    discountPercentage?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    products?: PromotionProductUncheckedUpdateManyWithoutPromotionNestedInput
    categories?: PromotionCategoryUncheckedUpdateManyWithoutPromotionNestedInput
  }

  export type PromotionCreateManyInput = {
    id?: string
    type: $Enums.PromotionType
    name: string
    description?: string | null
    startDate: Date | string
    endDate: Date | string
    discountPercentage?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PromotionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumPromotionTypeFieldUpdateOperationsInput | $Enums.PromotionType
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    discountPercentage?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PromotionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumPromotionTypeFieldUpdateOperationsInput | $Enums.PromotionType
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    discountPercentage?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PromotionProductCreateInput = {
    id?: string
    discountPercentage: number
    quantity?: number | null
    soldQuantity?: number | null
    promotion: PromotionCreateNestedOneWithoutProductsInput
    product: ProductCreateNestedOneWithoutPromotionsInput
  }

  export type PromotionProductUncheckedCreateInput = {
    id?: string
    promotionId: string
    productId: string
    discountPercentage: number
    quantity?: number | null
    soldQuantity?: number | null
  }

  export type PromotionProductUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    discountPercentage?: FloatFieldUpdateOperationsInput | number
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    soldQuantity?: NullableIntFieldUpdateOperationsInput | number | null
    promotion?: PromotionUpdateOneRequiredWithoutProductsNestedInput
    product?: ProductUpdateOneRequiredWithoutPromotionsNestedInput
  }

  export type PromotionProductUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    promotionId?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    discountPercentage?: FloatFieldUpdateOperationsInput | number
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    soldQuantity?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PromotionProductCreateManyInput = {
    id?: string
    promotionId: string
    productId: string
    discountPercentage: number
    quantity?: number | null
    soldQuantity?: number | null
  }

  export type PromotionProductUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    discountPercentage?: FloatFieldUpdateOperationsInput | number
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    soldQuantity?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PromotionProductUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    promotionId?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    discountPercentage?: FloatFieldUpdateOperationsInput | number
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    soldQuantity?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PromotionCategoryCreateInput = {
    id?: string
    promotion: PromotionCreateNestedOneWithoutCategoriesInput
    category: CategoryCreateNestedOneWithoutPromotionsInput
  }

  export type PromotionCategoryUncheckedCreateInput = {
    id?: string
    promotionId: string
    categoryId: string
  }

  export type PromotionCategoryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    promotion?: PromotionUpdateOneRequiredWithoutCategoriesNestedInput
    category?: CategoryUpdateOneRequiredWithoutPromotionsNestedInput
  }

  export type PromotionCategoryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    promotionId?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
  }

  export type PromotionCategoryCreateManyInput = {
    id?: string
    promotionId: string
    categoryId: string
  }

  export type PromotionCategoryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type PromotionCategoryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    promotionId?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type EnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type SellerNullableScalarRelationFilter = {
    is?: SellerWhereInput | null
    isNot?: SellerWhereInput | null
  }

  export type EnterpriseNullableScalarRelationFilter = {
    is?: EnterpriseWhereInput | null
    isNot?: EnterpriseWhereInput | null
  }

  export type LogisticsPartnerNullableScalarRelationFilter = {
    is?: LogisticsPartnerWhereInput | null
    isNot?: LogisticsPartnerWhereInput | null
  }

  export type AddressListRelationFilter = {
    every?: AddressWhereInput
    some?: AddressWhereInput
    none?: AddressWhereInput
  }

  export type OrderListRelationFilter = {
    every?: OrderWhereInput
    some?: OrderWhereInput
    none?: OrderWhereInput
  }

  export type ReviewListRelationFilter = {
    every?: ReviewWhereInput
    some?: ReviewWhereInput
    none?: ReviewWhereInput
  }

  export type UserBehaviorListRelationFilter = {
    every?: UserBehaviorWhereInput
    some?: UserBehaviorWhereInput
    none?: UserBehaviorWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type AddressOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OrderOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ReviewOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserBehaviorOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    avatar?: SortOrder
    phone?: SortOrder
    role?: SortOrder
    isVerified?: SortOrder
    verificationToken?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    avatar?: SortOrder
    phone?: SortOrder
    role?: SortOrder
    isVerified?: SortOrder
    verificationToken?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    avatar?: SortOrder
    phone?: SortOrder
    role?: SortOrder
    isVerified?: SortOrder
    verificationToken?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type EnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type AddressCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    label?: SortOrder
    fullName?: SortOrder
    phone?: SortOrder
    province?: SortOrder
    district?: SortOrder
    ward?: SortOrder
    street?: SortOrder
    isDefault?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AddressMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    label?: SortOrder
    fullName?: SortOrder
    phone?: SortOrder
    province?: SortOrder
    district?: SortOrder
    ward?: SortOrder
    street?: SortOrder
    isDefault?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AddressMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    label?: SortOrder
    fullName?: SortOrder
    phone?: SortOrder
    province?: SortOrder
    district?: SortOrder
    ward?: SortOrder
    street?: SortOrder
    isDefault?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type ProductListRelationFilter = {
    every?: ProductWhereInput
    some?: ProductWhereInput
    none?: ProductWhereInput
  }

  export type SellerProductListRelationFilter = {
    every?: SellerProductWhereInput
    some?: SellerProductWhereInput
    none?: SellerProductWhereInput
  }

  export type ProductOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SellerProductOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SellerCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    storeName?: SortOrder
    verified?: SortOrder
    rating?: SortOrder
  }

  export type SellerAvgOrderByAggregateInput = {
    rating?: SortOrder
  }

  export type SellerMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    storeName?: SortOrder
    verified?: SortOrder
    rating?: SortOrder
  }

  export type SellerMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    storeName?: SortOrder
    verified?: SortOrder
    rating?: SortOrder
  }

  export type SellerSumOrderByAggregateInput = {
    rating?: SortOrder
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type EnterpriseCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    companyName?: SortOrder
    taxCode?: SortOrder
    verified?: SortOrder
    officialBrand?: SortOrder
    rating?: SortOrder
  }

  export type EnterpriseAvgOrderByAggregateInput = {
    rating?: SortOrder
  }

  export type EnterpriseMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    companyName?: SortOrder
    taxCode?: SortOrder
    verified?: SortOrder
    officialBrand?: SortOrder
    rating?: SortOrder
  }

  export type EnterpriseMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    companyName?: SortOrder
    taxCode?: SortOrder
    verified?: SortOrder
    officialBrand?: SortOrder
    rating?: SortOrder
  }

  export type EnterpriseSumOrderByAggregateInput = {
    rating?: SortOrder
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type CategoryScalarRelationFilter = {
    is?: CategoryWhereInput
    isNot?: CategoryWhereInput
  }

  export type ProductVariantListRelationFilter = {
    every?: ProductVariantWhereInput
    some?: ProductVariantWhereInput
    none?: ProductVariantWhereInput
  }

  export type OrderItemListRelationFilter = {
    every?: OrderItemWhereInput
    some?: OrderItemWhereInput
    none?: OrderItemWhereInput
  }

  export type PromotionProductListRelationFilter = {
    every?: PromotionProductWhereInput
    some?: PromotionProductWhereInput
    none?: PromotionProductWhereInput
  }

  export type ProductVariantOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OrderItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PromotionProductOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProductCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    categoryId?: SortOrder
    sellerId?: SortOrder
    enterpriseId?: SortOrder
    basePrice?: SortOrder
    stock?: SortOrder
    active?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProductAvgOrderByAggregateInput = {
    basePrice?: SortOrder
    stock?: SortOrder
  }

  export type ProductMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    categoryId?: SortOrder
    sellerId?: SortOrder
    enterpriseId?: SortOrder
    basePrice?: SortOrder
    stock?: SortOrder
    active?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProductMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    categoryId?: SortOrder
    sellerId?: SortOrder
    enterpriseId?: SortOrder
    basePrice?: SortOrder
    stock?: SortOrder
    active?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProductSumOrderByAggregateInput = {
    basePrice?: SortOrder
    stock?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type ProductScalarRelationFilter = {
    is?: ProductWhereInput
    isNot?: ProductWhereInput
  }

  export type ProductVariantCountOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    color?: SortOrder
    size?: SortOrder
    price?: SortOrder
    stock?: SortOrder
  }

  export type ProductVariantAvgOrderByAggregateInput = {
    price?: SortOrder
    stock?: SortOrder
  }

  export type ProductVariantMaxOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    color?: SortOrder
    size?: SortOrder
    price?: SortOrder
    stock?: SortOrder
  }

  export type ProductVariantMinOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    color?: SortOrder
    size?: SortOrder
    price?: SortOrder
    stock?: SortOrder
  }

  export type ProductVariantSumOrderByAggregateInput = {
    price?: SortOrder
    stock?: SortOrder
  }

  export type CategoryNullableScalarRelationFilter = {
    is?: CategoryWhereInput | null
    isNot?: CategoryWhereInput | null
  }

  export type CategoryListRelationFilter = {
    every?: CategoryWhereInput
    some?: CategoryWhereInput
    none?: CategoryWhereInput
  }

  export type PromotionCategoryListRelationFilter = {
    every?: PromotionCategoryWhereInput
    some?: PromotionCategoryWhereInput
    none?: PromotionCategoryWhereInput
  }

  export type CategoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PromotionCategoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CategoryCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    parentId?: SortOrder
  }

  export type CategoryMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    parentId?: SortOrder
  }

  export type CategoryMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    parentId?: SortOrder
  }

  export type SellerScalarRelationFilter = {
    is?: SellerWhereInput
    isNot?: SellerWhereInput
  }

  export type SellerProductCountOrderByAggregateInput = {
    id?: SortOrder
    sellerId?: SortOrder
    productId?: SortOrder
    price?: SortOrder
    stock?: SortOrder
    active?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SellerProductAvgOrderByAggregateInput = {
    price?: SortOrder
    stock?: SortOrder
  }

  export type SellerProductMaxOrderByAggregateInput = {
    id?: SortOrder
    sellerId?: SortOrder
    productId?: SortOrder
    price?: SortOrder
    stock?: SortOrder
    active?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SellerProductMinOrderByAggregateInput = {
    id?: SortOrder
    sellerId?: SortOrder
    productId?: SortOrder
    price?: SortOrder
    stock?: SortOrder
    active?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SellerProductSumOrderByAggregateInput = {
    price?: SortOrder
    stock?: SortOrder
  }

  export type ReviewCountOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    userId?: SortOrder
    rating?: SortOrder
    comment?: SortOrder
    createdAt?: SortOrder
  }

  export type ReviewAvgOrderByAggregateInput = {
    rating?: SortOrder
  }

  export type ReviewMaxOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    userId?: SortOrder
    rating?: SortOrder
    comment?: SortOrder
    createdAt?: SortOrder
  }

  export type ReviewMinOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    userId?: SortOrder
    rating?: SortOrder
    comment?: SortOrder
    createdAt?: SortOrder
  }

  export type ReviewSumOrderByAggregateInput = {
    rating?: SortOrder
  }

  export type EnumDiscountTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.DiscountType | EnumDiscountTypeFieldRefInput<$PrismaModel>
    in?: $Enums.DiscountType[] | ListEnumDiscountTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.DiscountType[] | ListEnumDiscountTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumDiscountTypeFilter<$PrismaModel> | $Enums.DiscountType
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type VoucherCountOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    discountType?: SortOrder
    discountValue?: SortOrder
    minOrderValue?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    usageLimit?: SortOrder
    usedCount?: SortOrder
  }

  export type VoucherAvgOrderByAggregateInput = {
    discountValue?: SortOrder
    minOrderValue?: SortOrder
    usageLimit?: SortOrder
    usedCount?: SortOrder
  }

  export type VoucherMaxOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    discountType?: SortOrder
    discountValue?: SortOrder
    minOrderValue?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    usageLimit?: SortOrder
    usedCount?: SortOrder
  }

  export type VoucherMinOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    discountType?: SortOrder
    discountValue?: SortOrder
    minOrderValue?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    usageLimit?: SortOrder
    usedCount?: SortOrder
  }

  export type VoucherSumOrderByAggregateInput = {
    discountValue?: SortOrder
    minOrderValue?: SortOrder
    usageLimit?: SortOrder
    usedCount?: SortOrder
  }

  export type EnumDiscountTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DiscountType | EnumDiscountTypeFieldRefInput<$PrismaModel>
    in?: $Enums.DiscountType[] | ListEnumDiscountTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.DiscountType[] | ListEnumDiscountTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumDiscountTypeWithAggregatesFilter<$PrismaModel> | $Enums.DiscountType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDiscountTypeFilter<$PrismaModel>
    _max?: NestedEnumDiscountTypeFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type EnumOrderStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.OrderStatus | EnumOrderStatusFieldRefInput<$PrismaModel>
    in?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumOrderStatusFilter<$PrismaModel> | $Enums.OrderStatus
  }

  export type VoucherNullableScalarRelationFilter = {
    is?: VoucherWhereInput | null
    isNot?: VoucherWhereInput | null
  }

  export type PaymentNullableScalarRelationFilter = {
    is?: PaymentWhereInput | null
    isNot?: PaymentWhereInput | null
  }

  export type LogisticsOrderListRelationFilter = {
    every?: LogisticsOrderWhereInput
    some?: LogisticsOrderWhereInput
    none?: LogisticsOrderWhereInput
  }

  export type LogisticsOrderOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OrderCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    totalAmount?: SortOrder
    status?: SortOrder
    paymentId?: SortOrder
    shippingId?: SortOrder
    voucherId?: SortOrder
    createdAt?: SortOrder
  }

  export type OrderAvgOrderByAggregateInput = {
    totalAmount?: SortOrder
  }

  export type OrderMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    totalAmount?: SortOrder
    status?: SortOrder
    paymentId?: SortOrder
    shippingId?: SortOrder
    voucherId?: SortOrder
    createdAt?: SortOrder
  }

  export type OrderMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    totalAmount?: SortOrder
    status?: SortOrder
    paymentId?: SortOrder
    shippingId?: SortOrder
    voucherId?: SortOrder
    createdAt?: SortOrder
  }

  export type OrderSumOrderByAggregateInput = {
    totalAmount?: SortOrder
  }

  export type EnumOrderStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.OrderStatus | EnumOrderStatusFieldRefInput<$PrismaModel>
    in?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumOrderStatusWithAggregatesFilter<$PrismaModel> | $Enums.OrderStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumOrderStatusFilter<$PrismaModel>
    _max?: NestedEnumOrderStatusFilter<$PrismaModel>
  }

  export type OrderScalarRelationFilter = {
    is?: OrderWhereInput
    isNot?: OrderWhereInput
  }

  export type OrderItemCountOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
    productId?: SortOrder
    variantId?: SortOrder
    quantity?: SortOrder
    price?: SortOrder
  }

  export type OrderItemAvgOrderByAggregateInput = {
    quantity?: SortOrder
    price?: SortOrder
  }

  export type OrderItemMaxOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
    productId?: SortOrder
    variantId?: SortOrder
    quantity?: SortOrder
    price?: SortOrder
  }

  export type OrderItemMinOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
    productId?: SortOrder
    variantId?: SortOrder
    quantity?: SortOrder
    price?: SortOrder
  }

  export type OrderItemSumOrderByAggregateInput = {
    quantity?: SortOrder
    price?: SortOrder
  }

  export type EnumPaymentMethodFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentMethod | EnumPaymentMethodFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentMethodFilter<$PrismaModel> | $Enums.PaymentMethod
  }

  export type EnumPaymentStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentStatus | EnumPaymentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentStatusFilter<$PrismaModel> | $Enums.PaymentStatus
  }

  export type PaymentCountOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
    method?: SortOrder
    status?: SortOrder
    transactionId?: SortOrder
    createdAt?: SortOrder
  }

  export type PaymentMaxOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
    method?: SortOrder
    status?: SortOrder
    transactionId?: SortOrder
    createdAt?: SortOrder
  }

  export type PaymentMinOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
    method?: SortOrder
    status?: SortOrder
    transactionId?: SortOrder
    createdAt?: SortOrder
  }

  export type EnumPaymentMethodWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentMethod | EnumPaymentMethodFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentMethodWithAggregatesFilter<$PrismaModel> | $Enums.PaymentMethod
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentMethodFilter<$PrismaModel>
    _max?: NestedEnumPaymentMethodFilter<$PrismaModel>
  }

  export type EnumPaymentStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentStatus | EnumPaymentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentStatusWithAggregatesFilter<$PrismaModel> | $Enums.PaymentStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentStatusFilter<$PrismaModel>
    _max?: NestedEnumPaymentStatusFilter<$PrismaModel>
  }

  export type ShipperListRelationFilter = {
    every?: ShipperWhereInput
    some?: ShipperWhereInput
    none?: ShipperWhereInput
  }

  export type ShipperOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LogisticsPartnerCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    apiEndpoint?: SortOrder
    baseRate?: SortOrder
    rating?: SortOrder
    verified?: SortOrder
  }

  export type LogisticsPartnerAvgOrderByAggregateInput = {
    baseRate?: SortOrder
    rating?: SortOrder
  }

  export type LogisticsPartnerMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    apiEndpoint?: SortOrder
    baseRate?: SortOrder
    rating?: SortOrder
    verified?: SortOrder
  }

  export type LogisticsPartnerMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    apiEndpoint?: SortOrder
    baseRate?: SortOrder
    rating?: SortOrder
    verified?: SortOrder
  }

  export type LogisticsPartnerSumOrderByAggregateInput = {
    baseRate?: SortOrder
    rating?: SortOrder
  }
  export type JsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type EnumShipperStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ShipperStatus | EnumShipperStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ShipperStatus[] | ListEnumShipperStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ShipperStatus[] | ListEnumShipperStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumShipperStatusFilter<$PrismaModel> | $Enums.ShipperStatus
  }
  export type JsonNullableListFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableListFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableListFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableListFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableListFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableListFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue[] | ListJsonFieldRefInput<$PrismaModel> | null
    has?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    hasEvery?: InputJsonValue[] | ListJsonFieldRefInput<$PrismaModel>
    hasSome?: InputJsonValue[] | ListJsonFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type LogisticsPartnerScalarRelationFilter = {
    is?: LogisticsPartnerWhereInput
    isNot?: LogisticsPartnerWhereInput
  }

  export type ShipperCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    avatar?: SortOrder
    logisticsPartnerId?: SortOrder
    active?: SortOrder
    currentLocation?: SortOrder
    status?: SortOrder
    rating?: SortOrder
    totalDeliveries?: SortOrder
    totalRatings?: SortOrder
    deliveryRange?: SortOrder
    deliveryHistory?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ShipperAvgOrderByAggregateInput = {
    rating?: SortOrder
    totalDeliveries?: SortOrder
    totalRatings?: SortOrder
    deliveryRange?: SortOrder
  }

  export type ShipperMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    avatar?: SortOrder
    logisticsPartnerId?: SortOrder
    active?: SortOrder
    status?: SortOrder
    rating?: SortOrder
    totalDeliveries?: SortOrder
    totalRatings?: SortOrder
    deliveryRange?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ShipperMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    avatar?: SortOrder
    logisticsPartnerId?: SortOrder
    active?: SortOrder
    status?: SortOrder
    rating?: SortOrder
    totalDeliveries?: SortOrder
    totalRatings?: SortOrder
    deliveryRange?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ShipperSumOrderByAggregateInput = {
    rating?: SortOrder
    totalDeliveries?: SortOrder
    totalRatings?: SortOrder
    deliveryRange?: SortOrder
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type EnumShipperStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ShipperStatus | EnumShipperStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ShipperStatus[] | ListEnumShipperStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ShipperStatus[] | ListEnumShipperStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumShipperStatusWithAggregatesFilter<$PrismaModel> | $Enums.ShipperStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumShipperStatusFilter<$PrismaModel>
    _max?: NestedEnumShipperStatusFilter<$PrismaModel>
  }

  export type EnumLogisticsStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.LogisticsStatus | EnumLogisticsStatusFieldRefInput<$PrismaModel>
    in?: $Enums.LogisticsStatus[] | ListEnumLogisticsStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.LogisticsStatus[] | ListEnumLogisticsStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumLogisticsStatusFilter<$PrismaModel> | $Enums.LogisticsStatus
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type ShipperNullableScalarRelationFilter = {
    is?: ShipperWhereInput | null
    isNot?: ShipperWhereInput | null
  }

  export type LogisticsOrderCountOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
    logisticsPartnerId?: SortOrder
    shipperId?: SortOrder
    trackingCode?: SortOrder
    status?: SortOrder
    pickupAddress?: SortOrder
    deliveryAddress?: SortOrder
    pickupLocation?: SortOrder
    deliveryLocation?: SortOrder
    distance?: SortOrder
    estimatedTime?: SortOrder
    estimatedDelivery?: SortOrder
    pickupTime?: SortOrder
    deliveredTime?: SortOrder
    notes?: SortOrder
    deliveryAttempts?: SortOrder
    customerSignature?: SortOrder
    proofOfDelivery?: SortOrder
    updatedAt?: SortOrder
    cancelReason?: SortOrder
    rating?: SortOrder
    feedback?: SortOrder
  }

  export type LogisticsOrderAvgOrderByAggregateInput = {
    distance?: SortOrder
    estimatedTime?: SortOrder
    deliveryAttempts?: SortOrder
    rating?: SortOrder
  }

  export type LogisticsOrderMaxOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
    logisticsPartnerId?: SortOrder
    shipperId?: SortOrder
    trackingCode?: SortOrder
    status?: SortOrder
    pickupAddress?: SortOrder
    deliveryAddress?: SortOrder
    distance?: SortOrder
    estimatedTime?: SortOrder
    estimatedDelivery?: SortOrder
    pickupTime?: SortOrder
    deliveredTime?: SortOrder
    notes?: SortOrder
    deliveryAttempts?: SortOrder
    customerSignature?: SortOrder
    updatedAt?: SortOrder
    cancelReason?: SortOrder
    rating?: SortOrder
    feedback?: SortOrder
  }

  export type LogisticsOrderMinOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
    logisticsPartnerId?: SortOrder
    shipperId?: SortOrder
    trackingCode?: SortOrder
    status?: SortOrder
    pickupAddress?: SortOrder
    deliveryAddress?: SortOrder
    distance?: SortOrder
    estimatedTime?: SortOrder
    estimatedDelivery?: SortOrder
    pickupTime?: SortOrder
    deliveredTime?: SortOrder
    notes?: SortOrder
    deliveryAttempts?: SortOrder
    customerSignature?: SortOrder
    updatedAt?: SortOrder
    cancelReason?: SortOrder
    rating?: SortOrder
    feedback?: SortOrder
  }

  export type LogisticsOrderSumOrderByAggregateInput = {
    distance?: SortOrder
    estimatedTime?: SortOrder
    deliveryAttempts?: SortOrder
    rating?: SortOrder
  }

  export type EnumLogisticsStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.LogisticsStatus | EnumLogisticsStatusFieldRefInput<$PrismaModel>
    in?: $Enums.LogisticsStatus[] | ListEnumLogisticsStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.LogisticsStatus[] | ListEnumLogisticsStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumLogisticsStatusWithAggregatesFilter<$PrismaModel> | $Enums.LogisticsStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumLogisticsStatusFilter<$PrismaModel>
    _max?: NestedEnumLogisticsStatusFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type EnumBehaviorTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.BehaviorType | EnumBehaviorTypeFieldRefInput<$PrismaModel>
    in?: $Enums.BehaviorType[] | ListEnumBehaviorTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.BehaviorType[] | ListEnumBehaviorTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumBehaviorTypeFilter<$PrismaModel> | $Enums.BehaviorType
  }

  export type UserBehaviorCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
  }

  export type UserBehaviorMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
  }

  export type UserBehaviorMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
  }

  export type EnumBehaviorTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BehaviorType | EnumBehaviorTypeFieldRefInput<$PrismaModel>
    in?: $Enums.BehaviorType[] | ListEnumBehaviorTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.BehaviorType[] | ListEnumBehaviorTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumBehaviorTypeWithAggregatesFilter<$PrismaModel> | $Enums.BehaviorType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumBehaviorTypeFilter<$PrismaModel>
    _max?: NestedEnumBehaviorTypeFilter<$PrismaModel>
  }

  export type EnumPromotionTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.PromotionType | EnumPromotionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PromotionType[] | ListEnumPromotionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PromotionType[] | ListEnumPromotionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPromotionTypeFilter<$PrismaModel> | $Enums.PromotionType
  }

  export type PromotionCountOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    name?: SortOrder
    description?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    discountPercentage?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PromotionAvgOrderByAggregateInput = {
    discountPercentage?: SortOrder
  }

  export type PromotionMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    name?: SortOrder
    description?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    discountPercentage?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PromotionMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    name?: SortOrder
    description?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    discountPercentage?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PromotionSumOrderByAggregateInput = {
    discountPercentage?: SortOrder
  }

  export type EnumPromotionTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PromotionType | EnumPromotionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PromotionType[] | ListEnumPromotionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PromotionType[] | ListEnumPromotionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPromotionTypeWithAggregatesFilter<$PrismaModel> | $Enums.PromotionType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPromotionTypeFilter<$PrismaModel>
    _max?: NestedEnumPromotionTypeFilter<$PrismaModel>
  }

  export type PromotionScalarRelationFilter = {
    is?: PromotionWhereInput
    isNot?: PromotionWhereInput
  }

  export type PromotionProductCountOrderByAggregateInput = {
    id?: SortOrder
    promotionId?: SortOrder
    productId?: SortOrder
    discountPercentage?: SortOrder
    quantity?: SortOrder
    soldQuantity?: SortOrder
  }

  export type PromotionProductAvgOrderByAggregateInput = {
    discountPercentage?: SortOrder
    quantity?: SortOrder
    soldQuantity?: SortOrder
  }

  export type PromotionProductMaxOrderByAggregateInput = {
    id?: SortOrder
    promotionId?: SortOrder
    productId?: SortOrder
    discountPercentage?: SortOrder
    quantity?: SortOrder
    soldQuantity?: SortOrder
  }

  export type PromotionProductMinOrderByAggregateInput = {
    id?: SortOrder
    promotionId?: SortOrder
    productId?: SortOrder
    discountPercentage?: SortOrder
    quantity?: SortOrder
    soldQuantity?: SortOrder
  }

  export type PromotionProductSumOrderByAggregateInput = {
    discountPercentage?: SortOrder
    quantity?: SortOrder
    soldQuantity?: SortOrder
  }

  export type PromotionCategoryCountOrderByAggregateInput = {
    id?: SortOrder
    promotionId?: SortOrder
    categoryId?: SortOrder
  }

  export type PromotionCategoryMaxOrderByAggregateInput = {
    id?: SortOrder
    promotionId?: SortOrder
    categoryId?: SortOrder
  }

  export type PromotionCategoryMinOrderByAggregateInput = {
    id?: SortOrder
    promotionId?: SortOrder
    categoryId?: SortOrder
  }

  export type SellerCreateNestedOneWithoutUserInput = {
    create?: XOR<SellerCreateWithoutUserInput, SellerUncheckedCreateWithoutUserInput>
    connectOrCreate?: SellerCreateOrConnectWithoutUserInput
    connect?: SellerWhereUniqueInput
  }

  export type EnterpriseCreateNestedOneWithoutUserInput = {
    create?: XOR<EnterpriseCreateWithoutUserInput, EnterpriseUncheckedCreateWithoutUserInput>
    connectOrCreate?: EnterpriseCreateOrConnectWithoutUserInput
    connect?: EnterpriseWhereUniqueInput
  }

  export type LogisticsPartnerCreateNestedOneWithoutUserInput = {
    create?: XOR<LogisticsPartnerCreateWithoutUserInput, LogisticsPartnerUncheckedCreateWithoutUserInput>
    connectOrCreate?: LogisticsPartnerCreateOrConnectWithoutUserInput
    connect?: LogisticsPartnerWhereUniqueInput
  }

  export type AddressCreateNestedManyWithoutUserInput = {
    create?: XOR<AddressCreateWithoutUserInput, AddressUncheckedCreateWithoutUserInput> | AddressCreateWithoutUserInput[] | AddressUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AddressCreateOrConnectWithoutUserInput | AddressCreateOrConnectWithoutUserInput[]
    createMany?: AddressCreateManyUserInputEnvelope
    connect?: AddressWhereUniqueInput | AddressWhereUniqueInput[]
  }

  export type OrderCreateNestedManyWithoutUserInput = {
    create?: XOR<OrderCreateWithoutUserInput, OrderUncheckedCreateWithoutUserInput> | OrderCreateWithoutUserInput[] | OrderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutUserInput | OrderCreateOrConnectWithoutUserInput[]
    createMany?: OrderCreateManyUserInputEnvelope
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
  }

  export type ReviewCreateNestedManyWithoutUserInput = {
    create?: XOR<ReviewCreateWithoutUserInput, ReviewUncheckedCreateWithoutUserInput> | ReviewCreateWithoutUserInput[] | ReviewUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutUserInput | ReviewCreateOrConnectWithoutUserInput[]
    createMany?: ReviewCreateManyUserInputEnvelope
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
  }

  export type UserBehaviorCreateNestedManyWithoutUserInput = {
    create?: XOR<UserBehaviorCreateWithoutUserInput, UserBehaviorUncheckedCreateWithoutUserInput> | UserBehaviorCreateWithoutUserInput[] | UserBehaviorUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserBehaviorCreateOrConnectWithoutUserInput | UserBehaviorCreateOrConnectWithoutUserInput[]
    createMany?: UserBehaviorCreateManyUserInputEnvelope
    connect?: UserBehaviorWhereUniqueInput | UserBehaviorWhereUniqueInput[]
  }

  export type SellerUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<SellerCreateWithoutUserInput, SellerUncheckedCreateWithoutUserInput>
    connectOrCreate?: SellerCreateOrConnectWithoutUserInput
    connect?: SellerWhereUniqueInput
  }

  export type EnterpriseUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<EnterpriseCreateWithoutUserInput, EnterpriseUncheckedCreateWithoutUserInput>
    connectOrCreate?: EnterpriseCreateOrConnectWithoutUserInput
    connect?: EnterpriseWhereUniqueInput
  }

  export type LogisticsPartnerUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<LogisticsPartnerCreateWithoutUserInput, LogisticsPartnerUncheckedCreateWithoutUserInput>
    connectOrCreate?: LogisticsPartnerCreateOrConnectWithoutUserInput
    connect?: LogisticsPartnerWhereUniqueInput
  }

  export type AddressUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AddressCreateWithoutUserInput, AddressUncheckedCreateWithoutUserInput> | AddressCreateWithoutUserInput[] | AddressUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AddressCreateOrConnectWithoutUserInput | AddressCreateOrConnectWithoutUserInput[]
    createMany?: AddressCreateManyUserInputEnvelope
    connect?: AddressWhereUniqueInput | AddressWhereUniqueInput[]
  }

  export type OrderUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<OrderCreateWithoutUserInput, OrderUncheckedCreateWithoutUserInput> | OrderCreateWithoutUserInput[] | OrderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutUserInput | OrderCreateOrConnectWithoutUserInput[]
    createMany?: OrderCreateManyUserInputEnvelope
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
  }

  export type ReviewUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ReviewCreateWithoutUserInput, ReviewUncheckedCreateWithoutUserInput> | ReviewCreateWithoutUserInput[] | ReviewUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutUserInput | ReviewCreateOrConnectWithoutUserInput[]
    createMany?: ReviewCreateManyUserInputEnvelope
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
  }

  export type UserBehaviorUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserBehaviorCreateWithoutUserInput, UserBehaviorUncheckedCreateWithoutUserInput> | UserBehaviorCreateWithoutUserInput[] | UserBehaviorUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserBehaviorCreateOrConnectWithoutUserInput | UserBehaviorCreateOrConnectWithoutUserInput[]
    createMany?: UserBehaviorCreateManyUserInputEnvelope
    connect?: UserBehaviorWhereUniqueInput | UserBehaviorWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: $Enums.Role
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type SellerUpdateOneWithoutUserNestedInput = {
    create?: XOR<SellerCreateWithoutUserInput, SellerUncheckedCreateWithoutUserInput>
    connectOrCreate?: SellerCreateOrConnectWithoutUserInput
    upsert?: SellerUpsertWithoutUserInput
    disconnect?: SellerWhereInput | boolean
    delete?: SellerWhereInput | boolean
    connect?: SellerWhereUniqueInput
    update?: XOR<XOR<SellerUpdateToOneWithWhereWithoutUserInput, SellerUpdateWithoutUserInput>, SellerUncheckedUpdateWithoutUserInput>
  }

  export type EnterpriseUpdateOneWithoutUserNestedInput = {
    create?: XOR<EnterpriseCreateWithoutUserInput, EnterpriseUncheckedCreateWithoutUserInput>
    connectOrCreate?: EnterpriseCreateOrConnectWithoutUserInput
    upsert?: EnterpriseUpsertWithoutUserInput
    disconnect?: EnterpriseWhereInput | boolean
    delete?: EnterpriseWhereInput | boolean
    connect?: EnterpriseWhereUniqueInput
    update?: XOR<XOR<EnterpriseUpdateToOneWithWhereWithoutUserInput, EnterpriseUpdateWithoutUserInput>, EnterpriseUncheckedUpdateWithoutUserInput>
  }

  export type LogisticsPartnerUpdateOneWithoutUserNestedInput = {
    create?: XOR<LogisticsPartnerCreateWithoutUserInput, LogisticsPartnerUncheckedCreateWithoutUserInput>
    connectOrCreate?: LogisticsPartnerCreateOrConnectWithoutUserInput
    upsert?: LogisticsPartnerUpsertWithoutUserInput
    disconnect?: LogisticsPartnerWhereInput | boolean
    delete?: LogisticsPartnerWhereInput | boolean
    connect?: LogisticsPartnerWhereUniqueInput
    update?: XOR<XOR<LogisticsPartnerUpdateToOneWithWhereWithoutUserInput, LogisticsPartnerUpdateWithoutUserInput>, LogisticsPartnerUncheckedUpdateWithoutUserInput>
  }

  export type AddressUpdateManyWithoutUserNestedInput = {
    create?: XOR<AddressCreateWithoutUserInput, AddressUncheckedCreateWithoutUserInput> | AddressCreateWithoutUserInput[] | AddressUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AddressCreateOrConnectWithoutUserInput | AddressCreateOrConnectWithoutUserInput[]
    upsert?: AddressUpsertWithWhereUniqueWithoutUserInput | AddressUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AddressCreateManyUserInputEnvelope
    set?: AddressWhereUniqueInput | AddressWhereUniqueInput[]
    disconnect?: AddressWhereUniqueInput | AddressWhereUniqueInput[]
    delete?: AddressWhereUniqueInput | AddressWhereUniqueInput[]
    connect?: AddressWhereUniqueInput | AddressWhereUniqueInput[]
    update?: AddressUpdateWithWhereUniqueWithoutUserInput | AddressUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AddressUpdateManyWithWhereWithoutUserInput | AddressUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AddressScalarWhereInput | AddressScalarWhereInput[]
  }

  export type OrderUpdateManyWithoutUserNestedInput = {
    create?: XOR<OrderCreateWithoutUserInput, OrderUncheckedCreateWithoutUserInput> | OrderCreateWithoutUserInput[] | OrderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutUserInput | OrderCreateOrConnectWithoutUserInput[]
    upsert?: OrderUpsertWithWhereUniqueWithoutUserInput | OrderUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: OrderCreateManyUserInputEnvelope
    set?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    disconnect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    delete?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    update?: OrderUpdateWithWhereUniqueWithoutUserInput | OrderUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: OrderUpdateManyWithWhereWithoutUserInput | OrderUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: OrderScalarWhereInput | OrderScalarWhereInput[]
  }

  export type ReviewUpdateManyWithoutUserNestedInput = {
    create?: XOR<ReviewCreateWithoutUserInput, ReviewUncheckedCreateWithoutUserInput> | ReviewCreateWithoutUserInput[] | ReviewUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutUserInput | ReviewCreateOrConnectWithoutUserInput[]
    upsert?: ReviewUpsertWithWhereUniqueWithoutUserInput | ReviewUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ReviewCreateManyUserInputEnvelope
    set?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    disconnect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    delete?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    update?: ReviewUpdateWithWhereUniqueWithoutUserInput | ReviewUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ReviewUpdateManyWithWhereWithoutUserInput | ReviewUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
  }

  export type UserBehaviorUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserBehaviorCreateWithoutUserInput, UserBehaviorUncheckedCreateWithoutUserInput> | UserBehaviorCreateWithoutUserInput[] | UserBehaviorUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserBehaviorCreateOrConnectWithoutUserInput | UserBehaviorCreateOrConnectWithoutUserInput[]
    upsert?: UserBehaviorUpsertWithWhereUniqueWithoutUserInput | UserBehaviorUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserBehaviorCreateManyUserInputEnvelope
    set?: UserBehaviorWhereUniqueInput | UserBehaviorWhereUniqueInput[]
    disconnect?: UserBehaviorWhereUniqueInput | UserBehaviorWhereUniqueInput[]
    delete?: UserBehaviorWhereUniqueInput | UserBehaviorWhereUniqueInput[]
    connect?: UserBehaviorWhereUniqueInput | UserBehaviorWhereUniqueInput[]
    update?: UserBehaviorUpdateWithWhereUniqueWithoutUserInput | UserBehaviorUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserBehaviorUpdateManyWithWhereWithoutUserInput | UserBehaviorUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserBehaviorScalarWhereInput | UserBehaviorScalarWhereInput[]
  }

  export type SellerUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<SellerCreateWithoutUserInput, SellerUncheckedCreateWithoutUserInput>
    connectOrCreate?: SellerCreateOrConnectWithoutUserInput
    upsert?: SellerUpsertWithoutUserInput
    disconnect?: SellerWhereInput | boolean
    delete?: SellerWhereInput | boolean
    connect?: SellerWhereUniqueInput
    update?: XOR<XOR<SellerUpdateToOneWithWhereWithoutUserInput, SellerUpdateWithoutUserInput>, SellerUncheckedUpdateWithoutUserInput>
  }

  export type EnterpriseUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<EnterpriseCreateWithoutUserInput, EnterpriseUncheckedCreateWithoutUserInput>
    connectOrCreate?: EnterpriseCreateOrConnectWithoutUserInput
    upsert?: EnterpriseUpsertWithoutUserInput
    disconnect?: EnterpriseWhereInput | boolean
    delete?: EnterpriseWhereInput | boolean
    connect?: EnterpriseWhereUniqueInput
    update?: XOR<XOR<EnterpriseUpdateToOneWithWhereWithoutUserInput, EnterpriseUpdateWithoutUserInput>, EnterpriseUncheckedUpdateWithoutUserInput>
  }

  export type LogisticsPartnerUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<LogisticsPartnerCreateWithoutUserInput, LogisticsPartnerUncheckedCreateWithoutUserInput>
    connectOrCreate?: LogisticsPartnerCreateOrConnectWithoutUserInput
    upsert?: LogisticsPartnerUpsertWithoutUserInput
    disconnect?: LogisticsPartnerWhereInput | boolean
    delete?: LogisticsPartnerWhereInput | boolean
    connect?: LogisticsPartnerWhereUniqueInput
    update?: XOR<XOR<LogisticsPartnerUpdateToOneWithWhereWithoutUserInput, LogisticsPartnerUpdateWithoutUserInput>, LogisticsPartnerUncheckedUpdateWithoutUserInput>
  }

  export type AddressUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AddressCreateWithoutUserInput, AddressUncheckedCreateWithoutUserInput> | AddressCreateWithoutUserInput[] | AddressUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AddressCreateOrConnectWithoutUserInput | AddressCreateOrConnectWithoutUserInput[]
    upsert?: AddressUpsertWithWhereUniqueWithoutUserInput | AddressUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AddressCreateManyUserInputEnvelope
    set?: AddressWhereUniqueInput | AddressWhereUniqueInput[]
    disconnect?: AddressWhereUniqueInput | AddressWhereUniqueInput[]
    delete?: AddressWhereUniqueInput | AddressWhereUniqueInput[]
    connect?: AddressWhereUniqueInput | AddressWhereUniqueInput[]
    update?: AddressUpdateWithWhereUniqueWithoutUserInput | AddressUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AddressUpdateManyWithWhereWithoutUserInput | AddressUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AddressScalarWhereInput | AddressScalarWhereInput[]
  }

  export type OrderUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<OrderCreateWithoutUserInput, OrderUncheckedCreateWithoutUserInput> | OrderCreateWithoutUserInput[] | OrderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutUserInput | OrderCreateOrConnectWithoutUserInput[]
    upsert?: OrderUpsertWithWhereUniqueWithoutUserInput | OrderUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: OrderCreateManyUserInputEnvelope
    set?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    disconnect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    delete?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    update?: OrderUpdateWithWhereUniqueWithoutUserInput | OrderUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: OrderUpdateManyWithWhereWithoutUserInput | OrderUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: OrderScalarWhereInput | OrderScalarWhereInput[]
  }

  export type ReviewUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ReviewCreateWithoutUserInput, ReviewUncheckedCreateWithoutUserInput> | ReviewCreateWithoutUserInput[] | ReviewUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutUserInput | ReviewCreateOrConnectWithoutUserInput[]
    upsert?: ReviewUpsertWithWhereUniqueWithoutUserInput | ReviewUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ReviewCreateManyUserInputEnvelope
    set?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    disconnect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    delete?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    update?: ReviewUpdateWithWhereUniqueWithoutUserInput | ReviewUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ReviewUpdateManyWithWhereWithoutUserInput | ReviewUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
  }

  export type UserBehaviorUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserBehaviorCreateWithoutUserInput, UserBehaviorUncheckedCreateWithoutUserInput> | UserBehaviorCreateWithoutUserInput[] | UserBehaviorUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserBehaviorCreateOrConnectWithoutUserInput | UserBehaviorCreateOrConnectWithoutUserInput[]
    upsert?: UserBehaviorUpsertWithWhereUniqueWithoutUserInput | UserBehaviorUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserBehaviorCreateManyUserInputEnvelope
    set?: UserBehaviorWhereUniqueInput | UserBehaviorWhereUniqueInput[]
    disconnect?: UserBehaviorWhereUniqueInput | UserBehaviorWhereUniqueInput[]
    delete?: UserBehaviorWhereUniqueInput | UserBehaviorWhereUniqueInput[]
    connect?: UserBehaviorWhereUniqueInput | UserBehaviorWhereUniqueInput[]
    update?: UserBehaviorUpdateWithWhereUniqueWithoutUserInput | UserBehaviorUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserBehaviorUpdateManyWithWhereWithoutUserInput | UserBehaviorUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserBehaviorScalarWhereInput | UserBehaviorScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutAddressesInput = {
    create?: XOR<UserCreateWithoutAddressesInput, UserUncheckedCreateWithoutAddressesInput>
    connectOrCreate?: UserCreateOrConnectWithoutAddressesInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutAddressesNestedInput = {
    create?: XOR<UserCreateWithoutAddressesInput, UserUncheckedCreateWithoutAddressesInput>
    connectOrCreate?: UserCreateOrConnectWithoutAddressesInput
    upsert?: UserUpsertWithoutAddressesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAddressesInput, UserUpdateWithoutAddressesInput>, UserUncheckedUpdateWithoutAddressesInput>
  }

  export type UserCreateNestedOneWithoutSellerInput = {
    create?: XOR<UserCreateWithoutSellerInput, UserUncheckedCreateWithoutSellerInput>
    connectOrCreate?: UserCreateOrConnectWithoutSellerInput
    connect?: UserWhereUniqueInput
  }

  export type ProductCreateNestedManyWithoutSellerInput = {
    create?: XOR<ProductCreateWithoutSellerInput, ProductUncheckedCreateWithoutSellerInput> | ProductCreateWithoutSellerInput[] | ProductUncheckedCreateWithoutSellerInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutSellerInput | ProductCreateOrConnectWithoutSellerInput[]
    createMany?: ProductCreateManySellerInputEnvelope
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
  }

  export type SellerProductCreateNestedManyWithoutSellerInput = {
    create?: XOR<SellerProductCreateWithoutSellerInput, SellerProductUncheckedCreateWithoutSellerInput> | SellerProductCreateWithoutSellerInput[] | SellerProductUncheckedCreateWithoutSellerInput[]
    connectOrCreate?: SellerProductCreateOrConnectWithoutSellerInput | SellerProductCreateOrConnectWithoutSellerInput[]
    createMany?: SellerProductCreateManySellerInputEnvelope
    connect?: SellerProductWhereUniqueInput | SellerProductWhereUniqueInput[]
  }

  export type ProductUncheckedCreateNestedManyWithoutSellerInput = {
    create?: XOR<ProductCreateWithoutSellerInput, ProductUncheckedCreateWithoutSellerInput> | ProductCreateWithoutSellerInput[] | ProductUncheckedCreateWithoutSellerInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutSellerInput | ProductCreateOrConnectWithoutSellerInput[]
    createMany?: ProductCreateManySellerInputEnvelope
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
  }

  export type SellerProductUncheckedCreateNestedManyWithoutSellerInput = {
    create?: XOR<SellerProductCreateWithoutSellerInput, SellerProductUncheckedCreateWithoutSellerInput> | SellerProductCreateWithoutSellerInput[] | SellerProductUncheckedCreateWithoutSellerInput[]
    connectOrCreate?: SellerProductCreateOrConnectWithoutSellerInput | SellerProductCreateOrConnectWithoutSellerInput[]
    createMany?: SellerProductCreateManySellerInputEnvelope
    connect?: SellerProductWhereUniqueInput | SellerProductWhereUniqueInput[]
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutSellerNestedInput = {
    create?: XOR<UserCreateWithoutSellerInput, UserUncheckedCreateWithoutSellerInput>
    connectOrCreate?: UserCreateOrConnectWithoutSellerInput
    upsert?: UserUpsertWithoutSellerInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSellerInput, UserUpdateWithoutSellerInput>, UserUncheckedUpdateWithoutSellerInput>
  }

  export type ProductUpdateManyWithoutSellerNestedInput = {
    create?: XOR<ProductCreateWithoutSellerInput, ProductUncheckedCreateWithoutSellerInput> | ProductCreateWithoutSellerInput[] | ProductUncheckedCreateWithoutSellerInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutSellerInput | ProductCreateOrConnectWithoutSellerInput[]
    upsert?: ProductUpsertWithWhereUniqueWithoutSellerInput | ProductUpsertWithWhereUniqueWithoutSellerInput[]
    createMany?: ProductCreateManySellerInputEnvelope
    set?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    disconnect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    delete?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    update?: ProductUpdateWithWhereUniqueWithoutSellerInput | ProductUpdateWithWhereUniqueWithoutSellerInput[]
    updateMany?: ProductUpdateManyWithWhereWithoutSellerInput | ProductUpdateManyWithWhereWithoutSellerInput[]
    deleteMany?: ProductScalarWhereInput | ProductScalarWhereInput[]
  }

  export type SellerProductUpdateManyWithoutSellerNestedInput = {
    create?: XOR<SellerProductCreateWithoutSellerInput, SellerProductUncheckedCreateWithoutSellerInput> | SellerProductCreateWithoutSellerInput[] | SellerProductUncheckedCreateWithoutSellerInput[]
    connectOrCreate?: SellerProductCreateOrConnectWithoutSellerInput | SellerProductCreateOrConnectWithoutSellerInput[]
    upsert?: SellerProductUpsertWithWhereUniqueWithoutSellerInput | SellerProductUpsertWithWhereUniqueWithoutSellerInput[]
    createMany?: SellerProductCreateManySellerInputEnvelope
    set?: SellerProductWhereUniqueInput | SellerProductWhereUniqueInput[]
    disconnect?: SellerProductWhereUniqueInput | SellerProductWhereUniqueInput[]
    delete?: SellerProductWhereUniqueInput | SellerProductWhereUniqueInput[]
    connect?: SellerProductWhereUniqueInput | SellerProductWhereUniqueInput[]
    update?: SellerProductUpdateWithWhereUniqueWithoutSellerInput | SellerProductUpdateWithWhereUniqueWithoutSellerInput[]
    updateMany?: SellerProductUpdateManyWithWhereWithoutSellerInput | SellerProductUpdateManyWithWhereWithoutSellerInput[]
    deleteMany?: SellerProductScalarWhereInput | SellerProductScalarWhereInput[]
  }

  export type ProductUncheckedUpdateManyWithoutSellerNestedInput = {
    create?: XOR<ProductCreateWithoutSellerInput, ProductUncheckedCreateWithoutSellerInput> | ProductCreateWithoutSellerInput[] | ProductUncheckedCreateWithoutSellerInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutSellerInput | ProductCreateOrConnectWithoutSellerInput[]
    upsert?: ProductUpsertWithWhereUniqueWithoutSellerInput | ProductUpsertWithWhereUniqueWithoutSellerInput[]
    createMany?: ProductCreateManySellerInputEnvelope
    set?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    disconnect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    delete?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    update?: ProductUpdateWithWhereUniqueWithoutSellerInput | ProductUpdateWithWhereUniqueWithoutSellerInput[]
    updateMany?: ProductUpdateManyWithWhereWithoutSellerInput | ProductUpdateManyWithWhereWithoutSellerInput[]
    deleteMany?: ProductScalarWhereInput | ProductScalarWhereInput[]
  }

  export type SellerProductUncheckedUpdateManyWithoutSellerNestedInput = {
    create?: XOR<SellerProductCreateWithoutSellerInput, SellerProductUncheckedCreateWithoutSellerInput> | SellerProductCreateWithoutSellerInput[] | SellerProductUncheckedCreateWithoutSellerInput[]
    connectOrCreate?: SellerProductCreateOrConnectWithoutSellerInput | SellerProductCreateOrConnectWithoutSellerInput[]
    upsert?: SellerProductUpsertWithWhereUniqueWithoutSellerInput | SellerProductUpsertWithWhereUniqueWithoutSellerInput[]
    createMany?: SellerProductCreateManySellerInputEnvelope
    set?: SellerProductWhereUniqueInput | SellerProductWhereUniqueInput[]
    disconnect?: SellerProductWhereUniqueInput | SellerProductWhereUniqueInput[]
    delete?: SellerProductWhereUniqueInput | SellerProductWhereUniqueInput[]
    connect?: SellerProductWhereUniqueInput | SellerProductWhereUniqueInput[]
    update?: SellerProductUpdateWithWhereUniqueWithoutSellerInput | SellerProductUpdateWithWhereUniqueWithoutSellerInput[]
    updateMany?: SellerProductUpdateManyWithWhereWithoutSellerInput | SellerProductUpdateManyWithWhereWithoutSellerInput[]
    deleteMany?: SellerProductScalarWhereInput | SellerProductScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutEnterpriseInput = {
    create?: XOR<UserCreateWithoutEnterpriseInput, UserUncheckedCreateWithoutEnterpriseInput>
    connectOrCreate?: UserCreateOrConnectWithoutEnterpriseInput
    connect?: UserWhereUniqueInput
  }

  export type ProductCreateNestedManyWithoutEnterpriseInput = {
    create?: XOR<ProductCreateWithoutEnterpriseInput, ProductUncheckedCreateWithoutEnterpriseInput> | ProductCreateWithoutEnterpriseInput[] | ProductUncheckedCreateWithoutEnterpriseInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutEnterpriseInput | ProductCreateOrConnectWithoutEnterpriseInput[]
    createMany?: ProductCreateManyEnterpriseInputEnvelope
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
  }

  export type ProductUncheckedCreateNestedManyWithoutEnterpriseInput = {
    create?: XOR<ProductCreateWithoutEnterpriseInput, ProductUncheckedCreateWithoutEnterpriseInput> | ProductCreateWithoutEnterpriseInput[] | ProductUncheckedCreateWithoutEnterpriseInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutEnterpriseInput | ProductCreateOrConnectWithoutEnterpriseInput[]
    createMany?: ProductCreateManyEnterpriseInputEnvelope
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutEnterpriseNestedInput = {
    create?: XOR<UserCreateWithoutEnterpriseInput, UserUncheckedCreateWithoutEnterpriseInput>
    connectOrCreate?: UserCreateOrConnectWithoutEnterpriseInput
    upsert?: UserUpsertWithoutEnterpriseInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutEnterpriseInput, UserUpdateWithoutEnterpriseInput>, UserUncheckedUpdateWithoutEnterpriseInput>
  }

  export type ProductUpdateManyWithoutEnterpriseNestedInput = {
    create?: XOR<ProductCreateWithoutEnterpriseInput, ProductUncheckedCreateWithoutEnterpriseInput> | ProductCreateWithoutEnterpriseInput[] | ProductUncheckedCreateWithoutEnterpriseInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutEnterpriseInput | ProductCreateOrConnectWithoutEnterpriseInput[]
    upsert?: ProductUpsertWithWhereUniqueWithoutEnterpriseInput | ProductUpsertWithWhereUniqueWithoutEnterpriseInput[]
    createMany?: ProductCreateManyEnterpriseInputEnvelope
    set?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    disconnect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    delete?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    update?: ProductUpdateWithWhereUniqueWithoutEnterpriseInput | ProductUpdateWithWhereUniqueWithoutEnterpriseInput[]
    updateMany?: ProductUpdateManyWithWhereWithoutEnterpriseInput | ProductUpdateManyWithWhereWithoutEnterpriseInput[]
    deleteMany?: ProductScalarWhereInput | ProductScalarWhereInput[]
  }

  export type ProductUncheckedUpdateManyWithoutEnterpriseNestedInput = {
    create?: XOR<ProductCreateWithoutEnterpriseInput, ProductUncheckedCreateWithoutEnterpriseInput> | ProductCreateWithoutEnterpriseInput[] | ProductUncheckedCreateWithoutEnterpriseInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutEnterpriseInput | ProductCreateOrConnectWithoutEnterpriseInput[]
    upsert?: ProductUpsertWithWhereUniqueWithoutEnterpriseInput | ProductUpsertWithWhereUniqueWithoutEnterpriseInput[]
    createMany?: ProductCreateManyEnterpriseInputEnvelope
    set?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    disconnect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    delete?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    update?: ProductUpdateWithWhereUniqueWithoutEnterpriseInput | ProductUpdateWithWhereUniqueWithoutEnterpriseInput[]
    updateMany?: ProductUpdateManyWithWhereWithoutEnterpriseInput | ProductUpdateManyWithWhereWithoutEnterpriseInput[]
    deleteMany?: ProductScalarWhereInput | ProductScalarWhereInput[]
  }

  export type CategoryCreateNestedOneWithoutProductsInput = {
    create?: XOR<CategoryCreateWithoutProductsInput, CategoryUncheckedCreateWithoutProductsInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutProductsInput
    connect?: CategoryWhereUniqueInput
  }

  export type SellerCreateNestedOneWithoutProductsInput = {
    create?: XOR<SellerCreateWithoutProductsInput, SellerUncheckedCreateWithoutProductsInput>
    connectOrCreate?: SellerCreateOrConnectWithoutProductsInput
    connect?: SellerWhereUniqueInput
  }

  export type EnterpriseCreateNestedOneWithoutProductsInput = {
    create?: XOR<EnterpriseCreateWithoutProductsInput, EnterpriseUncheckedCreateWithoutProductsInput>
    connectOrCreate?: EnterpriseCreateOrConnectWithoutProductsInput
    connect?: EnterpriseWhereUniqueInput
  }

  export type ProductVariantCreateNestedManyWithoutProductInput = {
    create?: XOR<ProductVariantCreateWithoutProductInput, ProductVariantUncheckedCreateWithoutProductInput> | ProductVariantCreateWithoutProductInput[] | ProductVariantUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ProductVariantCreateOrConnectWithoutProductInput | ProductVariantCreateOrConnectWithoutProductInput[]
    createMany?: ProductVariantCreateManyProductInputEnvelope
    connect?: ProductVariantWhereUniqueInput | ProductVariantWhereUniqueInput[]
  }

  export type ReviewCreateNestedManyWithoutProductInput = {
    create?: XOR<ReviewCreateWithoutProductInput, ReviewUncheckedCreateWithoutProductInput> | ReviewCreateWithoutProductInput[] | ReviewUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutProductInput | ReviewCreateOrConnectWithoutProductInput[]
    createMany?: ReviewCreateManyProductInputEnvelope
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
  }

  export type OrderItemCreateNestedManyWithoutProductInput = {
    create?: XOR<OrderItemCreateWithoutProductInput, OrderItemUncheckedCreateWithoutProductInput> | OrderItemCreateWithoutProductInput[] | OrderItemUncheckedCreateWithoutProductInput[]
    connectOrCreate?: OrderItemCreateOrConnectWithoutProductInput | OrderItemCreateOrConnectWithoutProductInput[]
    createMany?: OrderItemCreateManyProductInputEnvelope
    connect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
  }

  export type UserBehaviorCreateNestedManyWithoutProductInput = {
    create?: XOR<UserBehaviorCreateWithoutProductInput, UserBehaviorUncheckedCreateWithoutProductInput> | UserBehaviorCreateWithoutProductInput[] | UserBehaviorUncheckedCreateWithoutProductInput[]
    connectOrCreate?: UserBehaviorCreateOrConnectWithoutProductInput | UserBehaviorCreateOrConnectWithoutProductInput[]
    createMany?: UserBehaviorCreateManyProductInputEnvelope
    connect?: UserBehaviorWhereUniqueInput | UserBehaviorWhereUniqueInput[]
  }

  export type PromotionProductCreateNestedManyWithoutProductInput = {
    create?: XOR<PromotionProductCreateWithoutProductInput, PromotionProductUncheckedCreateWithoutProductInput> | PromotionProductCreateWithoutProductInput[] | PromotionProductUncheckedCreateWithoutProductInput[]
    connectOrCreate?: PromotionProductCreateOrConnectWithoutProductInput | PromotionProductCreateOrConnectWithoutProductInput[]
    createMany?: PromotionProductCreateManyProductInputEnvelope
    connect?: PromotionProductWhereUniqueInput | PromotionProductWhereUniqueInput[]
  }

  export type SellerProductCreateNestedManyWithoutProductInput = {
    create?: XOR<SellerProductCreateWithoutProductInput, SellerProductUncheckedCreateWithoutProductInput> | SellerProductCreateWithoutProductInput[] | SellerProductUncheckedCreateWithoutProductInput[]
    connectOrCreate?: SellerProductCreateOrConnectWithoutProductInput | SellerProductCreateOrConnectWithoutProductInput[]
    createMany?: SellerProductCreateManyProductInputEnvelope
    connect?: SellerProductWhereUniqueInput | SellerProductWhereUniqueInput[]
  }

  export type ProductVariantUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<ProductVariantCreateWithoutProductInput, ProductVariantUncheckedCreateWithoutProductInput> | ProductVariantCreateWithoutProductInput[] | ProductVariantUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ProductVariantCreateOrConnectWithoutProductInput | ProductVariantCreateOrConnectWithoutProductInput[]
    createMany?: ProductVariantCreateManyProductInputEnvelope
    connect?: ProductVariantWhereUniqueInput | ProductVariantWhereUniqueInput[]
  }

  export type ReviewUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<ReviewCreateWithoutProductInput, ReviewUncheckedCreateWithoutProductInput> | ReviewCreateWithoutProductInput[] | ReviewUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutProductInput | ReviewCreateOrConnectWithoutProductInput[]
    createMany?: ReviewCreateManyProductInputEnvelope
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
  }

  export type OrderItemUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<OrderItemCreateWithoutProductInput, OrderItemUncheckedCreateWithoutProductInput> | OrderItemCreateWithoutProductInput[] | OrderItemUncheckedCreateWithoutProductInput[]
    connectOrCreate?: OrderItemCreateOrConnectWithoutProductInput | OrderItemCreateOrConnectWithoutProductInput[]
    createMany?: OrderItemCreateManyProductInputEnvelope
    connect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
  }

  export type UserBehaviorUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<UserBehaviorCreateWithoutProductInput, UserBehaviorUncheckedCreateWithoutProductInput> | UserBehaviorCreateWithoutProductInput[] | UserBehaviorUncheckedCreateWithoutProductInput[]
    connectOrCreate?: UserBehaviorCreateOrConnectWithoutProductInput | UserBehaviorCreateOrConnectWithoutProductInput[]
    createMany?: UserBehaviorCreateManyProductInputEnvelope
    connect?: UserBehaviorWhereUniqueInput | UserBehaviorWhereUniqueInput[]
  }

  export type PromotionProductUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<PromotionProductCreateWithoutProductInput, PromotionProductUncheckedCreateWithoutProductInput> | PromotionProductCreateWithoutProductInput[] | PromotionProductUncheckedCreateWithoutProductInput[]
    connectOrCreate?: PromotionProductCreateOrConnectWithoutProductInput | PromotionProductCreateOrConnectWithoutProductInput[]
    createMany?: PromotionProductCreateManyProductInputEnvelope
    connect?: PromotionProductWhereUniqueInput | PromotionProductWhereUniqueInput[]
  }

  export type SellerProductUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<SellerProductCreateWithoutProductInput, SellerProductUncheckedCreateWithoutProductInput> | SellerProductCreateWithoutProductInput[] | SellerProductUncheckedCreateWithoutProductInput[]
    connectOrCreate?: SellerProductCreateOrConnectWithoutProductInput | SellerProductCreateOrConnectWithoutProductInput[]
    createMany?: SellerProductCreateManyProductInputEnvelope
    connect?: SellerProductWhereUniqueInput | SellerProductWhereUniqueInput[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type CategoryUpdateOneRequiredWithoutProductsNestedInput = {
    create?: XOR<CategoryCreateWithoutProductsInput, CategoryUncheckedCreateWithoutProductsInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutProductsInput
    upsert?: CategoryUpsertWithoutProductsInput
    connect?: CategoryWhereUniqueInput
    update?: XOR<XOR<CategoryUpdateToOneWithWhereWithoutProductsInput, CategoryUpdateWithoutProductsInput>, CategoryUncheckedUpdateWithoutProductsInput>
  }

  export type SellerUpdateOneWithoutProductsNestedInput = {
    create?: XOR<SellerCreateWithoutProductsInput, SellerUncheckedCreateWithoutProductsInput>
    connectOrCreate?: SellerCreateOrConnectWithoutProductsInput
    upsert?: SellerUpsertWithoutProductsInput
    disconnect?: SellerWhereInput | boolean
    delete?: SellerWhereInput | boolean
    connect?: SellerWhereUniqueInput
    update?: XOR<XOR<SellerUpdateToOneWithWhereWithoutProductsInput, SellerUpdateWithoutProductsInput>, SellerUncheckedUpdateWithoutProductsInput>
  }

  export type EnterpriseUpdateOneWithoutProductsNestedInput = {
    create?: XOR<EnterpriseCreateWithoutProductsInput, EnterpriseUncheckedCreateWithoutProductsInput>
    connectOrCreate?: EnterpriseCreateOrConnectWithoutProductsInput
    upsert?: EnterpriseUpsertWithoutProductsInput
    disconnect?: EnterpriseWhereInput | boolean
    delete?: EnterpriseWhereInput | boolean
    connect?: EnterpriseWhereUniqueInput
    update?: XOR<XOR<EnterpriseUpdateToOneWithWhereWithoutProductsInput, EnterpriseUpdateWithoutProductsInput>, EnterpriseUncheckedUpdateWithoutProductsInput>
  }

  export type ProductVariantUpdateManyWithoutProductNestedInput = {
    create?: XOR<ProductVariantCreateWithoutProductInput, ProductVariantUncheckedCreateWithoutProductInput> | ProductVariantCreateWithoutProductInput[] | ProductVariantUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ProductVariantCreateOrConnectWithoutProductInput | ProductVariantCreateOrConnectWithoutProductInput[]
    upsert?: ProductVariantUpsertWithWhereUniqueWithoutProductInput | ProductVariantUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: ProductVariantCreateManyProductInputEnvelope
    set?: ProductVariantWhereUniqueInput | ProductVariantWhereUniqueInput[]
    disconnect?: ProductVariantWhereUniqueInput | ProductVariantWhereUniqueInput[]
    delete?: ProductVariantWhereUniqueInput | ProductVariantWhereUniqueInput[]
    connect?: ProductVariantWhereUniqueInput | ProductVariantWhereUniqueInput[]
    update?: ProductVariantUpdateWithWhereUniqueWithoutProductInput | ProductVariantUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: ProductVariantUpdateManyWithWhereWithoutProductInput | ProductVariantUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: ProductVariantScalarWhereInput | ProductVariantScalarWhereInput[]
  }

  export type ReviewUpdateManyWithoutProductNestedInput = {
    create?: XOR<ReviewCreateWithoutProductInput, ReviewUncheckedCreateWithoutProductInput> | ReviewCreateWithoutProductInput[] | ReviewUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutProductInput | ReviewCreateOrConnectWithoutProductInput[]
    upsert?: ReviewUpsertWithWhereUniqueWithoutProductInput | ReviewUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: ReviewCreateManyProductInputEnvelope
    set?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    disconnect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    delete?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    update?: ReviewUpdateWithWhereUniqueWithoutProductInput | ReviewUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: ReviewUpdateManyWithWhereWithoutProductInput | ReviewUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
  }

  export type OrderItemUpdateManyWithoutProductNestedInput = {
    create?: XOR<OrderItemCreateWithoutProductInput, OrderItemUncheckedCreateWithoutProductInput> | OrderItemCreateWithoutProductInput[] | OrderItemUncheckedCreateWithoutProductInput[]
    connectOrCreate?: OrderItemCreateOrConnectWithoutProductInput | OrderItemCreateOrConnectWithoutProductInput[]
    upsert?: OrderItemUpsertWithWhereUniqueWithoutProductInput | OrderItemUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: OrderItemCreateManyProductInputEnvelope
    set?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    disconnect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    delete?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    connect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    update?: OrderItemUpdateWithWhereUniqueWithoutProductInput | OrderItemUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: OrderItemUpdateManyWithWhereWithoutProductInput | OrderItemUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: OrderItemScalarWhereInput | OrderItemScalarWhereInput[]
  }

  export type UserBehaviorUpdateManyWithoutProductNestedInput = {
    create?: XOR<UserBehaviorCreateWithoutProductInput, UserBehaviorUncheckedCreateWithoutProductInput> | UserBehaviorCreateWithoutProductInput[] | UserBehaviorUncheckedCreateWithoutProductInput[]
    connectOrCreate?: UserBehaviorCreateOrConnectWithoutProductInput | UserBehaviorCreateOrConnectWithoutProductInput[]
    upsert?: UserBehaviorUpsertWithWhereUniqueWithoutProductInput | UserBehaviorUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: UserBehaviorCreateManyProductInputEnvelope
    set?: UserBehaviorWhereUniqueInput | UserBehaviorWhereUniqueInput[]
    disconnect?: UserBehaviorWhereUniqueInput | UserBehaviorWhereUniqueInput[]
    delete?: UserBehaviorWhereUniqueInput | UserBehaviorWhereUniqueInput[]
    connect?: UserBehaviorWhereUniqueInput | UserBehaviorWhereUniqueInput[]
    update?: UserBehaviorUpdateWithWhereUniqueWithoutProductInput | UserBehaviorUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: UserBehaviorUpdateManyWithWhereWithoutProductInput | UserBehaviorUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: UserBehaviorScalarWhereInput | UserBehaviorScalarWhereInput[]
  }

  export type PromotionProductUpdateManyWithoutProductNestedInput = {
    create?: XOR<PromotionProductCreateWithoutProductInput, PromotionProductUncheckedCreateWithoutProductInput> | PromotionProductCreateWithoutProductInput[] | PromotionProductUncheckedCreateWithoutProductInput[]
    connectOrCreate?: PromotionProductCreateOrConnectWithoutProductInput | PromotionProductCreateOrConnectWithoutProductInput[]
    upsert?: PromotionProductUpsertWithWhereUniqueWithoutProductInput | PromotionProductUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: PromotionProductCreateManyProductInputEnvelope
    set?: PromotionProductWhereUniqueInput | PromotionProductWhereUniqueInput[]
    disconnect?: PromotionProductWhereUniqueInput | PromotionProductWhereUniqueInput[]
    delete?: PromotionProductWhereUniqueInput | PromotionProductWhereUniqueInput[]
    connect?: PromotionProductWhereUniqueInput | PromotionProductWhereUniqueInput[]
    update?: PromotionProductUpdateWithWhereUniqueWithoutProductInput | PromotionProductUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: PromotionProductUpdateManyWithWhereWithoutProductInput | PromotionProductUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: PromotionProductScalarWhereInput | PromotionProductScalarWhereInput[]
  }

  export type SellerProductUpdateManyWithoutProductNestedInput = {
    create?: XOR<SellerProductCreateWithoutProductInput, SellerProductUncheckedCreateWithoutProductInput> | SellerProductCreateWithoutProductInput[] | SellerProductUncheckedCreateWithoutProductInput[]
    connectOrCreate?: SellerProductCreateOrConnectWithoutProductInput | SellerProductCreateOrConnectWithoutProductInput[]
    upsert?: SellerProductUpsertWithWhereUniqueWithoutProductInput | SellerProductUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: SellerProductCreateManyProductInputEnvelope
    set?: SellerProductWhereUniqueInput | SellerProductWhereUniqueInput[]
    disconnect?: SellerProductWhereUniqueInput | SellerProductWhereUniqueInput[]
    delete?: SellerProductWhereUniqueInput | SellerProductWhereUniqueInput[]
    connect?: SellerProductWhereUniqueInput | SellerProductWhereUniqueInput[]
    update?: SellerProductUpdateWithWhereUniqueWithoutProductInput | SellerProductUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: SellerProductUpdateManyWithWhereWithoutProductInput | SellerProductUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: SellerProductScalarWhereInput | SellerProductScalarWhereInput[]
  }

  export type ProductVariantUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<ProductVariantCreateWithoutProductInput, ProductVariantUncheckedCreateWithoutProductInput> | ProductVariantCreateWithoutProductInput[] | ProductVariantUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ProductVariantCreateOrConnectWithoutProductInput | ProductVariantCreateOrConnectWithoutProductInput[]
    upsert?: ProductVariantUpsertWithWhereUniqueWithoutProductInput | ProductVariantUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: ProductVariantCreateManyProductInputEnvelope
    set?: ProductVariantWhereUniqueInput | ProductVariantWhereUniqueInput[]
    disconnect?: ProductVariantWhereUniqueInput | ProductVariantWhereUniqueInput[]
    delete?: ProductVariantWhereUniqueInput | ProductVariantWhereUniqueInput[]
    connect?: ProductVariantWhereUniqueInput | ProductVariantWhereUniqueInput[]
    update?: ProductVariantUpdateWithWhereUniqueWithoutProductInput | ProductVariantUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: ProductVariantUpdateManyWithWhereWithoutProductInput | ProductVariantUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: ProductVariantScalarWhereInput | ProductVariantScalarWhereInput[]
  }

  export type ReviewUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<ReviewCreateWithoutProductInput, ReviewUncheckedCreateWithoutProductInput> | ReviewCreateWithoutProductInput[] | ReviewUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutProductInput | ReviewCreateOrConnectWithoutProductInput[]
    upsert?: ReviewUpsertWithWhereUniqueWithoutProductInput | ReviewUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: ReviewCreateManyProductInputEnvelope
    set?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    disconnect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    delete?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    update?: ReviewUpdateWithWhereUniqueWithoutProductInput | ReviewUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: ReviewUpdateManyWithWhereWithoutProductInput | ReviewUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
  }

  export type OrderItemUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<OrderItemCreateWithoutProductInput, OrderItemUncheckedCreateWithoutProductInput> | OrderItemCreateWithoutProductInput[] | OrderItemUncheckedCreateWithoutProductInput[]
    connectOrCreate?: OrderItemCreateOrConnectWithoutProductInput | OrderItemCreateOrConnectWithoutProductInput[]
    upsert?: OrderItemUpsertWithWhereUniqueWithoutProductInput | OrderItemUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: OrderItemCreateManyProductInputEnvelope
    set?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    disconnect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    delete?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    connect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    update?: OrderItemUpdateWithWhereUniqueWithoutProductInput | OrderItemUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: OrderItemUpdateManyWithWhereWithoutProductInput | OrderItemUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: OrderItemScalarWhereInput | OrderItemScalarWhereInput[]
  }

  export type UserBehaviorUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<UserBehaviorCreateWithoutProductInput, UserBehaviorUncheckedCreateWithoutProductInput> | UserBehaviorCreateWithoutProductInput[] | UserBehaviorUncheckedCreateWithoutProductInput[]
    connectOrCreate?: UserBehaviorCreateOrConnectWithoutProductInput | UserBehaviorCreateOrConnectWithoutProductInput[]
    upsert?: UserBehaviorUpsertWithWhereUniqueWithoutProductInput | UserBehaviorUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: UserBehaviorCreateManyProductInputEnvelope
    set?: UserBehaviorWhereUniqueInput | UserBehaviorWhereUniqueInput[]
    disconnect?: UserBehaviorWhereUniqueInput | UserBehaviorWhereUniqueInput[]
    delete?: UserBehaviorWhereUniqueInput | UserBehaviorWhereUniqueInput[]
    connect?: UserBehaviorWhereUniqueInput | UserBehaviorWhereUniqueInput[]
    update?: UserBehaviorUpdateWithWhereUniqueWithoutProductInput | UserBehaviorUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: UserBehaviorUpdateManyWithWhereWithoutProductInput | UserBehaviorUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: UserBehaviorScalarWhereInput | UserBehaviorScalarWhereInput[]
  }

  export type PromotionProductUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<PromotionProductCreateWithoutProductInput, PromotionProductUncheckedCreateWithoutProductInput> | PromotionProductCreateWithoutProductInput[] | PromotionProductUncheckedCreateWithoutProductInput[]
    connectOrCreate?: PromotionProductCreateOrConnectWithoutProductInput | PromotionProductCreateOrConnectWithoutProductInput[]
    upsert?: PromotionProductUpsertWithWhereUniqueWithoutProductInput | PromotionProductUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: PromotionProductCreateManyProductInputEnvelope
    set?: PromotionProductWhereUniqueInput | PromotionProductWhereUniqueInput[]
    disconnect?: PromotionProductWhereUniqueInput | PromotionProductWhereUniqueInput[]
    delete?: PromotionProductWhereUniqueInput | PromotionProductWhereUniqueInput[]
    connect?: PromotionProductWhereUniqueInput | PromotionProductWhereUniqueInput[]
    update?: PromotionProductUpdateWithWhereUniqueWithoutProductInput | PromotionProductUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: PromotionProductUpdateManyWithWhereWithoutProductInput | PromotionProductUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: PromotionProductScalarWhereInput | PromotionProductScalarWhereInput[]
  }

  export type SellerProductUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<SellerProductCreateWithoutProductInput, SellerProductUncheckedCreateWithoutProductInput> | SellerProductCreateWithoutProductInput[] | SellerProductUncheckedCreateWithoutProductInput[]
    connectOrCreate?: SellerProductCreateOrConnectWithoutProductInput | SellerProductCreateOrConnectWithoutProductInput[]
    upsert?: SellerProductUpsertWithWhereUniqueWithoutProductInput | SellerProductUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: SellerProductCreateManyProductInputEnvelope
    set?: SellerProductWhereUniqueInput | SellerProductWhereUniqueInput[]
    disconnect?: SellerProductWhereUniqueInput | SellerProductWhereUniqueInput[]
    delete?: SellerProductWhereUniqueInput | SellerProductWhereUniqueInput[]
    connect?: SellerProductWhereUniqueInput | SellerProductWhereUniqueInput[]
    update?: SellerProductUpdateWithWhereUniqueWithoutProductInput | SellerProductUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: SellerProductUpdateManyWithWhereWithoutProductInput | SellerProductUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: SellerProductScalarWhereInput | SellerProductScalarWhereInput[]
  }

  export type ProductCreateNestedOneWithoutVariantsInput = {
    create?: XOR<ProductCreateWithoutVariantsInput, ProductUncheckedCreateWithoutVariantsInput>
    connectOrCreate?: ProductCreateOrConnectWithoutVariantsInput
    connect?: ProductWhereUniqueInput
  }

  export type ProductUpdateOneRequiredWithoutVariantsNestedInput = {
    create?: XOR<ProductCreateWithoutVariantsInput, ProductUncheckedCreateWithoutVariantsInput>
    connectOrCreate?: ProductCreateOrConnectWithoutVariantsInput
    upsert?: ProductUpsertWithoutVariantsInput
    connect?: ProductWhereUniqueInput
    update?: XOR<XOR<ProductUpdateToOneWithWhereWithoutVariantsInput, ProductUpdateWithoutVariantsInput>, ProductUncheckedUpdateWithoutVariantsInput>
  }

  export type CategoryCreateNestedOneWithoutChildrenInput = {
    create?: XOR<CategoryCreateWithoutChildrenInput, CategoryUncheckedCreateWithoutChildrenInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutChildrenInput
    connect?: CategoryWhereUniqueInput
  }

  export type CategoryCreateNestedManyWithoutParentInput = {
    create?: XOR<CategoryCreateWithoutParentInput, CategoryUncheckedCreateWithoutParentInput> | CategoryCreateWithoutParentInput[] | CategoryUncheckedCreateWithoutParentInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutParentInput | CategoryCreateOrConnectWithoutParentInput[]
    createMany?: CategoryCreateManyParentInputEnvelope
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
  }

  export type ProductCreateNestedManyWithoutCategoryInput = {
    create?: XOR<ProductCreateWithoutCategoryInput, ProductUncheckedCreateWithoutCategoryInput> | ProductCreateWithoutCategoryInput[] | ProductUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutCategoryInput | ProductCreateOrConnectWithoutCategoryInput[]
    createMany?: ProductCreateManyCategoryInputEnvelope
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
  }

  export type PromotionCategoryCreateNestedManyWithoutCategoryInput = {
    create?: XOR<PromotionCategoryCreateWithoutCategoryInput, PromotionCategoryUncheckedCreateWithoutCategoryInput> | PromotionCategoryCreateWithoutCategoryInput[] | PromotionCategoryUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: PromotionCategoryCreateOrConnectWithoutCategoryInput | PromotionCategoryCreateOrConnectWithoutCategoryInput[]
    createMany?: PromotionCategoryCreateManyCategoryInputEnvelope
    connect?: PromotionCategoryWhereUniqueInput | PromotionCategoryWhereUniqueInput[]
  }

  export type CategoryUncheckedCreateNestedManyWithoutParentInput = {
    create?: XOR<CategoryCreateWithoutParentInput, CategoryUncheckedCreateWithoutParentInput> | CategoryCreateWithoutParentInput[] | CategoryUncheckedCreateWithoutParentInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutParentInput | CategoryCreateOrConnectWithoutParentInput[]
    createMany?: CategoryCreateManyParentInputEnvelope
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
  }

  export type ProductUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<ProductCreateWithoutCategoryInput, ProductUncheckedCreateWithoutCategoryInput> | ProductCreateWithoutCategoryInput[] | ProductUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutCategoryInput | ProductCreateOrConnectWithoutCategoryInput[]
    createMany?: ProductCreateManyCategoryInputEnvelope
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
  }

  export type PromotionCategoryUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<PromotionCategoryCreateWithoutCategoryInput, PromotionCategoryUncheckedCreateWithoutCategoryInput> | PromotionCategoryCreateWithoutCategoryInput[] | PromotionCategoryUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: PromotionCategoryCreateOrConnectWithoutCategoryInput | PromotionCategoryCreateOrConnectWithoutCategoryInput[]
    createMany?: PromotionCategoryCreateManyCategoryInputEnvelope
    connect?: PromotionCategoryWhereUniqueInput | PromotionCategoryWhereUniqueInput[]
  }

  export type CategoryUpdateOneWithoutChildrenNestedInput = {
    create?: XOR<CategoryCreateWithoutChildrenInput, CategoryUncheckedCreateWithoutChildrenInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutChildrenInput
    upsert?: CategoryUpsertWithoutChildrenInput
    disconnect?: CategoryWhereInput | boolean
    delete?: CategoryWhereInput | boolean
    connect?: CategoryWhereUniqueInput
    update?: XOR<XOR<CategoryUpdateToOneWithWhereWithoutChildrenInput, CategoryUpdateWithoutChildrenInput>, CategoryUncheckedUpdateWithoutChildrenInput>
  }

  export type CategoryUpdateManyWithoutParentNestedInput = {
    create?: XOR<CategoryCreateWithoutParentInput, CategoryUncheckedCreateWithoutParentInput> | CategoryCreateWithoutParentInput[] | CategoryUncheckedCreateWithoutParentInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutParentInput | CategoryCreateOrConnectWithoutParentInput[]
    upsert?: CategoryUpsertWithWhereUniqueWithoutParentInput | CategoryUpsertWithWhereUniqueWithoutParentInput[]
    createMany?: CategoryCreateManyParentInputEnvelope
    set?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    disconnect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    delete?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    update?: CategoryUpdateWithWhereUniqueWithoutParentInput | CategoryUpdateWithWhereUniqueWithoutParentInput[]
    updateMany?: CategoryUpdateManyWithWhereWithoutParentInput | CategoryUpdateManyWithWhereWithoutParentInput[]
    deleteMany?: CategoryScalarWhereInput | CategoryScalarWhereInput[]
  }

  export type ProductUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<ProductCreateWithoutCategoryInput, ProductUncheckedCreateWithoutCategoryInput> | ProductCreateWithoutCategoryInput[] | ProductUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutCategoryInput | ProductCreateOrConnectWithoutCategoryInput[]
    upsert?: ProductUpsertWithWhereUniqueWithoutCategoryInput | ProductUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: ProductCreateManyCategoryInputEnvelope
    set?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    disconnect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    delete?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    update?: ProductUpdateWithWhereUniqueWithoutCategoryInput | ProductUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: ProductUpdateManyWithWhereWithoutCategoryInput | ProductUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: ProductScalarWhereInput | ProductScalarWhereInput[]
  }

  export type PromotionCategoryUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<PromotionCategoryCreateWithoutCategoryInput, PromotionCategoryUncheckedCreateWithoutCategoryInput> | PromotionCategoryCreateWithoutCategoryInput[] | PromotionCategoryUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: PromotionCategoryCreateOrConnectWithoutCategoryInput | PromotionCategoryCreateOrConnectWithoutCategoryInput[]
    upsert?: PromotionCategoryUpsertWithWhereUniqueWithoutCategoryInput | PromotionCategoryUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: PromotionCategoryCreateManyCategoryInputEnvelope
    set?: PromotionCategoryWhereUniqueInput | PromotionCategoryWhereUniqueInput[]
    disconnect?: PromotionCategoryWhereUniqueInput | PromotionCategoryWhereUniqueInput[]
    delete?: PromotionCategoryWhereUniqueInput | PromotionCategoryWhereUniqueInput[]
    connect?: PromotionCategoryWhereUniqueInput | PromotionCategoryWhereUniqueInput[]
    update?: PromotionCategoryUpdateWithWhereUniqueWithoutCategoryInput | PromotionCategoryUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: PromotionCategoryUpdateManyWithWhereWithoutCategoryInput | PromotionCategoryUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: PromotionCategoryScalarWhereInput | PromotionCategoryScalarWhereInput[]
  }

  export type CategoryUncheckedUpdateManyWithoutParentNestedInput = {
    create?: XOR<CategoryCreateWithoutParentInput, CategoryUncheckedCreateWithoutParentInput> | CategoryCreateWithoutParentInput[] | CategoryUncheckedCreateWithoutParentInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutParentInput | CategoryCreateOrConnectWithoutParentInput[]
    upsert?: CategoryUpsertWithWhereUniqueWithoutParentInput | CategoryUpsertWithWhereUniqueWithoutParentInput[]
    createMany?: CategoryCreateManyParentInputEnvelope
    set?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    disconnect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    delete?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    update?: CategoryUpdateWithWhereUniqueWithoutParentInput | CategoryUpdateWithWhereUniqueWithoutParentInput[]
    updateMany?: CategoryUpdateManyWithWhereWithoutParentInput | CategoryUpdateManyWithWhereWithoutParentInput[]
    deleteMany?: CategoryScalarWhereInput | CategoryScalarWhereInput[]
  }

  export type ProductUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<ProductCreateWithoutCategoryInput, ProductUncheckedCreateWithoutCategoryInput> | ProductCreateWithoutCategoryInput[] | ProductUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutCategoryInput | ProductCreateOrConnectWithoutCategoryInput[]
    upsert?: ProductUpsertWithWhereUniqueWithoutCategoryInput | ProductUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: ProductCreateManyCategoryInputEnvelope
    set?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    disconnect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    delete?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    update?: ProductUpdateWithWhereUniqueWithoutCategoryInput | ProductUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: ProductUpdateManyWithWhereWithoutCategoryInput | ProductUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: ProductScalarWhereInput | ProductScalarWhereInput[]
  }

  export type PromotionCategoryUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<PromotionCategoryCreateWithoutCategoryInput, PromotionCategoryUncheckedCreateWithoutCategoryInput> | PromotionCategoryCreateWithoutCategoryInput[] | PromotionCategoryUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: PromotionCategoryCreateOrConnectWithoutCategoryInput | PromotionCategoryCreateOrConnectWithoutCategoryInput[]
    upsert?: PromotionCategoryUpsertWithWhereUniqueWithoutCategoryInput | PromotionCategoryUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: PromotionCategoryCreateManyCategoryInputEnvelope
    set?: PromotionCategoryWhereUniqueInput | PromotionCategoryWhereUniqueInput[]
    disconnect?: PromotionCategoryWhereUniqueInput | PromotionCategoryWhereUniqueInput[]
    delete?: PromotionCategoryWhereUniqueInput | PromotionCategoryWhereUniqueInput[]
    connect?: PromotionCategoryWhereUniqueInput | PromotionCategoryWhereUniqueInput[]
    update?: PromotionCategoryUpdateWithWhereUniqueWithoutCategoryInput | PromotionCategoryUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: PromotionCategoryUpdateManyWithWhereWithoutCategoryInput | PromotionCategoryUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: PromotionCategoryScalarWhereInput | PromotionCategoryScalarWhereInput[]
  }

  export type SellerCreateNestedOneWithoutSellerProductsInput = {
    create?: XOR<SellerCreateWithoutSellerProductsInput, SellerUncheckedCreateWithoutSellerProductsInput>
    connectOrCreate?: SellerCreateOrConnectWithoutSellerProductsInput
    connect?: SellerWhereUniqueInput
  }

  export type ProductCreateNestedOneWithoutSellerProductsInput = {
    create?: XOR<ProductCreateWithoutSellerProductsInput, ProductUncheckedCreateWithoutSellerProductsInput>
    connectOrCreate?: ProductCreateOrConnectWithoutSellerProductsInput
    connect?: ProductWhereUniqueInput
  }

  export type SellerUpdateOneRequiredWithoutSellerProductsNestedInput = {
    create?: XOR<SellerCreateWithoutSellerProductsInput, SellerUncheckedCreateWithoutSellerProductsInput>
    connectOrCreate?: SellerCreateOrConnectWithoutSellerProductsInput
    upsert?: SellerUpsertWithoutSellerProductsInput
    connect?: SellerWhereUniqueInput
    update?: XOR<XOR<SellerUpdateToOneWithWhereWithoutSellerProductsInput, SellerUpdateWithoutSellerProductsInput>, SellerUncheckedUpdateWithoutSellerProductsInput>
  }

  export type ProductUpdateOneRequiredWithoutSellerProductsNestedInput = {
    create?: XOR<ProductCreateWithoutSellerProductsInput, ProductUncheckedCreateWithoutSellerProductsInput>
    connectOrCreate?: ProductCreateOrConnectWithoutSellerProductsInput
    upsert?: ProductUpsertWithoutSellerProductsInput
    connect?: ProductWhereUniqueInput
    update?: XOR<XOR<ProductUpdateToOneWithWhereWithoutSellerProductsInput, ProductUpdateWithoutSellerProductsInput>, ProductUncheckedUpdateWithoutSellerProductsInput>
  }

  export type ProductCreateNestedOneWithoutReviewsInput = {
    create?: XOR<ProductCreateWithoutReviewsInput, ProductUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: ProductCreateOrConnectWithoutReviewsInput
    connect?: ProductWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutReviewsInput = {
    create?: XOR<UserCreateWithoutReviewsInput, UserUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: UserCreateOrConnectWithoutReviewsInput
    connect?: UserWhereUniqueInput
  }

  export type ProductUpdateOneRequiredWithoutReviewsNestedInput = {
    create?: XOR<ProductCreateWithoutReviewsInput, ProductUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: ProductCreateOrConnectWithoutReviewsInput
    upsert?: ProductUpsertWithoutReviewsInput
    connect?: ProductWhereUniqueInput
    update?: XOR<XOR<ProductUpdateToOneWithWhereWithoutReviewsInput, ProductUpdateWithoutReviewsInput>, ProductUncheckedUpdateWithoutReviewsInput>
  }

  export type UserUpdateOneRequiredWithoutReviewsNestedInput = {
    create?: XOR<UserCreateWithoutReviewsInput, UserUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: UserCreateOrConnectWithoutReviewsInput
    upsert?: UserUpsertWithoutReviewsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutReviewsInput, UserUpdateWithoutReviewsInput>, UserUncheckedUpdateWithoutReviewsInput>
  }

  export type OrderCreateNestedManyWithoutVoucherInput = {
    create?: XOR<OrderCreateWithoutVoucherInput, OrderUncheckedCreateWithoutVoucherInput> | OrderCreateWithoutVoucherInput[] | OrderUncheckedCreateWithoutVoucherInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutVoucherInput | OrderCreateOrConnectWithoutVoucherInput[]
    createMany?: OrderCreateManyVoucherInputEnvelope
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
  }

  export type OrderUncheckedCreateNestedManyWithoutVoucherInput = {
    create?: XOR<OrderCreateWithoutVoucherInput, OrderUncheckedCreateWithoutVoucherInput> | OrderCreateWithoutVoucherInput[] | OrderUncheckedCreateWithoutVoucherInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutVoucherInput | OrderCreateOrConnectWithoutVoucherInput[]
    createMany?: OrderCreateManyVoucherInputEnvelope
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
  }

  export type EnumDiscountTypeFieldUpdateOperationsInput = {
    set?: $Enums.DiscountType
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type OrderUpdateManyWithoutVoucherNestedInput = {
    create?: XOR<OrderCreateWithoutVoucherInput, OrderUncheckedCreateWithoutVoucherInput> | OrderCreateWithoutVoucherInput[] | OrderUncheckedCreateWithoutVoucherInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutVoucherInput | OrderCreateOrConnectWithoutVoucherInput[]
    upsert?: OrderUpsertWithWhereUniqueWithoutVoucherInput | OrderUpsertWithWhereUniqueWithoutVoucherInput[]
    createMany?: OrderCreateManyVoucherInputEnvelope
    set?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    disconnect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    delete?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    update?: OrderUpdateWithWhereUniqueWithoutVoucherInput | OrderUpdateWithWhereUniqueWithoutVoucherInput[]
    updateMany?: OrderUpdateManyWithWhereWithoutVoucherInput | OrderUpdateManyWithWhereWithoutVoucherInput[]
    deleteMany?: OrderScalarWhereInput | OrderScalarWhereInput[]
  }

  export type OrderUncheckedUpdateManyWithoutVoucherNestedInput = {
    create?: XOR<OrderCreateWithoutVoucherInput, OrderUncheckedCreateWithoutVoucherInput> | OrderCreateWithoutVoucherInput[] | OrderUncheckedCreateWithoutVoucherInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutVoucherInput | OrderCreateOrConnectWithoutVoucherInput[]
    upsert?: OrderUpsertWithWhereUniqueWithoutVoucherInput | OrderUpsertWithWhereUniqueWithoutVoucherInput[]
    createMany?: OrderCreateManyVoucherInputEnvelope
    set?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    disconnect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    delete?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    update?: OrderUpdateWithWhereUniqueWithoutVoucherInput | OrderUpdateWithWhereUniqueWithoutVoucherInput[]
    updateMany?: OrderUpdateManyWithWhereWithoutVoucherInput | OrderUpdateManyWithWhereWithoutVoucherInput[]
    deleteMany?: OrderScalarWhereInput | OrderScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutOrdersInput = {
    create?: XOR<UserCreateWithoutOrdersInput, UserUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: UserCreateOrConnectWithoutOrdersInput
    connect?: UserWhereUniqueInput
  }

  export type VoucherCreateNestedOneWithoutOrdersInput = {
    create?: XOR<VoucherCreateWithoutOrdersInput, VoucherUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: VoucherCreateOrConnectWithoutOrdersInput
    connect?: VoucherWhereUniqueInput
  }

  export type PaymentCreateNestedOneWithoutOrderInput = {
    create?: XOR<PaymentCreateWithoutOrderInput, PaymentUncheckedCreateWithoutOrderInput>
    connectOrCreate?: PaymentCreateOrConnectWithoutOrderInput
    connect?: PaymentWhereUniqueInput
  }

  export type OrderItemCreateNestedManyWithoutOrderInput = {
    create?: XOR<OrderItemCreateWithoutOrderInput, OrderItemUncheckedCreateWithoutOrderInput> | OrderItemCreateWithoutOrderInput[] | OrderItemUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: OrderItemCreateOrConnectWithoutOrderInput | OrderItemCreateOrConnectWithoutOrderInput[]
    createMany?: OrderItemCreateManyOrderInputEnvelope
    connect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
  }

  export type LogisticsOrderCreateNestedManyWithoutOrderInput = {
    create?: XOR<LogisticsOrderCreateWithoutOrderInput, LogisticsOrderUncheckedCreateWithoutOrderInput> | LogisticsOrderCreateWithoutOrderInput[] | LogisticsOrderUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: LogisticsOrderCreateOrConnectWithoutOrderInput | LogisticsOrderCreateOrConnectWithoutOrderInput[]
    createMany?: LogisticsOrderCreateManyOrderInputEnvelope
    connect?: LogisticsOrderWhereUniqueInput | LogisticsOrderWhereUniqueInput[]
  }

  export type PaymentUncheckedCreateNestedOneWithoutOrderInput = {
    create?: XOR<PaymentCreateWithoutOrderInput, PaymentUncheckedCreateWithoutOrderInput>
    connectOrCreate?: PaymentCreateOrConnectWithoutOrderInput
    connect?: PaymentWhereUniqueInput
  }

  export type OrderItemUncheckedCreateNestedManyWithoutOrderInput = {
    create?: XOR<OrderItemCreateWithoutOrderInput, OrderItemUncheckedCreateWithoutOrderInput> | OrderItemCreateWithoutOrderInput[] | OrderItemUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: OrderItemCreateOrConnectWithoutOrderInput | OrderItemCreateOrConnectWithoutOrderInput[]
    createMany?: OrderItemCreateManyOrderInputEnvelope
    connect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
  }

  export type LogisticsOrderUncheckedCreateNestedManyWithoutOrderInput = {
    create?: XOR<LogisticsOrderCreateWithoutOrderInput, LogisticsOrderUncheckedCreateWithoutOrderInput> | LogisticsOrderCreateWithoutOrderInput[] | LogisticsOrderUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: LogisticsOrderCreateOrConnectWithoutOrderInput | LogisticsOrderCreateOrConnectWithoutOrderInput[]
    createMany?: LogisticsOrderCreateManyOrderInputEnvelope
    connect?: LogisticsOrderWhereUniqueInput | LogisticsOrderWhereUniqueInput[]
  }

  export type EnumOrderStatusFieldUpdateOperationsInput = {
    set?: $Enums.OrderStatus
  }

  export type UserUpdateOneRequiredWithoutOrdersNestedInput = {
    create?: XOR<UserCreateWithoutOrdersInput, UserUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: UserCreateOrConnectWithoutOrdersInput
    upsert?: UserUpsertWithoutOrdersInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutOrdersInput, UserUpdateWithoutOrdersInput>, UserUncheckedUpdateWithoutOrdersInput>
  }

  export type VoucherUpdateOneWithoutOrdersNestedInput = {
    create?: XOR<VoucherCreateWithoutOrdersInput, VoucherUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: VoucherCreateOrConnectWithoutOrdersInput
    upsert?: VoucherUpsertWithoutOrdersInput
    disconnect?: VoucherWhereInput | boolean
    delete?: VoucherWhereInput | boolean
    connect?: VoucherWhereUniqueInput
    update?: XOR<XOR<VoucherUpdateToOneWithWhereWithoutOrdersInput, VoucherUpdateWithoutOrdersInput>, VoucherUncheckedUpdateWithoutOrdersInput>
  }

  export type PaymentUpdateOneWithoutOrderNestedInput = {
    create?: XOR<PaymentCreateWithoutOrderInput, PaymentUncheckedCreateWithoutOrderInput>
    connectOrCreate?: PaymentCreateOrConnectWithoutOrderInput
    upsert?: PaymentUpsertWithoutOrderInput
    disconnect?: PaymentWhereInput | boolean
    delete?: PaymentWhereInput | boolean
    connect?: PaymentWhereUniqueInput
    update?: XOR<XOR<PaymentUpdateToOneWithWhereWithoutOrderInput, PaymentUpdateWithoutOrderInput>, PaymentUncheckedUpdateWithoutOrderInput>
  }

  export type OrderItemUpdateManyWithoutOrderNestedInput = {
    create?: XOR<OrderItemCreateWithoutOrderInput, OrderItemUncheckedCreateWithoutOrderInput> | OrderItemCreateWithoutOrderInput[] | OrderItemUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: OrderItemCreateOrConnectWithoutOrderInput | OrderItemCreateOrConnectWithoutOrderInput[]
    upsert?: OrderItemUpsertWithWhereUniqueWithoutOrderInput | OrderItemUpsertWithWhereUniqueWithoutOrderInput[]
    createMany?: OrderItemCreateManyOrderInputEnvelope
    set?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    disconnect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    delete?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    connect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    update?: OrderItemUpdateWithWhereUniqueWithoutOrderInput | OrderItemUpdateWithWhereUniqueWithoutOrderInput[]
    updateMany?: OrderItemUpdateManyWithWhereWithoutOrderInput | OrderItemUpdateManyWithWhereWithoutOrderInput[]
    deleteMany?: OrderItemScalarWhereInput | OrderItemScalarWhereInput[]
  }

  export type LogisticsOrderUpdateManyWithoutOrderNestedInput = {
    create?: XOR<LogisticsOrderCreateWithoutOrderInput, LogisticsOrderUncheckedCreateWithoutOrderInput> | LogisticsOrderCreateWithoutOrderInput[] | LogisticsOrderUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: LogisticsOrderCreateOrConnectWithoutOrderInput | LogisticsOrderCreateOrConnectWithoutOrderInput[]
    upsert?: LogisticsOrderUpsertWithWhereUniqueWithoutOrderInput | LogisticsOrderUpsertWithWhereUniqueWithoutOrderInput[]
    createMany?: LogisticsOrderCreateManyOrderInputEnvelope
    set?: LogisticsOrderWhereUniqueInput | LogisticsOrderWhereUniqueInput[]
    disconnect?: LogisticsOrderWhereUniqueInput | LogisticsOrderWhereUniqueInput[]
    delete?: LogisticsOrderWhereUniqueInput | LogisticsOrderWhereUniqueInput[]
    connect?: LogisticsOrderWhereUniqueInput | LogisticsOrderWhereUniqueInput[]
    update?: LogisticsOrderUpdateWithWhereUniqueWithoutOrderInput | LogisticsOrderUpdateWithWhereUniqueWithoutOrderInput[]
    updateMany?: LogisticsOrderUpdateManyWithWhereWithoutOrderInput | LogisticsOrderUpdateManyWithWhereWithoutOrderInput[]
    deleteMany?: LogisticsOrderScalarWhereInput | LogisticsOrderScalarWhereInput[]
  }

  export type PaymentUncheckedUpdateOneWithoutOrderNestedInput = {
    create?: XOR<PaymentCreateWithoutOrderInput, PaymentUncheckedCreateWithoutOrderInput>
    connectOrCreate?: PaymentCreateOrConnectWithoutOrderInput
    upsert?: PaymentUpsertWithoutOrderInput
    disconnect?: PaymentWhereInput | boolean
    delete?: PaymentWhereInput | boolean
    connect?: PaymentWhereUniqueInput
    update?: XOR<XOR<PaymentUpdateToOneWithWhereWithoutOrderInput, PaymentUpdateWithoutOrderInput>, PaymentUncheckedUpdateWithoutOrderInput>
  }

  export type OrderItemUncheckedUpdateManyWithoutOrderNestedInput = {
    create?: XOR<OrderItemCreateWithoutOrderInput, OrderItemUncheckedCreateWithoutOrderInput> | OrderItemCreateWithoutOrderInput[] | OrderItemUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: OrderItemCreateOrConnectWithoutOrderInput | OrderItemCreateOrConnectWithoutOrderInput[]
    upsert?: OrderItemUpsertWithWhereUniqueWithoutOrderInput | OrderItemUpsertWithWhereUniqueWithoutOrderInput[]
    createMany?: OrderItemCreateManyOrderInputEnvelope
    set?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    disconnect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    delete?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    connect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    update?: OrderItemUpdateWithWhereUniqueWithoutOrderInput | OrderItemUpdateWithWhereUniqueWithoutOrderInput[]
    updateMany?: OrderItemUpdateManyWithWhereWithoutOrderInput | OrderItemUpdateManyWithWhereWithoutOrderInput[]
    deleteMany?: OrderItemScalarWhereInput | OrderItemScalarWhereInput[]
  }

  export type LogisticsOrderUncheckedUpdateManyWithoutOrderNestedInput = {
    create?: XOR<LogisticsOrderCreateWithoutOrderInput, LogisticsOrderUncheckedCreateWithoutOrderInput> | LogisticsOrderCreateWithoutOrderInput[] | LogisticsOrderUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: LogisticsOrderCreateOrConnectWithoutOrderInput | LogisticsOrderCreateOrConnectWithoutOrderInput[]
    upsert?: LogisticsOrderUpsertWithWhereUniqueWithoutOrderInput | LogisticsOrderUpsertWithWhereUniqueWithoutOrderInput[]
    createMany?: LogisticsOrderCreateManyOrderInputEnvelope
    set?: LogisticsOrderWhereUniqueInput | LogisticsOrderWhereUniqueInput[]
    disconnect?: LogisticsOrderWhereUniqueInput | LogisticsOrderWhereUniqueInput[]
    delete?: LogisticsOrderWhereUniqueInput | LogisticsOrderWhereUniqueInput[]
    connect?: LogisticsOrderWhereUniqueInput | LogisticsOrderWhereUniqueInput[]
    update?: LogisticsOrderUpdateWithWhereUniqueWithoutOrderInput | LogisticsOrderUpdateWithWhereUniqueWithoutOrderInput[]
    updateMany?: LogisticsOrderUpdateManyWithWhereWithoutOrderInput | LogisticsOrderUpdateManyWithWhereWithoutOrderInput[]
    deleteMany?: LogisticsOrderScalarWhereInput | LogisticsOrderScalarWhereInput[]
  }

  export type OrderCreateNestedOneWithoutOrderItemsInput = {
    create?: XOR<OrderCreateWithoutOrderItemsInput, OrderUncheckedCreateWithoutOrderItemsInput>
    connectOrCreate?: OrderCreateOrConnectWithoutOrderItemsInput
    connect?: OrderWhereUniqueInput
  }

  export type ProductCreateNestedOneWithoutOrderItemsInput = {
    create?: XOR<ProductCreateWithoutOrderItemsInput, ProductUncheckedCreateWithoutOrderItemsInput>
    connectOrCreate?: ProductCreateOrConnectWithoutOrderItemsInput
    connect?: ProductWhereUniqueInput
  }

  export type OrderUpdateOneRequiredWithoutOrderItemsNestedInput = {
    create?: XOR<OrderCreateWithoutOrderItemsInput, OrderUncheckedCreateWithoutOrderItemsInput>
    connectOrCreate?: OrderCreateOrConnectWithoutOrderItemsInput
    upsert?: OrderUpsertWithoutOrderItemsInput
    connect?: OrderWhereUniqueInput
    update?: XOR<XOR<OrderUpdateToOneWithWhereWithoutOrderItemsInput, OrderUpdateWithoutOrderItemsInput>, OrderUncheckedUpdateWithoutOrderItemsInput>
  }

  export type ProductUpdateOneRequiredWithoutOrderItemsNestedInput = {
    create?: XOR<ProductCreateWithoutOrderItemsInput, ProductUncheckedCreateWithoutOrderItemsInput>
    connectOrCreate?: ProductCreateOrConnectWithoutOrderItemsInput
    upsert?: ProductUpsertWithoutOrderItemsInput
    connect?: ProductWhereUniqueInput
    update?: XOR<XOR<ProductUpdateToOneWithWhereWithoutOrderItemsInput, ProductUpdateWithoutOrderItemsInput>, ProductUncheckedUpdateWithoutOrderItemsInput>
  }

  export type OrderCreateNestedOneWithoutPaymentInput = {
    create?: XOR<OrderCreateWithoutPaymentInput, OrderUncheckedCreateWithoutPaymentInput>
    connectOrCreate?: OrderCreateOrConnectWithoutPaymentInput
    connect?: OrderWhereUniqueInput
  }

  export type EnumPaymentMethodFieldUpdateOperationsInput = {
    set?: $Enums.PaymentMethod
  }

  export type EnumPaymentStatusFieldUpdateOperationsInput = {
    set?: $Enums.PaymentStatus
  }

  export type OrderUpdateOneRequiredWithoutPaymentNestedInput = {
    create?: XOR<OrderCreateWithoutPaymentInput, OrderUncheckedCreateWithoutPaymentInput>
    connectOrCreate?: OrderCreateOrConnectWithoutPaymentInput
    upsert?: OrderUpsertWithoutPaymentInput
    connect?: OrderWhereUniqueInput
    update?: XOR<XOR<OrderUpdateToOneWithWhereWithoutPaymentInput, OrderUpdateWithoutPaymentInput>, OrderUncheckedUpdateWithoutPaymentInput>
  }

  export type UserCreateNestedOneWithoutLogisticsInput = {
    create?: XOR<UserCreateWithoutLogisticsInput, UserUncheckedCreateWithoutLogisticsInput>
    connectOrCreate?: UserCreateOrConnectWithoutLogisticsInput
    connect?: UserWhereUniqueInput
  }

  export type ShipperCreateNestedManyWithoutLogisticsPartnerInput = {
    create?: XOR<ShipperCreateWithoutLogisticsPartnerInput, ShipperUncheckedCreateWithoutLogisticsPartnerInput> | ShipperCreateWithoutLogisticsPartnerInput[] | ShipperUncheckedCreateWithoutLogisticsPartnerInput[]
    connectOrCreate?: ShipperCreateOrConnectWithoutLogisticsPartnerInput | ShipperCreateOrConnectWithoutLogisticsPartnerInput[]
    createMany?: ShipperCreateManyLogisticsPartnerInputEnvelope
    connect?: ShipperWhereUniqueInput | ShipperWhereUniqueInput[]
  }

  export type LogisticsOrderCreateNestedManyWithoutLogisticsPartnerInput = {
    create?: XOR<LogisticsOrderCreateWithoutLogisticsPartnerInput, LogisticsOrderUncheckedCreateWithoutLogisticsPartnerInput> | LogisticsOrderCreateWithoutLogisticsPartnerInput[] | LogisticsOrderUncheckedCreateWithoutLogisticsPartnerInput[]
    connectOrCreate?: LogisticsOrderCreateOrConnectWithoutLogisticsPartnerInput | LogisticsOrderCreateOrConnectWithoutLogisticsPartnerInput[]
    createMany?: LogisticsOrderCreateManyLogisticsPartnerInputEnvelope
    connect?: LogisticsOrderWhereUniqueInput | LogisticsOrderWhereUniqueInput[]
  }

  export type ShipperUncheckedCreateNestedManyWithoutLogisticsPartnerInput = {
    create?: XOR<ShipperCreateWithoutLogisticsPartnerInput, ShipperUncheckedCreateWithoutLogisticsPartnerInput> | ShipperCreateWithoutLogisticsPartnerInput[] | ShipperUncheckedCreateWithoutLogisticsPartnerInput[]
    connectOrCreate?: ShipperCreateOrConnectWithoutLogisticsPartnerInput | ShipperCreateOrConnectWithoutLogisticsPartnerInput[]
    createMany?: ShipperCreateManyLogisticsPartnerInputEnvelope
    connect?: ShipperWhereUniqueInput | ShipperWhereUniqueInput[]
  }

  export type LogisticsOrderUncheckedCreateNestedManyWithoutLogisticsPartnerInput = {
    create?: XOR<LogisticsOrderCreateWithoutLogisticsPartnerInput, LogisticsOrderUncheckedCreateWithoutLogisticsPartnerInput> | LogisticsOrderCreateWithoutLogisticsPartnerInput[] | LogisticsOrderUncheckedCreateWithoutLogisticsPartnerInput[]
    connectOrCreate?: LogisticsOrderCreateOrConnectWithoutLogisticsPartnerInput | LogisticsOrderCreateOrConnectWithoutLogisticsPartnerInput[]
    createMany?: LogisticsOrderCreateManyLogisticsPartnerInputEnvelope
    connect?: LogisticsOrderWhereUniqueInput | LogisticsOrderWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutLogisticsNestedInput = {
    create?: XOR<UserCreateWithoutLogisticsInput, UserUncheckedCreateWithoutLogisticsInput>
    connectOrCreate?: UserCreateOrConnectWithoutLogisticsInput
    upsert?: UserUpsertWithoutLogisticsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutLogisticsInput, UserUpdateWithoutLogisticsInput>, UserUncheckedUpdateWithoutLogisticsInput>
  }

  export type ShipperUpdateManyWithoutLogisticsPartnerNestedInput = {
    create?: XOR<ShipperCreateWithoutLogisticsPartnerInput, ShipperUncheckedCreateWithoutLogisticsPartnerInput> | ShipperCreateWithoutLogisticsPartnerInput[] | ShipperUncheckedCreateWithoutLogisticsPartnerInput[]
    connectOrCreate?: ShipperCreateOrConnectWithoutLogisticsPartnerInput | ShipperCreateOrConnectWithoutLogisticsPartnerInput[]
    upsert?: ShipperUpsertWithWhereUniqueWithoutLogisticsPartnerInput | ShipperUpsertWithWhereUniqueWithoutLogisticsPartnerInput[]
    createMany?: ShipperCreateManyLogisticsPartnerInputEnvelope
    set?: ShipperWhereUniqueInput | ShipperWhereUniqueInput[]
    disconnect?: ShipperWhereUniqueInput | ShipperWhereUniqueInput[]
    delete?: ShipperWhereUniqueInput | ShipperWhereUniqueInput[]
    connect?: ShipperWhereUniqueInput | ShipperWhereUniqueInput[]
    update?: ShipperUpdateWithWhereUniqueWithoutLogisticsPartnerInput | ShipperUpdateWithWhereUniqueWithoutLogisticsPartnerInput[]
    updateMany?: ShipperUpdateManyWithWhereWithoutLogisticsPartnerInput | ShipperUpdateManyWithWhereWithoutLogisticsPartnerInput[]
    deleteMany?: ShipperScalarWhereInput | ShipperScalarWhereInput[]
  }

  export type LogisticsOrderUpdateManyWithoutLogisticsPartnerNestedInput = {
    create?: XOR<LogisticsOrderCreateWithoutLogisticsPartnerInput, LogisticsOrderUncheckedCreateWithoutLogisticsPartnerInput> | LogisticsOrderCreateWithoutLogisticsPartnerInput[] | LogisticsOrderUncheckedCreateWithoutLogisticsPartnerInput[]
    connectOrCreate?: LogisticsOrderCreateOrConnectWithoutLogisticsPartnerInput | LogisticsOrderCreateOrConnectWithoutLogisticsPartnerInput[]
    upsert?: LogisticsOrderUpsertWithWhereUniqueWithoutLogisticsPartnerInput | LogisticsOrderUpsertWithWhereUniqueWithoutLogisticsPartnerInput[]
    createMany?: LogisticsOrderCreateManyLogisticsPartnerInputEnvelope
    set?: LogisticsOrderWhereUniqueInput | LogisticsOrderWhereUniqueInput[]
    disconnect?: LogisticsOrderWhereUniqueInput | LogisticsOrderWhereUniqueInput[]
    delete?: LogisticsOrderWhereUniqueInput | LogisticsOrderWhereUniqueInput[]
    connect?: LogisticsOrderWhereUniqueInput | LogisticsOrderWhereUniqueInput[]
    update?: LogisticsOrderUpdateWithWhereUniqueWithoutLogisticsPartnerInput | LogisticsOrderUpdateWithWhereUniqueWithoutLogisticsPartnerInput[]
    updateMany?: LogisticsOrderUpdateManyWithWhereWithoutLogisticsPartnerInput | LogisticsOrderUpdateManyWithWhereWithoutLogisticsPartnerInput[]
    deleteMany?: LogisticsOrderScalarWhereInput | LogisticsOrderScalarWhereInput[]
  }

  export type ShipperUncheckedUpdateManyWithoutLogisticsPartnerNestedInput = {
    create?: XOR<ShipperCreateWithoutLogisticsPartnerInput, ShipperUncheckedCreateWithoutLogisticsPartnerInput> | ShipperCreateWithoutLogisticsPartnerInput[] | ShipperUncheckedCreateWithoutLogisticsPartnerInput[]
    connectOrCreate?: ShipperCreateOrConnectWithoutLogisticsPartnerInput | ShipperCreateOrConnectWithoutLogisticsPartnerInput[]
    upsert?: ShipperUpsertWithWhereUniqueWithoutLogisticsPartnerInput | ShipperUpsertWithWhereUniqueWithoutLogisticsPartnerInput[]
    createMany?: ShipperCreateManyLogisticsPartnerInputEnvelope
    set?: ShipperWhereUniqueInput | ShipperWhereUniqueInput[]
    disconnect?: ShipperWhereUniqueInput | ShipperWhereUniqueInput[]
    delete?: ShipperWhereUniqueInput | ShipperWhereUniqueInput[]
    connect?: ShipperWhereUniqueInput | ShipperWhereUniqueInput[]
    update?: ShipperUpdateWithWhereUniqueWithoutLogisticsPartnerInput | ShipperUpdateWithWhereUniqueWithoutLogisticsPartnerInput[]
    updateMany?: ShipperUpdateManyWithWhereWithoutLogisticsPartnerInput | ShipperUpdateManyWithWhereWithoutLogisticsPartnerInput[]
    deleteMany?: ShipperScalarWhereInput | ShipperScalarWhereInput[]
  }

  export type LogisticsOrderUncheckedUpdateManyWithoutLogisticsPartnerNestedInput = {
    create?: XOR<LogisticsOrderCreateWithoutLogisticsPartnerInput, LogisticsOrderUncheckedCreateWithoutLogisticsPartnerInput> | LogisticsOrderCreateWithoutLogisticsPartnerInput[] | LogisticsOrderUncheckedCreateWithoutLogisticsPartnerInput[]
    connectOrCreate?: LogisticsOrderCreateOrConnectWithoutLogisticsPartnerInput | LogisticsOrderCreateOrConnectWithoutLogisticsPartnerInput[]
    upsert?: LogisticsOrderUpsertWithWhereUniqueWithoutLogisticsPartnerInput | LogisticsOrderUpsertWithWhereUniqueWithoutLogisticsPartnerInput[]
    createMany?: LogisticsOrderCreateManyLogisticsPartnerInputEnvelope
    set?: LogisticsOrderWhereUniqueInput | LogisticsOrderWhereUniqueInput[]
    disconnect?: LogisticsOrderWhereUniqueInput | LogisticsOrderWhereUniqueInput[]
    delete?: LogisticsOrderWhereUniqueInput | LogisticsOrderWhereUniqueInput[]
    connect?: LogisticsOrderWhereUniqueInput | LogisticsOrderWhereUniqueInput[]
    update?: LogisticsOrderUpdateWithWhereUniqueWithoutLogisticsPartnerInput | LogisticsOrderUpdateWithWhereUniqueWithoutLogisticsPartnerInput[]
    updateMany?: LogisticsOrderUpdateManyWithWhereWithoutLogisticsPartnerInput | LogisticsOrderUpdateManyWithWhereWithoutLogisticsPartnerInput[]
    deleteMany?: LogisticsOrderScalarWhereInput | LogisticsOrderScalarWhereInput[]
  }

  export type ShipperCreatedeliveryHistoryInput = {
    set: InputJsonValue[]
  }

  export type LogisticsPartnerCreateNestedOneWithoutShippersInput = {
    create?: XOR<LogisticsPartnerCreateWithoutShippersInput, LogisticsPartnerUncheckedCreateWithoutShippersInput>
    connectOrCreate?: LogisticsPartnerCreateOrConnectWithoutShippersInput
    connect?: LogisticsPartnerWhereUniqueInput
  }

  export type LogisticsOrderCreateNestedManyWithoutShipperInput = {
    create?: XOR<LogisticsOrderCreateWithoutShipperInput, LogisticsOrderUncheckedCreateWithoutShipperInput> | LogisticsOrderCreateWithoutShipperInput[] | LogisticsOrderUncheckedCreateWithoutShipperInput[]
    connectOrCreate?: LogisticsOrderCreateOrConnectWithoutShipperInput | LogisticsOrderCreateOrConnectWithoutShipperInput[]
    createMany?: LogisticsOrderCreateManyShipperInputEnvelope
    connect?: LogisticsOrderWhereUniqueInput | LogisticsOrderWhereUniqueInput[]
  }

  export type LogisticsOrderUncheckedCreateNestedManyWithoutShipperInput = {
    create?: XOR<LogisticsOrderCreateWithoutShipperInput, LogisticsOrderUncheckedCreateWithoutShipperInput> | LogisticsOrderCreateWithoutShipperInput[] | LogisticsOrderUncheckedCreateWithoutShipperInput[]
    connectOrCreate?: LogisticsOrderCreateOrConnectWithoutShipperInput | LogisticsOrderCreateOrConnectWithoutShipperInput[]
    createMany?: LogisticsOrderCreateManyShipperInputEnvelope
    connect?: LogisticsOrderWhereUniqueInput | LogisticsOrderWhereUniqueInput[]
  }

  export type EnumShipperStatusFieldUpdateOperationsInput = {
    set?: $Enums.ShipperStatus
  }

  export type ShipperUpdatedeliveryHistoryInput = {
    set?: InputJsonValue[]
    push?: InputJsonValue | InputJsonValue[]
  }

  export type LogisticsPartnerUpdateOneRequiredWithoutShippersNestedInput = {
    create?: XOR<LogisticsPartnerCreateWithoutShippersInput, LogisticsPartnerUncheckedCreateWithoutShippersInput>
    connectOrCreate?: LogisticsPartnerCreateOrConnectWithoutShippersInput
    upsert?: LogisticsPartnerUpsertWithoutShippersInput
    connect?: LogisticsPartnerWhereUniqueInput
    update?: XOR<XOR<LogisticsPartnerUpdateToOneWithWhereWithoutShippersInput, LogisticsPartnerUpdateWithoutShippersInput>, LogisticsPartnerUncheckedUpdateWithoutShippersInput>
  }

  export type LogisticsOrderUpdateManyWithoutShipperNestedInput = {
    create?: XOR<LogisticsOrderCreateWithoutShipperInput, LogisticsOrderUncheckedCreateWithoutShipperInput> | LogisticsOrderCreateWithoutShipperInput[] | LogisticsOrderUncheckedCreateWithoutShipperInput[]
    connectOrCreate?: LogisticsOrderCreateOrConnectWithoutShipperInput | LogisticsOrderCreateOrConnectWithoutShipperInput[]
    upsert?: LogisticsOrderUpsertWithWhereUniqueWithoutShipperInput | LogisticsOrderUpsertWithWhereUniqueWithoutShipperInput[]
    createMany?: LogisticsOrderCreateManyShipperInputEnvelope
    set?: LogisticsOrderWhereUniqueInput | LogisticsOrderWhereUniqueInput[]
    disconnect?: LogisticsOrderWhereUniqueInput | LogisticsOrderWhereUniqueInput[]
    delete?: LogisticsOrderWhereUniqueInput | LogisticsOrderWhereUniqueInput[]
    connect?: LogisticsOrderWhereUniqueInput | LogisticsOrderWhereUniqueInput[]
    update?: LogisticsOrderUpdateWithWhereUniqueWithoutShipperInput | LogisticsOrderUpdateWithWhereUniqueWithoutShipperInput[]
    updateMany?: LogisticsOrderUpdateManyWithWhereWithoutShipperInput | LogisticsOrderUpdateManyWithWhereWithoutShipperInput[]
    deleteMany?: LogisticsOrderScalarWhereInput | LogisticsOrderScalarWhereInput[]
  }

  export type LogisticsOrderUncheckedUpdateManyWithoutShipperNestedInput = {
    create?: XOR<LogisticsOrderCreateWithoutShipperInput, LogisticsOrderUncheckedCreateWithoutShipperInput> | LogisticsOrderCreateWithoutShipperInput[] | LogisticsOrderUncheckedCreateWithoutShipperInput[]
    connectOrCreate?: LogisticsOrderCreateOrConnectWithoutShipperInput | LogisticsOrderCreateOrConnectWithoutShipperInput[]
    upsert?: LogisticsOrderUpsertWithWhereUniqueWithoutShipperInput | LogisticsOrderUpsertWithWhereUniqueWithoutShipperInput[]
    createMany?: LogisticsOrderCreateManyShipperInputEnvelope
    set?: LogisticsOrderWhereUniqueInput | LogisticsOrderWhereUniqueInput[]
    disconnect?: LogisticsOrderWhereUniqueInput | LogisticsOrderWhereUniqueInput[]
    delete?: LogisticsOrderWhereUniqueInput | LogisticsOrderWhereUniqueInput[]
    connect?: LogisticsOrderWhereUniqueInput | LogisticsOrderWhereUniqueInput[]
    update?: LogisticsOrderUpdateWithWhereUniqueWithoutShipperInput | LogisticsOrderUpdateWithWhereUniqueWithoutShipperInput[]
    updateMany?: LogisticsOrderUpdateManyWithWhereWithoutShipperInput | LogisticsOrderUpdateManyWithWhereWithoutShipperInput[]
    deleteMany?: LogisticsOrderScalarWhereInput | LogisticsOrderScalarWhereInput[]
  }

  export type LogisticsOrderCreateproofOfDeliveryInput = {
    set: string[]
  }

  export type OrderCreateNestedOneWithoutLogisticsOrdersInput = {
    create?: XOR<OrderCreateWithoutLogisticsOrdersInput, OrderUncheckedCreateWithoutLogisticsOrdersInput>
    connectOrCreate?: OrderCreateOrConnectWithoutLogisticsOrdersInput
    connect?: OrderWhereUniqueInput
  }

  export type LogisticsPartnerCreateNestedOneWithoutOrdersInput = {
    create?: XOR<LogisticsPartnerCreateWithoutOrdersInput, LogisticsPartnerUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: LogisticsPartnerCreateOrConnectWithoutOrdersInput
    connect?: LogisticsPartnerWhereUniqueInput
  }

  export type ShipperCreateNestedOneWithoutAssignedOrdersInput = {
    create?: XOR<ShipperCreateWithoutAssignedOrdersInput, ShipperUncheckedCreateWithoutAssignedOrdersInput>
    connectOrCreate?: ShipperCreateOrConnectWithoutAssignedOrdersInput
    connect?: ShipperWhereUniqueInput
  }

  export type EnumLogisticsStatusFieldUpdateOperationsInput = {
    set?: $Enums.LogisticsStatus
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type LogisticsOrderUpdateproofOfDeliveryInput = {
    set?: string[]
    push?: string | string[]
  }

  export type OrderUpdateOneRequiredWithoutLogisticsOrdersNestedInput = {
    create?: XOR<OrderCreateWithoutLogisticsOrdersInput, OrderUncheckedCreateWithoutLogisticsOrdersInput>
    connectOrCreate?: OrderCreateOrConnectWithoutLogisticsOrdersInput
    upsert?: OrderUpsertWithoutLogisticsOrdersInput
    connect?: OrderWhereUniqueInput
    update?: XOR<XOR<OrderUpdateToOneWithWhereWithoutLogisticsOrdersInput, OrderUpdateWithoutLogisticsOrdersInput>, OrderUncheckedUpdateWithoutLogisticsOrdersInput>
  }

  export type LogisticsPartnerUpdateOneRequiredWithoutOrdersNestedInput = {
    create?: XOR<LogisticsPartnerCreateWithoutOrdersInput, LogisticsPartnerUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: LogisticsPartnerCreateOrConnectWithoutOrdersInput
    upsert?: LogisticsPartnerUpsertWithoutOrdersInput
    connect?: LogisticsPartnerWhereUniqueInput
    update?: XOR<XOR<LogisticsPartnerUpdateToOneWithWhereWithoutOrdersInput, LogisticsPartnerUpdateWithoutOrdersInput>, LogisticsPartnerUncheckedUpdateWithoutOrdersInput>
  }

  export type ShipperUpdateOneWithoutAssignedOrdersNestedInput = {
    create?: XOR<ShipperCreateWithoutAssignedOrdersInput, ShipperUncheckedCreateWithoutAssignedOrdersInput>
    connectOrCreate?: ShipperCreateOrConnectWithoutAssignedOrdersInput
    upsert?: ShipperUpsertWithoutAssignedOrdersInput
    disconnect?: ShipperWhereInput | boolean
    delete?: ShipperWhereInput | boolean
    connect?: ShipperWhereUniqueInput
    update?: XOR<XOR<ShipperUpdateToOneWithWhereWithoutAssignedOrdersInput, ShipperUpdateWithoutAssignedOrdersInput>, ShipperUncheckedUpdateWithoutAssignedOrdersInput>
  }

  export type UserCreateNestedOneWithoutBehaviorsInput = {
    create?: XOR<UserCreateWithoutBehaviorsInput, UserUncheckedCreateWithoutBehaviorsInput>
    connectOrCreate?: UserCreateOrConnectWithoutBehaviorsInput
    connect?: UserWhereUniqueInput
  }

  export type ProductCreateNestedOneWithoutBehaviorsInput = {
    create?: XOR<ProductCreateWithoutBehaviorsInput, ProductUncheckedCreateWithoutBehaviorsInput>
    connectOrCreate?: ProductCreateOrConnectWithoutBehaviorsInput
    connect?: ProductWhereUniqueInput
  }

  export type EnumBehaviorTypeFieldUpdateOperationsInput = {
    set?: $Enums.BehaviorType
  }

  export type UserUpdateOneRequiredWithoutBehaviorsNestedInput = {
    create?: XOR<UserCreateWithoutBehaviorsInput, UserUncheckedCreateWithoutBehaviorsInput>
    connectOrCreate?: UserCreateOrConnectWithoutBehaviorsInput
    upsert?: UserUpsertWithoutBehaviorsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutBehaviorsInput, UserUpdateWithoutBehaviorsInput>, UserUncheckedUpdateWithoutBehaviorsInput>
  }

  export type ProductUpdateOneRequiredWithoutBehaviorsNestedInput = {
    create?: XOR<ProductCreateWithoutBehaviorsInput, ProductUncheckedCreateWithoutBehaviorsInput>
    connectOrCreate?: ProductCreateOrConnectWithoutBehaviorsInput
    upsert?: ProductUpsertWithoutBehaviorsInput
    connect?: ProductWhereUniqueInput
    update?: XOR<XOR<ProductUpdateToOneWithWhereWithoutBehaviorsInput, ProductUpdateWithoutBehaviorsInput>, ProductUncheckedUpdateWithoutBehaviorsInput>
  }

  export type PromotionProductCreateNestedManyWithoutPromotionInput = {
    create?: XOR<PromotionProductCreateWithoutPromotionInput, PromotionProductUncheckedCreateWithoutPromotionInput> | PromotionProductCreateWithoutPromotionInput[] | PromotionProductUncheckedCreateWithoutPromotionInput[]
    connectOrCreate?: PromotionProductCreateOrConnectWithoutPromotionInput | PromotionProductCreateOrConnectWithoutPromotionInput[]
    createMany?: PromotionProductCreateManyPromotionInputEnvelope
    connect?: PromotionProductWhereUniqueInput | PromotionProductWhereUniqueInput[]
  }

  export type PromotionCategoryCreateNestedManyWithoutPromotionInput = {
    create?: XOR<PromotionCategoryCreateWithoutPromotionInput, PromotionCategoryUncheckedCreateWithoutPromotionInput> | PromotionCategoryCreateWithoutPromotionInput[] | PromotionCategoryUncheckedCreateWithoutPromotionInput[]
    connectOrCreate?: PromotionCategoryCreateOrConnectWithoutPromotionInput | PromotionCategoryCreateOrConnectWithoutPromotionInput[]
    createMany?: PromotionCategoryCreateManyPromotionInputEnvelope
    connect?: PromotionCategoryWhereUniqueInput | PromotionCategoryWhereUniqueInput[]
  }

  export type PromotionProductUncheckedCreateNestedManyWithoutPromotionInput = {
    create?: XOR<PromotionProductCreateWithoutPromotionInput, PromotionProductUncheckedCreateWithoutPromotionInput> | PromotionProductCreateWithoutPromotionInput[] | PromotionProductUncheckedCreateWithoutPromotionInput[]
    connectOrCreate?: PromotionProductCreateOrConnectWithoutPromotionInput | PromotionProductCreateOrConnectWithoutPromotionInput[]
    createMany?: PromotionProductCreateManyPromotionInputEnvelope
    connect?: PromotionProductWhereUniqueInput | PromotionProductWhereUniqueInput[]
  }

  export type PromotionCategoryUncheckedCreateNestedManyWithoutPromotionInput = {
    create?: XOR<PromotionCategoryCreateWithoutPromotionInput, PromotionCategoryUncheckedCreateWithoutPromotionInput> | PromotionCategoryCreateWithoutPromotionInput[] | PromotionCategoryUncheckedCreateWithoutPromotionInput[]
    connectOrCreate?: PromotionCategoryCreateOrConnectWithoutPromotionInput | PromotionCategoryCreateOrConnectWithoutPromotionInput[]
    createMany?: PromotionCategoryCreateManyPromotionInputEnvelope
    connect?: PromotionCategoryWhereUniqueInput | PromotionCategoryWhereUniqueInput[]
  }

  export type EnumPromotionTypeFieldUpdateOperationsInput = {
    set?: $Enums.PromotionType
  }

  export type PromotionProductUpdateManyWithoutPromotionNestedInput = {
    create?: XOR<PromotionProductCreateWithoutPromotionInput, PromotionProductUncheckedCreateWithoutPromotionInput> | PromotionProductCreateWithoutPromotionInput[] | PromotionProductUncheckedCreateWithoutPromotionInput[]
    connectOrCreate?: PromotionProductCreateOrConnectWithoutPromotionInput | PromotionProductCreateOrConnectWithoutPromotionInput[]
    upsert?: PromotionProductUpsertWithWhereUniqueWithoutPromotionInput | PromotionProductUpsertWithWhereUniqueWithoutPromotionInput[]
    createMany?: PromotionProductCreateManyPromotionInputEnvelope
    set?: PromotionProductWhereUniqueInput | PromotionProductWhereUniqueInput[]
    disconnect?: PromotionProductWhereUniqueInput | PromotionProductWhereUniqueInput[]
    delete?: PromotionProductWhereUniqueInput | PromotionProductWhereUniqueInput[]
    connect?: PromotionProductWhereUniqueInput | PromotionProductWhereUniqueInput[]
    update?: PromotionProductUpdateWithWhereUniqueWithoutPromotionInput | PromotionProductUpdateWithWhereUniqueWithoutPromotionInput[]
    updateMany?: PromotionProductUpdateManyWithWhereWithoutPromotionInput | PromotionProductUpdateManyWithWhereWithoutPromotionInput[]
    deleteMany?: PromotionProductScalarWhereInput | PromotionProductScalarWhereInput[]
  }

  export type PromotionCategoryUpdateManyWithoutPromotionNestedInput = {
    create?: XOR<PromotionCategoryCreateWithoutPromotionInput, PromotionCategoryUncheckedCreateWithoutPromotionInput> | PromotionCategoryCreateWithoutPromotionInput[] | PromotionCategoryUncheckedCreateWithoutPromotionInput[]
    connectOrCreate?: PromotionCategoryCreateOrConnectWithoutPromotionInput | PromotionCategoryCreateOrConnectWithoutPromotionInput[]
    upsert?: PromotionCategoryUpsertWithWhereUniqueWithoutPromotionInput | PromotionCategoryUpsertWithWhereUniqueWithoutPromotionInput[]
    createMany?: PromotionCategoryCreateManyPromotionInputEnvelope
    set?: PromotionCategoryWhereUniqueInput | PromotionCategoryWhereUniqueInput[]
    disconnect?: PromotionCategoryWhereUniqueInput | PromotionCategoryWhereUniqueInput[]
    delete?: PromotionCategoryWhereUniqueInput | PromotionCategoryWhereUniqueInput[]
    connect?: PromotionCategoryWhereUniqueInput | PromotionCategoryWhereUniqueInput[]
    update?: PromotionCategoryUpdateWithWhereUniqueWithoutPromotionInput | PromotionCategoryUpdateWithWhereUniqueWithoutPromotionInput[]
    updateMany?: PromotionCategoryUpdateManyWithWhereWithoutPromotionInput | PromotionCategoryUpdateManyWithWhereWithoutPromotionInput[]
    deleteMany?: PromotionCategoryScalarWhereInput | PromotionCategoryScalarWhereInput[]
  }

  export type PromotionProductUncheckedUpdateManyWithoutPromotionNestedInput = {
    create?: XOR<PromotionProductCreateWithoutPromotionInput, PromotionProductUncheckedCreateWithoutPromotionInput> | PromotionProductCreateWithoutPromotionInput[] | PromotionProductUncheckedCreateWithoutPromotionInput[]
    connectOrCreate?: PromotionProductCreateOrConnectWithoutPromotionInput | PromotionProductCreateOrConnectWithoutPromotionInput[]
    upsert?: PromotionProductUpsertWithWhereUniqueWithoutPromotionInput | PromotionProductUpsertWithWhereUniqueWithoutPromotionInput[]
    createMany?: PromotionProductCreateManyPromotionInputEnvelope
    set?: PromotionProductWhereUniqueInput | PromotionProductWhereUniqueInput[]
    disconnect?: PromotionProductWhereUniqueInput | PromotionProductWhereUniqueInput[]
    delete?: PromotionProductWhereUniqueInput | PromotionProductWhereUniqueInput[]
    connect?: PromotionProductWhereUniqueInput | PromotionProductWhereUniqueInput[]
    update?: PromotionProductUpdateWithWhereUniqueWithoutPromotionInput | PromotionProductUpdateWithWhereUniqueWithoutPromotionInput[]
    updateMany?: PromotionProductUpdateManyWithWhereWithoutPromotionInput | PromotionProductUpdateManyWithWhereWithoutPromotionInput[]
    deleteMany?: PromotionProductScalarWhereInput | PromotionProductScalarWhereInput[]
  }

  export type PromotionCategoryUncheckedUpdateManyWithoutPromotionNestedInput = {
    create?: XOR<PromotionCategoryCreateWithoutPromotionInput, PromotionCategoryUncheckedCreateWithoutPromotionInput> | PromotionCategoryCreateWithoutPromotionInput[] | PromotionCategoryUncheckedCreateWithoutPromotionInput[]
    connectOrCreate?: PromotionCategoryCreateOrConnectWithoutPromotionInput | PromotionCategoryCreateOrConnectWithoutPromotionInput[]
    upsert?: PromotionCategoryUpsertWithWhereUniqueWithoutPromotionInput | PromotionCategoryUpsertWithWhereUniqueWithoutPromotionInput[]
    createMany?: PromotionCategoryCreateManyPromotionInputEnvelope
    set?: PromotionCategoryWhereUniqueInput | PromotionCategoryWhereUniqueInput[]
    disconnect?: PromotionCategoryWhereUniqueInput | PromotionCategoryWhereUniqueInput[]
    delete?: PromotionCategoryWhereUniqueInput | PromotionCategoryWhereUniqueInput[]
    connect?: PromotionCategoryWhereUniqueInput | PromotionCategoryWhereUniqueInput[]
    update?: PromotionCategoryUpdateWithWhereUniqueWithoutPromotionInput | PromotionCategoryUpdateWithWhereUniqueWithoutPromotionInput[]
    updateMany?: PromotionCategoryUpdateManyWithWhereWithoutPromotionInput | PromotionCategoryUpdateManyWithWhereWithoutPromotionInput[]
    deleteMany?: PromotionCategoryScalarWhereInput | PromotionCategoryScalarWhereInput[]
  }

  export type PromotionCreateNestedOneWithoutProductsInput = {
    create?: XOR<PromotionCreateWithoutProductsInput, PromotionUncheckedCreateWithoutProductsInput>
    connectOrCreate?: PromotionCreateOrConnectWithoutProductsInput
    connect?: PromotionWhereUniqueInput
  }

  export type ProductCreateNestedOneWithoutPromotionsInput = {
    create?: XOR<ProductCreateWithoutPromotionsInput, ProductUncheckedCreateWithoutPromotionsInput>
    connectOrCreate?: ProductCreateOrConnectWithoutPromotionsInput
    connect?: ProductWhereUniqueInput
  }

  export type PromotionUpdateOneRequiredWithoutProductsNestedInput = {
    create?: XOR<PromotionCreateWithoutProductsInput, PromotionUncheckedCreateWithoutProductsInput>
    connectOrCreate?: PromotionCreateOrConnectWithoutProductsInput
    upsert?: PromotionUpsertWithoutProductsInput
    connect?: PromotionWhereUniqueInput
    update?: XOR<XOR<PromotionUpdateToOneWithWhereWithoutProductsInput, PromotionUpdateWithoutProductsInput>, PromotionUncheckedUpdateWithoutProductsInput>
  }

  export type ProductUpdateOneRequiredWithoutPromotionsNestedInput = {
    create?: XOR<ProductCreateWithoutPromotionsInput, ProductUncheckedCreateWithoutPromotionsInput>
    connectOrCreate?: ProductCreateOrConnectWithoutPromotionsInput
    upsert?: ProductUpsertWithoutPromotionsInput
    connect?: ProductWhereUniqueInput
    update?: XOR<XOR<ProductUpdateToOneWithWhereWithoutPromotionsInput, ProductUpdateWithoutPromotionsInput>, ProductUncheckedUpdateWithoutPromotionsInput>
  }

  export type PromotionCreateNestedOneWithoutCategoriesInput = {
    create?: XOR<PromotionCreateWithoutCategoriesInput, PromotionUncheckedCreateWithoutCategoriesInput>
    connectOrCreate?: PromotionCreateOrConnectWithoutCategoriesInput
    connect?: PromotionWhereUniqueInput
  }

  export type CategoryCreateNestedOneWithoutPromotionsInput = {
    create?: XOR<CategoryCreateWithoutPromotionsInput, CategoryUncheckedCreateWithoutPromotionsInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutPromotionsInput
    connect?: CategoryWhereUniqueInput
  }

  export type PromotionUpdateOneRequiredWithoutCategoriesNestedInput = {
    create?: XOR<PromotionCreateWithoutCategoriesInput, PromotionUncheckedCreateWithoutCategoriesInput>
    connectOrCreate?: PromotionCreateOrConnectWithoutCategoriesInput
    upsert?: PromotionUpsertWithoutCategoriesInput
    connect?: PromotionWhereUniqueInput
    update?: XOR<XOR<PromotionUpdateToOneWithWhereWithoutCategoriesInput, PromotionUpdateWithoutCategoriesInput>, PromotionUncheckedUpdateWithoutCategoriesInput>
  }

  export type CategoryUpdateOneRequiredWithoutPromotionsNestedInput = {
    create?: XOR<CategoryCreateWithoutPromotionsInput, CategoryUncheckedCreateWithoutPromotionsInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutPromotionsInput
    upsert?: CategoryUpsertWithoutPromotionsInput
    connect?: CategoryWhereUniqueInput
    update?: XOR<XOR<CategoryUpdateToOneWithWhereWithoutPromotionsInput, CategoryUpdateWithoutPromotionsInput>, CategoryUncheckedUpdateWithoutPromotionsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedEnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedEnumDiscountTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.DiscountType | EnumDiscountTypeFieldRefInput<$PrismaModel>
    in?: $Enums.DiscountType[] | ListEnumDiscountTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.DiscountType[] | ListEnumDiscountTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumDiscountTypeFilter<$PrismaModel> | $Enums.DiscountType
  }

  export type NestedEnumDiscountTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DiscountType | EnumDiscountTypeFieldRefInput<$PrismaModel>
    in?: $Enums.DiscountType[] | ListEnumDiscountTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.DiscountType[] | ListEnumDiscountTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumDiscountTypeWithAggregatesFilter<$PrismaModel> | $Enums.DiscountType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDiscountTypeFilter<$PrismaModel>
    _max?: NestedEnumDiscountTypeFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedEnumOrderStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.OrderStatus | EnumOrderStatusFieldRefInput<$PrismaModel>
    in?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumOrderStatusFilter<$PrismaModel> | $Enums.OrderStatus
  }

  export type NestedEnumOrderStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.OrderStatus | EnumOrderStatusFieldRefInput<$PrismaModel>
    in?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumOrderStatusWithAggregatesFilter<$PrismaModel> | $Enums.OrderStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumOrderStatusFilter<$PrismaModel>
    _max?: NestedEnumOrderStatusFilter<$PrismaModel>
  }

  export type NestedEnumPaymentMethodFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentMethod | EnumPaymentMethodFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentMethodFilter<$PrismaModel> | $Enums.PaymentMethod
  }

  export type NestedEnumPaymentStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentStatus | EnumPaymentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentStatusFilter<$PrismaModel> | $Enums.PaymentStatus
  }

  export type NestedEnumPaymentMethodWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentMethod | EnumPaymentMethodFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentMethodWithAggregatesFilter<$PrismaModel> | $Enums.PaymentMethod
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentMethodFilter<$PrismaModel>
    _max?: NestedEnumPaymentMethodFilter<$PrismaModel>
  }

  export type NestedEnumPaymentStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentStatus | EnumPaymentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentStatusWithAggregatesFilter<$PrismaModel> | $Enums.PaymentStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentStatusFilter<$PrismaModel>
    _max?: NestedEnumPaymentStatusFilter<$PrismaModel>
  }

  export type NestedEnumShipperStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ShipperStatus | EnumShipperStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ShipperStatus[] | ListEnumShipperStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ShipperStatus[] | ListEnumShipperStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumShipperStatusFilter<$PrismaModel> | $Enums.ShipperStatus
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedEnumShipperStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ShipperStatus | EnumShipperStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ShipperStatus[] | ListEnumShipperStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ShipperStatus[] | ListEnumShipperStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumShipperStatusWithAggregatesFilter<$PrismaModel> | $Enums.ShipperStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumShipperStatusFilter<$PrismaModel>
    _max?: NestedEnumShipperStatusFilter<$PrismaModel>
  }

  export type NestedEnumLogisticsStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.LogisticsStatus | EnumLogisticsStatusFieldRefInput<$PrismaModel>
    in?: $Enums.LogisticsStatus[] | ListEnumLogisticsStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.LogisticsStatus[] | ListEnumLogisticsStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumLogisticsStatusFilter<$PrismaModel> | $Enums.LogisticsStatus
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedEnumLogisticsStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.LogisticsStatus | EnumLogisticsStatusFieldRefInput<$PrismaModel>
    in?: $Enums.LogisticsStatus[] | ListEnumLogisticsStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.LogisticsStatus[] | ListEnumLogisticsStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumLogisticsStatusWithAggregatesFilter<$PrismaModel> | $Enums.LogisticsStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumLogisticsStatusFilter<$PrismaModel>
    _max?: NestedEnumLogisticsStatusFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedEnumBehaviorTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.BehaviorType | EnumBehaviorTypeFieldRefInput<$PrismaModel>
    in?: $Enums.BehaviorType[] | ListEnumBehaviorTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.BehaviorType[] | ListEnumBehaviorTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumBehaviorTypeFilter<$PrismaModel> | $Enums.BehaviorType
  }

  export type NestedEnumBehaviorTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BehaviorType | EnumBehaviorTypeFieldRefInput<$PrismaModel>
    in?: $Enums.BehaviorType[] | ListEnumBehaviorTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.BehaviorType[] | ListEnumBehaviorTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumBehaviorTypeWithAggregatesFilter<$PrismaModel> | $Enums.BehaviorType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumBehaviorTypeFilter<$PrismaModel>
    _max?: NestedEnumBehaviorTypeFilter<$PrismaModel>
  }

  export type NestedEnumPromotionTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.PromotionType | EnumPromotionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PromotionType[] | ListEnumPromotionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PromotionType[] | ListEnumPromotionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPromotionTypeFilter<$PrismaModel> | $Enums.PromotionType
  }

  export type NestedEnumPromotionTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PromotionType | EnumPromotionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PromotionType[] | ListEnumPromotionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PromotionType[] | ListEnumPromotionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPromotionTypeWithAggregatesFilter<$PrismaModel> | $Enums.PromotionType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPromotionTypeFilter<$PrismaModel>
    _max?: NestedEnumPromotionTypeFilter<$PrismaModel>
  }

  export type SellerCreateWithoutUserInput = {
    id?: string
    storeName: string
    verified?: boolean
    rating?: number | null
    products?: ProductCreateNestedManyWithoutSellerInput
    sellerProducts?: SellerProductCreateNestedManyWithoutSellerInput
  }

  export type SellerUncheckedCreateWithoutUserInput = {
    id?: string
    storeName: string
    verified?: boolean
    rating?: number | null
    products?: ProductUncheckedCreateNestedManyWithoutSellerInput
    sellerProducts?: SellerProductUncheckedCreateNestedManyWithoutSellerInput
  }

  export type SellerCreateOrConnectWithoutUserInput = {
    where: SellerWhereUniqueInput
    create: XOR<SellerCreateWithoutUserInput, SellerUncheckedCreateWithoutUserInput>
  }

  export type EnterpriseCreateWithoutUserInput = {
    id?: string
    companyName: string
    taxCode?: string | null
    verified?: boolean
    officialBrand?: boolean
    rating?: number | null
    products?: ProductCreateNestedManyWithoutEnterpriseInput
  }

  export type EnterpriseUncheckedCreateWithoutUserInput = {
    id?: string
    companyName: string
    taxCode?: string | null
    verified?: boolean
    officialBrand?: boolean
    rating?: number | null
    products?: ProductUncheckedCreateNestedManyWithoutEnterpriseInput
  }

  export type EnterpriseCreateOrConnectWithoutUserInput = {
    where: EnterpriseWhereUniqueInput
    create: XOR<EnterpriseCreateWithoutUserInput, EnterpriseUncheckedCreateWithoutUserInput>
  }

  export type LogisticsPartnerCreateWithoutUserInput = {
    id?: string
    name: string
    apiEndpoint?: string | null
    baseRate: number
    rating?: number | null
    verified?: boolean
    shippers?: ShipperCreateNestedManyWithoutLogisticsPartnerInput
    orders?: LogisticsOrderCreateNestedManyWithoutLogisticsPartnerInput
  }

  export type LogisticsPartnerUncheckedCreateWithoutUserInput = {
    id?: string
    name: string
    apiEndpoint?: string | null
    baseRate: number
    rating?: number | null
    verified?: boolean
    shippers?: ShipperUncheckedCreateNestedManyWithoutLogisticsPartnerInput
    orders?: LogisticsOrderUncheckedCreateNestedManyWithoutLogisticsPartnerInput
  }

  export type LogisticsPartnerCreateOrConnectWithoutUserInput = {
    where: LogisticsPartnerWhereUniqueInput
    create: XOR<LogisticsPartnerCreateWithoutUserInput, LogisticsPartnerUncheckedCreateWithoutUserInput>
  }

  export type AddressCreateWithoutUserInput = {
    id?: string
    label?: string | null
    fullName: string
    phone: string
    province: string
    district: string
    ward: string
    street: string
    isDefault?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AddressUncheckedCreateWithoutUserInput = {
    id?: string
    label?: string | null
    fullName: string
    phone: string
    province: string
    district: string
    ward: string
    street: string
    isDefault?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AddressCreateOrConnectWithoutUserInput = {
    where: AddressWhereUniqueInput
    create: XOR<AddressCreateWithoutUserInput, AddressUncheckedCreateWithoutUserInput>
  }

  export type AddressCreateManyUserInputEnvelope = {
    data: AddressCreateManyUserInput | AddressCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type OrderCreateWithoutUserInput = {
    id?: string
    totalAmount: number
    status?: $Enums.OrderStatus
    paymentId?: string | null
    shippingId?: string | null
    createdAt?: Date | string
    voucher?: VoucherCreateNestedOneWithoutOrdersInput
    payment?: PaymentCreateNestedOneWithoutOrderInput
    orderItems?: OrderItemCreateNestedManyWithoutOrderInput
    logisticsOrders?: LogisticsOrderCreateNestedManyWithoutOrderInput
  }

  export type OrderUncheckedCreateWithoutUserInput = {
    id?: string
    totalAmount: number
    status?: $Enums.OrderStatus
    paymentId?: string | null
    shippingId?: string | null
    voucherId?: string | null
    createdAt?: Date | string
    payment?: PaymentUncheckedCreateNestedOneWithoutOrderInput
    orderItems?: OrderItemUncheckedCreateNestedManyWithoutOrderInput
    logisticsOrders?: LogisticsOrderUncheckedCreateNestedManyWithoutOrderInput
  }

  export type OrderCreateOrConnectWithoutUserInput = {
    where: OrderWhereUniqueInput
    create: XOR<OrderCreateWithoutUserInput, OrderUncheckedCreateWithoutUserInput>
  }

  export type OrderCreateManyUserInputEnvelope = {
    data: OrderCreateManyUserInput | OrderCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ReviewCreateWithoutUserInput = {
    id?: string
    rating: number
    comment?: string | null
    createdAt?: Date | string
    product: ProductCreateNestedOneWithoutReviewsInput
  }

  export type ReviewUncheckedCreateWithoutUserInput = {
    id?: string
    productId: string
    rating: number
    comment?: string | null
    createdAt?: Date | string
  }

  export type ReviewCreateOrConnectWithoutUserInput = {
    where: ReviewWhereUniqueInput
    create: XOR<ReviewCreateWithoutUserInput, ReviewUncheckedCreateWithoutUserInput>
  }

  export type ReviewCreateManyUserInputEnvelope = {
    data: ReviewCreateManyUserInput | ReviewCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserBehaviorCreateWithoutUserInput = {
    id?: string
    type: $Enums.BehaviorType
    createdAt?: Date | string
    product: ProductCreateNestedOneWithoutBehaviorsInput
  }

  export type UserBehaviorUncheckedCreateWithoutUserInput = {
    id?: string
    productId: string
    type: $Enums.BehaviorType
    createdAt?: Date | string
  }

  export type UserBehaviorCreateOrConnectWithoutUserInput = {
    where: UserBehaviorWhereUniqueInput
    create: XOR<UserBehaviorCreateWithoutUserInput, UserBehaviorUncheckedCreateWithoutUserInput>
  }

  export type UserBehaviorCreateManyUserInputEnvelope = {
    data: UserBehaviorCreateManyUserInput | UserBehaviorCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type SellerUpsertWithoutUserInput = {
    update: XOR<SellerUpdateWithoutUserInput, SellerUncheckedUpdateWithoutUserInput>
    create: XOR<SellerCreateWithoutUserInput, SellerUncheckedCreateWithoutUserInput>
    where?: SellerWhereInput
  }

  export type SellerUpdateToOneWithWhereWithoutUserInput = {
    where?: SellerWhereInput
    data: XOR<SellerUpdateWithoutUserInput, SellerUncheckedUpdateWithoutUserInput>
  }

  export type SellerUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    storeName?: StringFieldUpdateOperationsInput | string
    verified?: BoolFieldUpdateOperationsInput | boolean
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    products?: ProductUpdateManyWithoutSellerNestedInput
    sellerProducts?: SellerProductUpdateManyWithoutSellerNestedInput
  }

  export type SellerUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    storeName?: StringFieldUpdateOperationsInput | string
    verified?: BoolFieldUpdateOperationsInput | boolean
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    products?: ProductUncheckedUpdateManyWithoutSellerNestedInput
    sellerProducts?: SellerProductUncheckedUpdateManyWithoutSellerNestedInput
  }

  export type EnterpriseUpsertWithoutUserInput = {
    update: XOR<EnterpriseUpdateWithoutUserInput, EnterpriseUncheckedUpdateWithoutUserInput>
    create: XOR<EnterpriseCreateWithoutUserInput, EnterpriseUncheckedCreateWithoutUserInput>
    where?: EnterpriseWhereInput
  }

  export type EnterpriseUpdateToOneWithWhereWithoutUserInput = {
    where?: EnterpriseWhereInput
    data: XOR<EnterpriseUpdateWithoutUserInput, EnterpriseUncheckedUpdateWithoutUserInput>
  }

  export type EnterpriseUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyName?: StringFieldUpdateOperationsInput | string
    taxCode?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    officialBrand?: BoolFieldUpdateOperationsInput | boolean
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    products?: ProductUpdateManyWithoutEnterpriseNestedInput
  }

  export type EnterpriseUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyName?: StringFieldUpdateOperationsInput | string
    taxCode?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    officialBrand?: BoolFieldUpdateOperationsInput | boolean
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    products?: ProductUncheckedUpdateManyWithoutEnterpriseNestedInput
  }

  export type LogisticsPartnerUpsertWithoutUserInput = {
    update: XOR<LogisticsPartnerUpdateWithoutUserInput, LogisticsPartnerUncheckedUpdateWithoutUserInput>
    create: XOR<LogisticsPartnerCreateWithoutUserInput, LogisticsPartnerUncheckedCreateWithoutUserInput>
    where?: LogisticsPartnerWhereInput
  }

  export type LogisticsPartnerUpdateToOneWithWhereWithoutUserInput = {
    where?: LogisticsPartnerWhereInput
    data: XOR<LogisticsPartnerUpdateWithoutUserInput, LogisticsPartnerUncheckedUpdateWithoutUserInput>
  }

  export type LogisticsPartnerUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    apiEndpoint?: NullableStringFieldUpdateOperationsInput | string | null
    baseRate?: FloatFieldUpdateOperationsInput | number
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    shippers?: ShipperUpdateManyWithoutLogisticsPartnerNestedInput
    orders?: LogisticsOrderUpdateManyWithoutLogisticsPartnerNestedInput
  }

  export type LogisticsPartnerUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    apiEndpoint?: NullableStringFieldUpdateOperationsInput | string | null
    baseRate?: FloatFieldUpdateOperationsInput | number
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    shippers?: ShipperUncheckedUpdateManyWithoutLogisticsPartnerNestedInput
    orders?: LogisticsOrderUncheckedUpdateManyWithoutLogisticsPartnerNestedInput
  }

  export type AddressUpsertWithWhereUniqueWithoutUserInput = {
    where: AddressWhereUniqueInput
    update: XOR<AddressUpdateWithoutUserInput, AddressUncheckedUpdateWithoutUserInput>
    create: XOR<AddressCreateWithoutUserInput, AddressUncheckedCreateWithoutUserInput>
  }

  export type AddressUpdateWithWhereUniqueWithoutUserInput = {
    where: AddressWhereUniqueInput
    data: XOR<AddressUpdateWithoutUserInput, AddressUncheckedUpdateWithoutUserInput>
  }

  export type AddressUpdateManyWithWhereWithoutUserInput = {
    where: AddressScalarWhereInput
    data: XOR<AddressUpdateManyMutationInput, AddressUncheckedUpdateManyWithoutUserInput>
  }

  export type AddressScalarWhereInput = {
    AND?: AddressScalarWhereInput | AddressScalarWhereInput[]
    OR?: AddressScalarWhereInput[]
    NOT?: AddressScalarWhereInput | AddressScalarWhereInput[]
    id?: StringFilter<"Address"> | string
    userId?: StringFilter<"Address"> | string
    label?: StringNullableFilter<"Address"> | string | null
    fullName?: StringFilter<"Address"> | string
    phone?: StringFilter<"Address"> | string
    province?: StringFilter<"Address"> | string
    district?: StringFilter<"Address"> | string
    ward?: StringFilter<"Address"> | string
    street?: StringFilter<"Address"> | string
    isDefault?: BoolFilter<"Address"> | boolean
    createdAt?: DateTimeFilter<"Address"> | Date | string
    updatedAt?: DateTimeFilter<"Address"> | Date | string
  }

  export type OrderUpsertWithWhereUniqueWithoutUserInput = {
    where: OrderWhereUniqueInput
    update: XOR<OrderUpdateWithoutUserInput, OrderUncheckedUpdateWithoutUserInput>
    create: XOR<OrderCreateWithoutUserInput, OrderUncheckedCreateWithoutUserInput>
  }

  export type OrderUpdateWithWhereUniqueWithoutUserInput = {
    where: OrderWhereUniqueInput
    data: XOR<OrderUpdateWithoutUserInput, OrderUncheckedUpdateWithoutUserInput>
  }

  export type OrderUpdateManyWithWhereWithoutUserInput = {
    where: OrderScalarWhereInput
    data: XOR<OrderUpdateManyMutationInput, OrderUncheckedUpdateManyWithoutUserInput>
  }

  export type OrderScalarWhereInput = {
    AND?: OrderScalarWhereInput | OrderScalarWhereInput[]
    OR?: OrderScalarWhereInput[]
    NOT?: OrderScalarWhereInput | OrderScalarWhereInput[]
    id?: StringFilter<"Order"> | string
    userId?: StringFilter<"Order"> | string
    totalAmount?: FloatFilter<"Order"> | number
    status?: EnumOrderStatusFilter<"Order"> | $Enums.OrderStatus
    paymentId?: StringNullableFilter<"Order"> | string | null
    shippingId?: StringNullableFilter<"Order"> | string | null
    voucherId?: StringNullableFilter<"Order"> | string | null
    createdAt?: DateTimeFilter<"Order"> | Date | string
  }

  export type ReviewUpsertWithWhereUniqueWithoutUserInput = {
    where: ReviewWhereUniqueInput
    update: XOR<ReviewUpdateWithoutUserInput, ReviewUncheckedUpdateWithoutUserInput>
    create: XOR<ReviewCreateWithoutUserInput, ReviewUncheckedCreateWithoutUserInput>
  }

  export type ReviewUpdateWithWhereUniqueWithoutUserInput = {
    where: ReviewWhereUniqueInput
    data: XOR<ReviewUpdateWithoutUserInput, ReviewUncheckedUpdateWithoutUserInput>
  }

  export type ReviewUpdateManyWithWhereWithoutUserInput = {
    where: ReviewScalarWhereInput
    data: XOR<ReviewUpdateManyMutationInput, ReviewUncheckedUpdateManyWithoutUserInput>
  }

  export type ReviewScalarWhereInput = {
    AND?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
    OR?: ReviewScalarWhereInput[]
    NOT?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
    id?: StringFilter<"Review"> | string
    productId?: StringFilter<"Review"> | string
    userId?: StringFilter<"Review"> | string
    rating?: IntFilter<"Review"> | number
    comment?: StringNullableFilter<"Review"> | string | null
    createdAt?: DateTimeFilter<"Review"> | Date | string
  }

  export type UserBehaviorUpsertWithWhereUniqueWithoutUserInput = {
    where: UserBehaviorWhereUniqueInput
    update: XOR<UserBehaviorUpdateWithoutUserInput, UserBehaviorUncheckedUpdateWithoutUserInput>
    create: XOR<UserBehaviorCreateWithoutUserInput, UserBehaviorUncheckedCreateWithoutUserInput>
  }

  export type UserBehaviorUpdateWithWhereUniqueWithoutUserInput = {
    where: UserBehaviorWhereUniqueInput
    data: XOR<UserBehaviorUpdateWithoutUserInput, UserBehaviorUncheckedUpdateWithoutUserInput>
  }

  export type UserBehaviorUpdateManyWithWhereWithoutUserInput = {
    where: UserBehaviorScalarWhereInput
    data: XOR<UserBehaviorUpdateManyMutationInput, UserBehaviorUncheckedUpdateManyWithoutUserInput>
  }

  export type UserBehaviorScalarWhereInput = {
    AND?: UserBehaviorScalarWhereInput | UserBehaviorScalarWhereInput[]
    OR?: UserBehaviorScalarWhereInput[]
    NOT?: UserBehaviorScalarWhereInput | UserBehaviorScalarWhereInput[]
    id?: StringFilter<"UserBehavior"> | string
    userId?: StringFilter<"UserBehavior"> | string
    productId?: StringFilter<"UserBehavior"> | string
    type?: EnumBehaviorTypeFilter<"UserBehavior"> | $Enums.BehaviorType
    createdAt?: DateTimeFilter<"UserBehavior"> | Date | string
  }

  export type UserCreateWithoutAddressesInput = {
    id?: string
    email: string
    password: string
    name: string
    avatar?: string | null
    phone?: string | null
    role: $Enums.Role
    isVerified?: boolean
    verificationToken?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    seller?: SellerCreateNestedOneWithoutUserInput
    enterprise?: EnterpriseCreateNestedOneWithoutUserInput
    logistics?: LogisticsPartnerCreateNestedOneWithoutUserInput
    orders?: OrderCreateNestedManyWithoutUserInput
    reviews?: ReviewCreateNestedManyWithoutUserInput
    behaviors?: UserBehaviorCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAddressesInput = {
    id?: string
    email: string
    password: string
    name: string
    avatar?: string | null
    phone?: string | null
    role: $Enums.Role
    isVerified?: boolean
    verificationToken?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    seller?: SellerUncheckedCreateNestedOneWithoutUserInput
    enterprise?: EnterpriseUncheckedCreateNestedOneWithoutUserInput
    logistics?: LogisticsPartnerUncheckedCreateNestedOneWithoutUserInput
    orders?: OrderUncheckedCreateNestedManyWithoutUserInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutUserInput
    behaviors?: UserBehaviorUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAddressesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAddressesInput, UserUncheckedCreateWithoutAddressesInput>
  }

  export type UserUpsertWithoutAddressesInput = {
    update: XOR<UserUpdateWithoutAddressesInput, UserUncheckedUpdateWithoutAddressesInput>
    create: XOR<UserCreateWithoutAddressesInput, UserUncheckedCreateWithoutAddressesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAddressesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAddressesInput, UserUncheckedUpdateWithoutAddressesInput>
  }

  export type UserUpdateWithoutAddressesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    seller?: SellerUpdateOneWithoutUserNestedInput
    enterprise?: EnterpriseUpdateOneWithoutUserNestedInput
    logistics?: LogisticsPartnerUpdateOneWithoutUserNestedInput
    orders?: OrderUpdateManyWithoutUserNestedInput
    reviews?: ReviewUpdateManyWithoutUserNestedInput
    behaviors?: UserBehaviorUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAddressesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    seller?: SellerUncheckedUpdateOneWithoutUserNestedInput
    enterprise?: EnterpriseUncheckedUpdateOneWithoutUserNestedInput
    logistics?: LogisticsPartnerUncheckedUpdateOneWithoutUserNestedInput
    orders?: OrderUncheckedUpdateManyWithoutUserNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutUserNestedInput
    behaviors?: UserBehaviorUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutSellerInput = {
    id?: string
    email: string
    password: string
    name: string
    avatar?: string | null
    phone?: string | null
    role: $Enums.Role
    isVerified?: boolean
    verificationToken?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    enterprise?: EnterpriseCreateNestedOneWithoutUserInput
    logistics?: LogisticsPartnerCreateNestedOneWithoutUserInput
    addresses?: AddressCreateNestedManyWithoutUserInput
    orders?: OrderCreateNestedManyWithoutUserInput
    reviews?: ReviewCreateNestedManyWithoutUserInput
    behaviors?: UserBehaviorCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSellerInput = {
    id?: string
    email: string
    password: string
    name: string
    avatar?: string | null
    phone?: string | null
    role: $Enums.Role
    isVerified?: boolean
    verificationToken?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    enterprise?: EnterpriseUncheckedCreateNestedOneWithoutUserInput
    logistics?: LogisticsPartnerUncheckedCreateNestedOneWithoutUserInput
    addresses?: AddressUncheckedCreateNestedManyWithoutUserInput
    orders?: OrderUncheckedCreateNestedManyWithoutUserInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutUserInput
    behaviors?: UserBehaviorUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSellerInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSellerInput, UserUncheckedCreateWithoutSellerInput>
  }

  export type ProductCreateWithoutSellerInput = {
    id?: string
    name: string
    description: string
    basePrice: number
    stock: number
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    category: CategoryCreateNestedOneWithoutProductsInput
    enterprise?: EnterpriseCreateNestedOneWithoutProductsInput
    variants?: ProductVariantCreateNestedManyWithoutProductInput
    reviews?: ReviewCreateNestedManyWithoutProductInput
    orderItems?: OrderItemCreateNestedManyWithoutProductInput
    behaviors?: UserBehaviorCreateNestedManyWithoutProductInput
    promotions?: PromotionProductCreateNestedManyWithoutProductInput
    sellerProducts?: SellerProductCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutSellerInput = {
    id?: string
    name: string
    description: string
    categoryId: string
    enterpriseId?: string | null
    basePrice: number
    stock: number
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    variants?: ProductVariantUncheckedCreateNestedManyWithoutProductInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutProductInput
    orderItems?: OrderItemUncheckedCreateNestedManyWithoutProductInput
    behaviors?: UserBehaviorUncheckedCreateNestedManyWithoutProductInput
    promotions?: PromotionProductUncheckedCreateNestedManyWithoutProductInput
    sellerProducts?: SellerProductUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutSellerInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutSellerInput, ProductUncheckedCreateWithoutSellerInput>
  }

  export type ProductCreateManySellerInputEnvelope = {
    data: ProductCreateManySellerInput | ProductCreateManySellerInput[]
    skipDuplicates?: boolean
  }

  export type SellerProductCreateWithoutSellerInput = {
    id?: string
    price: number
    stock: number
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    product: ProductCreateNestedOneWithoutSellerProductsInput
  }

  export type SellerProductUncheckedCreateWithoutSellerInput = {
    id?: string
    productId: string
    price: number
    stock: number
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SellerProductCreateOrConnectWithoutSellerInput = {
    where: SellerProductWhereUniqueInput
    create: XOR<SellerProductCreateWithoutSellerInput, SellerProductUncheckedCreateWithoutSellerInput>
  }

  export type SellerProductCreateManySellerInputEnvelope = {
    data: SellerProductCreateManySellerInput | SellerProductCreateManySellerInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutSellerInput = {
    update: XOR<UserUpdateWithoutSellerInput, UserUncheckedUpdateWithoutSellerInput>
    create: XOR<UserCreateWithoutSellerInput, UserUncheckedCreateWithoutSellerInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSellerInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSellerInput, UserUncheckedUpdateWithoutSellerInput>
  }

  export type UserUpdateWithoutSellerInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    enterprise?: EnterpriseUpdateOneWithoutUserNestedInput
    logistics?: LogisticsPartnerUpdateOneWithoutUserNestedInput
    addresses?: AddressUpdateManyWithoutUserNestedInput
    orders?: OrderUpdateManyWithoutUserNestedInput
    reviews?: ReviewUpdateManyWithoutUserNestedInput
    behaviors?: UserBehaviorUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSellerInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    enterprise?: EnterpriseUncheckedUpdateOneWithoutUserNestedInput
    logistics?: LogisticsPartnerUncheckedUpdateOneWithoutUserNestedInput
    addresses?: AddressUncheckedUpdateManyWithoutUserNestedInput
    orders?: OrderUncheckedUpdateManyWithoutUserNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutUserNestedInput
    behaviors?: UserBehaviorUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ProductUpsertWithWhereUniqueWithoutSellerInput = {
    where: ProductWhereUniqueInput
    update: XOR<ProductUpdateWithoutSellerInput, ProductUncheckedUpdateWithoutSellerInput>
    create: XOR<ProductCreateWithoutSellerInput, ProductUncheckedCreateWithoutSellerInput>
  }

  export type ProductUpdateWithWhereUniqueWithoutSellerInput = {
    where: ProductWhereUniqueInput
    data: XOR<ProductUpdateWithoutSellerInput, ProductUncheckedUpdateWithoutSellerInput>
  }

  export type ProductUpdateManyWithWhereWithoutSellerInput = {
    where: ProductScalarWhereInput
    data: XOR<ProductUpdateManyMutationInput, ProductUncheckedUpdateManyWithoutSellerInput>
  }

  export type ProductScalarWhereInput = {
    AND?: ProductScalarWhereInput | ProductScalarWhereInput[]
    OR?: ProductScalarWhereInput[]
    NOT?: ProductScalarWhereInput | ProductScalarWhereInput[]
    id?: StringFilter<"Product"> | string
    name?: StringFilter<"Product"> | string
    description?: StringFilter<"Product"> | string
    categoryId?: StringFilter<"Product"> | string
    sellerId?: StringNullableFilter<"Product"> | string | null
    enterpriseId?: StringNullableFilter<"Product"> | string | null
    basePrice?: FloatFilter<"Product"> | number
    stock?: IntFilter<"Product"> | number
    active?: BoolFilter<"Product"> | boolean
    createdAt?: DateTimeFilter<"Product"> | Date | string
    updatedAt?: DateTimeFilter<"Product"> | Date | string
  }

  export type SellerProductUpsertWithWhereUniqueWithoutSellerInput = {
    where: SellerProductWhereUniqueInput
    update: XOR<SellerProductUpdateWithoutSellerInput, SellerProductUncheckedUpdateWithoutSellerInput>
    create: XOR<SellerProductCreateWithoutSellerInput, SellerProductUncheckedCreateWithoutSellerInput>
  }

  export type SellerProductUpdateWithWhereUniqueWithoutSellerInput = {
    where: SellerProductWhereUniqueInput
    data: XOR<SellerProductUpdateWithoutSellerInput, SellerProductUncheckedUpdateWithoutSellerInput>
  }

  export type SellerProductUpdateManyWithWhereWithoutSellerInput = {
    where: SellerProductScalarWhereInput
    data: XOR<SellerProductUpdateManyMutationInput, SellerProductUncheckedUpdateManyWithoutSellerInput>
  }

  export type SellerProductScalarWhereInput = {
    AND?: SellerProductScalarWhereInput | SellerProductScalarWhereInput[]
    OR?: SellerProductScalarWhereInput[]
    NOT?: SellerProductScalarWhereInput | SellerProductScalarWhereInput[]
    id?: StringFilter<"SellerProduct"> | string
    sellerId?: StringFilter<"SellerProduct"> | string
    productId?: StringFilter<"SellerProduct"> | string
    price?: FloatFilter<"SellerProduct"> | number
    stock?: IntFilter<"SellerProduct"> | number
    active?: BoolFilter<"SellerProduct"> | boolean
    createdAt?: DateTimeFilter<"SellerProduct"> | Date | string
    updatedAt?: DateTimeFilter<"SellerProduct"> | Date | string
  }

  export type UserCreateWithoutEnterpriseInput = {
    id?: string
    email: string
    password: string
    name: string
    avatar?: string | null
    phone?: string | null
    role: $Enums.Role
    isVerified?: boolean
    verificationToken?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    seller?: SellerCreateNestedOneWithoutUserInput
    logistics?: LogisticsPartnerCreateNestedOneWithoutUserInput
    addresses?: AddressCreateNestedManyWithoutUserInput
    orders?: OrderCreateNestedManyWithoutUserInput
    reviews?: ReviewCreateNestedManyWithoutUserInput
    behaviors?: UserBehaviorCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutEnterpriseInput = {
    id?: string
    email: string
    password: string
    name: string
    avatar?: string | null
    phone?: string | null
    role: $Enums.Role
    isVerified?: boolean
    verificationToken?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    seller?: SellerUncheckedCreateNestedOneWithoutUserInput
    logistics?: LogisticsPartnerUncheckedCreateNestedOneWithoutUserInput
    addresses?: AddressUncheckedCreateNestedManyWithoutUserInput
    orders?: OrderUncheckedCreateNestedManyWithoutUserInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutUserInput
    behaviors?: UserBehaviorUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutEnterpriseInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutEnterpriseInput, UserUncheckedCreateWithoutEnterpriseInput>
  }

  export type ProductCreateWithoutEnterpriseInput = {
    id?: string
    name: string
    description: string
    basePrice: number
    stock: number
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    category: CategoryCreateNestedOneWithoutProductsInput
    seller?: SellerCreateNestedOneWithoutProductsInput
    variants?: ProductVariantCreateNestedManyWithoutProductInput
    reviews?: ReviewCreateNestedManyWithoutProductInput
    orderItems?: OrderItemCreateNestedManyWithoutProductInput
    behaviors?: UserBehaviorCreateNestedManyWithoutProductInput
    promotions?: PromotionProductCreateNestedManyWithoutProductInput
    sellerProducts?: SellerProductCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutEnterpriseInput = {
    id?: string
    name: string
    description: string
    categoryId: string
    sellerId?: string | null
    basePrice: number
    stock: number
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    variants?: ProductVariantUncheckedCreateNestedManyWithoutProductInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutProductInput
    orderItems?: OrderItemUncheckedCreateNestedManyWithoutProductInput
    behaviors?: UserBehaviorUncheckedCreateNestedManyWithoutProductInput
    promotions?: PromotionProductUncheckedCreateNestedManyWithoutProductInput
    sellerProducts?: SellerProductUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutEnterpriseInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutEnterpriseInput, ProductUncheckedCreateWithoutEnterpriseInput>
  }

  export type ProductCreateManyEnterpriseInputEnvelope = {
    data: ProductCreateManyEnterpriseInput | ProductCreateManyEnterpriseInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutEnterpriseInput = {
    update: XOR<UserUpdateWithoutEnterpriseInput, UserUncheckedUpdateWithoutEnterpriseInput>
    create: XOR<UserCreateWithoutEnterpriseInput, UserUncheckedCreateWithoutEnterpriseInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutEnterpriseInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutEnterpriseInput, UserUncheckedUpdateWithoutEnterpriseInput>
  }

  export type UserUpdateWithoutEnterpriseInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    seller?: SellerUpdateOneWithoutUserNestedInput
    logistics?: LogisticsPartnerUpdateOneWithoutUserNestedInput
    addresses?: AddressUpdateManyWithoutUserNestedInput
    orders?: OrderUpdateManyWithoutUserNestedInput
    reviews?: ReviewUpdateManyWithoutUserNestedInput
    behaviors?: UserBehaviorUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutEnterpriseInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    seller?: SellerUncheckedUpdateOneWithoutUserNestedInput
    logistics?: LogisticsPartnerUncheckedUpdateOneWithoutUserNestedInput
    addresses?: AddressUncheckedUpdateManyWithoutUserNestedInput
    orders?: OrderUncheckedUpdateManyWithoutUserNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutUserNestedInput
    behaviors?: UserBehaviorUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ProductUpsertWithWhereUniqueWithoutEnterpriseInput = {
    where: ProductWhereUniqueInput
    update: XOR<ProductUpdateWithoutEnterpriseInput, ProductUncheckedUpdateWithoutEnterpriseInput>
    create: XOR<ProductCreateWithoutEnterpriseInput, ProductUncheckedCreateWithoutEnterpriseInput>
  }

  export type ProductUpdateWithWhereUniqueWithoutEnterpriseInput = {
    where: ProductWhereUniqueInput
    data: XOR<ProductUpdateWithoutEnterpriseInput, ProductUncheckedUpdateWithoutEnterpriseInput>
  }

  export type ProductUpdateManyWithWhereWithoutEnterpriseInput = {
    where: ProductScalarWhereInput
    data: XOR<ProductUpdateManyMutationInput, ProductUncheckedUpdateManyWithoutEnterpriseInput>
  }

  export type CategoryCreateWithoutProductsInput = {
    id?: string
    name: string
    parent?: CategoryCreateNestedOneWithoutChildrenInput
    children?: CategoryCreateNestedManyWithoutParentInput
    promotions?: PromotionCategoryCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUncheckedCreateWithoutProductsInput = {
    id?: string
    name: string
    parentId?: string | null
    children?: CategoryUncheckedCreateNestedManyWithoutParentInput
    promotions?: PromotionCategoryUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryCreateOrConnectWithoutProductsInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutProductsInput, CategoryUncheckedCreateWithoutProductsInput>
  }

  export type SellerCreateWithoutProductsInput = {
    id?: string
    storeName: string
    verified?: boolean
    rating?: number | null
    user: UserCreateNestedOneWithoutSellerInput
    sellerProducts?: SellerProductCreateNestedManyWithoutSellerInput
  }

  export type SellerUncheckedCreateWithoutProductsInput = {
    id?: string
    userId: string
    storeName: string
    verified?: boolean
    rating?: number | null
    sellerProducts?: SellerProductUncheckedCreateNestedManyWithoutSellerInput
  }

  export type SellerCreateOrConnectWithoutProductsInput = {
    where: SellerWhereUniqueInput
    create: XOR<SellerCreateWithoutProductsInput, SellerUncheckedCreateWithoutProductsInput>
  }

  export type EnterpriseCreateWithoutProductsInput = {
    id?: string
    companyName: string
    taxCode?: string | null
    verified?: boolean
    officialBrand?: boolean
    rating?: number | null
    user: UserCreateNestedOneWithoutEnterpriseInput
  }

  export type EnterpriseUncheckedCreateWithoutProductsInput = {
    id?: string
    userId: string
    companyName: string
    taxCode?: string | null
    verified?: boolean
    officialBrand?: boolean
    rating?: number | null
  }

  export type EnterpriseCreateOrConnectWithoutProductsInput = {
    where: EnterpriseWhereUniqueInput
    create: XOR<EnterpriseCreateWithoutProductsInput, EnterpriseUncheckedCreateWithoutProductsInput>
  }

  export type ProductVariantCreateWithoutProductInput = {
    id?: string
    color?: string | null
    size?: string | null
    price: number
    stock: number
  }

  export type ProductVariantUncheckedCreateWithoutProductInput = {
    id?: string
    color?: string | null
    size?: string | null
    price: number
    stock: number
  }

  export type ProductVariantCreateOrConnectWithoutProductInput = {
    where: ProductVariantWhereUniqueInput
    create: XOR<ProductVariantCreateWithoutProductInput, ProductVariantUncheckedCreateWithoutProductInput>
  }

  export type ProductVariantCreateManyProductInputEnvelope = {
    data: ProductVariantCreateManyProductInput | ProductVariantCreateManyProductInput[]
    skipDuplicates?: boolean
  }

  export type ReviewCreateWithoutProductInput = {
    id?: string
    rating: number
    comment?: string | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutReviewsInput
  }

  export type ReviewUncheckedCreateWithoutProductInput = {
    id?: string
    userId: string
    rating: number
    comment?: string | null
    createdAt?: Date | string
  }

  export type ReviewCreateOrConnectWithoutProductInput = {
    where: ReviewWhereUniqueInput
    create: XOR<ReviewCreateWithoutProductInput, ReviewUncheckedCreateWithoutProductInput>
  }

  export type ReviewCreateManyProductInputEnvelope = {
    data: ReviewCreateManyProductInput | ReviewCreateManyProductInput[]
    skipDuplicates?: boolean
  }

  export type OrderItemCreateWithoutProductInput = {
    id?: string
    variantId?: string | null
    quantity: number
    price: number
    order: OrderCreateNestedOneWithoutOrderItemsInput
  }

  export type OrderItemUncheckedCreateWithoutProductInput = {
    id?: string
    orderId: string
    variantId?: string | null
    quantity: number
    price: number
  }

  export type OrderItemCreateOrConnectWithoutProductInput = {
    where: OrderItemWhereUniqueInput
    create: XOR<OrderItemCreateWithoutProductInput, OrderItemUncheckedCreateWithoutProductInput>
  }

  export type OrderItemCreateManyProductInputEnvelope = {
    data: OrderItemCreateManyProductInput | OrderItemCreateManyProductInput[]
    skipDuplicates?: boolean
  }

  export type UserBehaviorCreateWithoutProductInput = {
    id?: string
    type: $Enums.BehaviorType
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutBehaviorsInput
  }

  export type UserBehaviorUncheckedCreateWithoutProductInput = {
    id?: string
    userId: string
    type: $Enums.BehaviorType
    createdAt?: Date | string
  }

  export type UserBehaviorCreateOrConnectWithoutProductInput = {
    where: UserBehaviorWhereUniqueInput
    create: XOR<UserBehaviorCreateWithoutProductInput, UserBehaviorUncheckedCreateWithoutProductInput>
  }

  export type UserBehaviorCreateManyProductInputEnvelope = {
    data: UserBehaviorCreateManyProductInput | UserBehaviorCreateManyProductInput[]
    skipDuplicates?: boolean
  }

  export type PromotionProductCreateWithoutProductInput = {
    id?: string
    discountPercentage: number
    quantity?: number | null
    soldQuantity?: number | null
    promotion: PromotionCreateNestedOneWithoutProductsInput
  }

  export type PromotionProductUncheckedCreateWithoutProductInput = {
    id?: string
    promotionId: string
    discountPercentage: number
    quantity?: number | null
    soldQuantity?: number | null
  }

  export type PromotionProductCreateOrConnectWithoutProductInput = {
    where: PromotionProductWhereUniqueInput
    create: XOR<PromotionProductCreateWithoutProductInput, PromotionProductUncheckedCreateWithoutProductInput>
  }

  export type PromotionProductCreateManyProductInputEnvelope = {
    data: PromotionProductCreateManyProductInput | PromotionProductCreateManyProductInput[]
    skipDuplicates?: boolean
  }

  export type SellerProductCreateWithoutProductInput = {
    id?: string
    price: number
    stock: number
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    seller: SellerCreateNestedOneWithoutSellerProductsInput
  }

  export type SellerProductUncheckedCreateWithoutProductInput = {
    id?: string
    sellerId: string
    price: number
    stock: number
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SellerProductCreateOrConnectWithoutProductInput = {
    where: SellerProductWhereUniqueInput
    create: XOR<SellerProductCreateWithoutProductInput, SellerProductUncheckedCreateWithoutProductInput>
  }

  export type SellerProductCreateManyProductInputEnvelope = {
    data: SellerProductCreateManyProductInput | SellerProductCreateManyProductInput[]
    skipDuplicates?: boolean
  }

  export type CategoryUpsertWithoutProductsInput = {
    update: XOR<CategoryUpdateWithoutProductsInput, CategoryUncheckedUpdateWithoutProductsInput>
    create: XOR<CategoryCreateWithoutProductsInput, CategoryUncheckedCreateWithoutProductsInput>
    where?: CategoryWhereInput
  }

  export type CategoryUpdateToOneWithWhereWithoutProductsInput = {
    where?: CategoryWhereInput
    data: XOR<CategoryUpdateWithoutProductsInput, CategoryUncheckedUpdateWithoutProductsInput>
  }

  export type CategoryUpdateWithoutProductsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    parent?: CategoryUpdateOneWithoutChildrenNestedInput
    children?: CategoryUpdateManyWithoutParentNestedInput
    promotions?: PromotionCategoryUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateWithoutProductsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    children?: CategoryUncheckedUpdateManyWithoutParentNestedInput
    promotions?: PromotionCategoryUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type SellerUpsertWithoutProductsInput = {
    update: XOR<SellerUpdateWithoutProductsInput, SellerUncheckedUpdateWithoutProductsInput>
    create: XOR<SellerCreateWithoutProductsInput, SellerUncheckedCreateWithoutProductsInput>
    where?: SellerWhereInput
  }

  export type SellerUpdateToOneWithWhereWithoutProductsInput = {
    where?: SellerWhereInput
    data: XOR<SellerUpdateWithoutProductsInput, SellerUncheckedUpdateWithoutProductsInput>
  }

  export type SellerUpdateWithoutProductsInput = {
    id?: StringFieldUpdateOperationsInput | string
    storeName?: StringFieldUpdateOperationsInput | string
    verified?: BoolFieldUpdateOperationsInput | boolean
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    user?: UserUpdateOneRequiredWithoutSellerNestedInput
    sellerProducts?: SellerProductUpdateManyWithoutSellerNestedInput
  }

  export type SellerUncheckedUpdateWithoutProductsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    storeName?: StringFieldUpdateOperationsInput | string
    verified?: BoolFieldUpdateOperationsInput | boolean
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    sellerProducts?: SellerProductUncheckedUpdateManyWithoutSellerNestedInput
  }

  export type EnterpriseUpsertWithoutProductsInput = {
    update: XOR<EnterpriseUpdateWithoutProductsInput, EnterpriseUncheckedUpdateWithoutProductsInput>
    create: XOR<EnterpriseCreateWithoutProductsInput, EnterpriseUncheckedCreateWithoutProductsInput>
    where?: EnterpriseWhereInput
  }

  export type EnterpriseUpdateToOneWithWhereWithoutProductsInput = {
    where?: EnterpriseWhereInput
    data: XOR<EnterpriseUpdateWithoutProductsInput, EnterpriseUncheckedUpdateWithoutProductsInput>
  }

  export type EnterpriseUpdateWithoutProductsInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyName?: StringFieldUpdateOperationsInput | string
    taxCode?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    officialBrand?: BoolFieldUpdateOperationsInput | boolean
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    user?: UserUpdateOneRequiredWithoutEnterpriseNestedInput
  }

  export type EnterpriseUncheckedUpdateWithoutProductsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    companyName?: StringFieldUpdateOperationsInput | string
    taxCode?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    officialBrand?: BoolFieldUpdateOperationsInput | boolean
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type ProductVariantUpsertWithWhereUniqueWithoutProductInput = {
    where: ProductVariantWhereUniqueInput
    update: XOR<ProductVariantUpdateWithoutProductInput, ProductVariantUncheckedUpdateWithoutProductInput>
    create: XOR<ProductVariantCreateWithoutProductInput, ProductVariantUncheckedCreateWithoutProductInput>
  }

  export type ProductVariantUpdateWithWhereUniqueWithoutProductInput = {
    where: ProductVariantWhereUniqueInput
    data: XOR<ProductVariantUpdateWithoutProductInput, ProductVariantUncheckedUpdateWithoutProductInput>
  }

  export type ProductVariantUpdateManyWithWhereWithoutProductInput = {
    where: ProductVariantScalarWhereInput
    data: XOR<ProductVariantUpdateManyMutationInput, ProductVariantUncheckedUpdateManyWithoutProductInput>
  }

  export type ProductVariantScalarWhereInput = {
    AND?: ProductVariantScalarWhereInput | ProductVariantScalarWhereInput[]
    OR?: ProductVariantScalarWhereInput[]
    NOT?: ProductVariantScalarWhereInput | ProductVariantScalarWhereInput[]
    id?: StringFilter<"ProductVariant"> | string
    productId?: StringFilter<"ProductVariant"> | string
    color?: StringNullableFilter<"ProductVariant"> | string | null
    size?: StringNullableFilter<"ProductVariant"> | string | null
    price?: FloatFilter<"ProductVariant"> | number
    stock?: IntFilter<"ProductVariant"> | number
  }

  export type ReviewUpsertWithWhereUniqueWithoutProductInput = {
    where: ReviewWhereUniqueInput
    update: XOR<ReviewUpdateWithoutProductInput, ReviewUncheckedUpdateWithoutProductInput>
    create: XOR<ReviewCreateWithoutProductInput, ReviewUncheckedCreateWithoutProductInput>
  }

  export type ReviewUpdateWithWhereUniqueWithoutProductInput = {
    where: ReviewWhereUniqueInput
    data: XOR<ReviewUpdateWithoutProductInput, ReviewUncheckedUpdateWithoutProductInput>
  }

  export type ReviewUpdateManyWithWhereWithoutProductInput = {
    where: ReviewScalarWhereInput
    data: XOR<ReviewUpdateManyMutationInput, ReviewUncheckedUpdateManyWithoutProductInput>
  }

  export type OrderItemUpsertWithWhereUniqueWithoutProductInput = {
    where: OrderItemWhereUniqueInput
    update: XOR<OrderItemUpdateWithoutProductInput, OrderItemUncheckedUpdateWithoutProductInput>
    create: XOR<OrderItemCreateWithoutProductInput, OrderItemUncheckedCreateWithoutProductInput>
  }

  export type OrderItemUpdateWithWhereUniqueWithoutProductInput = {
    where: OrderItemWhereUniqueInput
    data: XOR<OrderItemUpdateWithoutProductInput, OrderItemUncheckedUpdateWithoutProductInput>
  }

  export type OrderItemUpdateManyWithWhereWithoutProductInput = {
    where: OrderItemScalarWhereInput
    data: XOR<OrderItemUpdateManyMutationInput, OrderItemUncheckedUpdateManyWithoutProductInput>
  }

  export type OrderItemScalarWhereInput = {
    AND?: OrderItemScalarWhereInput | OrderItemScalarWhereInput[]
    OR?: OrderItemScalarWhereInput[]
    NOT?: OrderItemScalarWhereInput | OrderItemScalarWhereInput[]
    id?: StringFilter<"OrderItem"> | string
    orderId?: StringFilter<"OrderItem"> | string
    productId?: StringFilter<"OrderItem"> | string
    variantId?: StringNullableFilter<"OrderItem"> | string | null
    quantity?: IntFilter<"OrderItem"> | number
    price?: FloatFilter<"OrderItem"> | number
  }

  export type UserBehaviorUpsertWithWhereUniqueWithoutProductInput = {
    where: UserBehaviorWhereUniqueInput
    update: XOR<UserBehaviorUpdateWithoutProductInput, UserBehaviorUncheckedUpdateWithoutProductInput>
    create: XOR<UserBehaviorCreateWithoutProductInput, UserBehaviorUncheckedCreateWithoutProductInput>
  }

  export type UserBehaviorUpdateWithWhereUniqueWithoutProductInput = {
    where: UserBehaviorWhereUniqueInput
    data: XOR<UserBehaviorUpdateWithoutProductInput, UserBehaviorUncheckedUpdateWithoutProductInput>
  }

  export type UserBehaviorUpdateManyWithWhereWithoutProductInput = {
    where: UserBehaviorScalarWhereInput
    data: XOR<UserBehaviorUpdateManyMutationInput, UserBehaviorUncheckedUpdateManyWithoutProductInput>
  }

  export type PromotionProductUpsertWithWhereUniqueWithoutProductInput = {
    where: PromotionProductWhereUniqueInput
    update: XOR<PromotionProductUpdateWithoutProductInput, PromotionProductUncheckedUpdateWithoutProductInput>
    create: XOR<PromotionProductCreateWithoutProductInput, PromotionProductUncheckedCreateWithoutProductInput>
  }

  export type PromotionProductUpdateWithWhereUniqueWithoutProductInput = {
    where: PromotionProductWhereUniqueInput
    data: XOR<PromotionProductUpdateWithoutProductInput, PromotionProductUncheckedUpdateWithoutProductInput>
  }

  export type PromotionProductUpdateManyWithWhereWithoutProductInput = {
    where: PromotionProductScalarWhereInput
    data: XOR<PromotionProductUpdateManyMutationInput, PromotionProductUncheckedUpdateManyWithoutProductInput>
  }

  export type PromotionProductScalarWhereInput = {
    AND?: PromotionProductScalarWhereInput | PromotionProductScalarWhereInput[]
    OR?: PromotionProductScalarWhereInput[]
    NOT?: PromotionProductScalarWhereInput | PromotionProductScalarWhereInput[]
    id?: StringFilter<"PromotionProduct"> | string
    promotionId?: StringFilter<"PromotionProduct"> | string
    productId?: StringFilter<"PromotionProduct"> | string
    discountPercentage?: FloatFilter<"PromotionProduct"> | number
    quantity?: IntNullableFilter<"PromotionProduct"> | number | null
    soldQuantity?: IntNullableFilter<"PromotionProduct"> | number | null
  }

  export type SellerProductUpsertWithWhereUniqueWithoutProductInput = {
    where: SellerProductWhereUniqueInput
    update: XOR<SellerProductUpdateWithoutProductInput, SellerProductUncheckedUpdateWithoutProductInput>
    create: XOR<SellerProductCreateWithoutProductInput, SellerProductUncheckedCreateWithoutProductInput>
  }

  export type SellerProductUpdateWithWhereUniqueWithoutProductInput = {
    where: SellerProductWhereUniqueInput
    data: XOR<SellerProductUpdateWithoutProductInput, SellerProductUncheckedUpdateWithoutProductInput>
  }

  export type SellerProductUpdateManyWithWhereWithoutProductInput = {
    where: SellerProductScalarWhereInput
    data: XOR<SellerProductUpdateManyMutationInput, SellerProductUncheckedUpdateManyWithoutProductInput>
  }

  export type ProductCreateWithoutVariantsInput = {
    id?: string
    name: string
    description: string
    basePrice: number
    stock: number
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    category: CategoryCreateNestedOneWithoutProductsInput
    seller?: SellerCreateNestedOneWithoutProductsInput
    enterprise?: EnterpriseCreateNestedOneWithoutProductsInput
    reviews?: ReviewCreateNestedManyWithoutProductInput
    orderItems?: OrderItemCreateNestedManyWithoutProductInput
    behaviors?: UserBehaviorCreateNestedManyWithoutProductInput
    promotions?: PromotionProductCreateNestedManyWithoutProductInput
    sellerProducts?: SellerProductCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutVariantsInput = {
    id?: string
    name: string
    description: string
    categoryId: string
    sellerId?: string | null
    enterpriseId?: string | null
    basePrice: number
    stock: number
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    reviews?: ReviewUncheckedCreateNestedManyWithoutProductInput
    orderItems?: OrderItemUncheckedCreateNestedManyWithoutProductInput
    behaviors?: UserBehaviorUncheckedCreateNestedManyWithoutProductInput
    promotions?: PromotionProductUncheckedCreateNestedManyWithoutProductInput
    sellerProducts?: SellerProductUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutVariantsInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutVariantsInput, ProductUncheckedCreateWithoutVariantsInput>
  }

  export type ProductUpsertWithoutVariantsInput = {
    update: XOR<ProductUpdateWithoutVariantsInput, ProductUncheckedUpdateWithoutVariantsInput>
    create: XOR<ProductCreateWithoutVariantsInput, ProductUncheckedCreateWithoutVariantsInput>
    where?: ProductWhereInput
  }

  export type ProductUpdateToOneWithWhereWithoutVariantsInput = {
    where?: ProductWhereInput
    data: XOR<ProductUpdateWithoutVariantsInput, ProductUncheckedUpdateWithoutVariantsInput>
  }

  export type ProductUpdateWithoutVariantsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    basePrice?: FloatFieldUpdateOperationsInput | number
    stock?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: CategoryUpdateOneRequiredWithoutProductsNestedInput
    seller?: SellerUpdateOneWithoutProductsNestedInput
    enterprise?: EnterpriseUpdateOneWithoutProductsNestedInput
    reviews?: ReviewUpdateManyWithoutProductNestedInput
    orderItems?: OrderItemUpdateManyWithoutProductNestedInput
    behaviors?: UserBehaviorUpdateManyWithoutProductNestedInput
    promotions?: PromotionProductUpdateManyWithoutProductNestedInput
    sellerProducts?: SellerProductUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutVariantsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    sellerId?: NullableStringFieldUpdateOperationsInput | string | null
    enterpriseId?: NullableStringFieldUpdateOperationsInput | string | null
    basePrice?: FloatFieldUpdateOperationsInput | number
    stock?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviews?: ReviewUncheckedUpdateManyWithoutProductNestedInput
    orderItems?: OrderItemUncheckedUpdateManyWithoutProductNestedInput
    behaviors?: UserBehaviorUncheckedUpdateManyWithoutProductNestedInput
    promotions?: PromotionProductUncheckedUpdateManyWithoutProductNestedInput
    sellerProducts?: SellerProductUncheckedUpdateManyWithoutProductNestedInput
  }

  export type CategoryCreateWithoutChildrenInput = {
    id?: string
    name: string
    parent?: CategoryCreateNestedOneWithoutChildrenInput
    products?: ProductCreateNestedManyWithoutCategoryInput
    promotions?: PromotionCategoryCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUncheckedCreateWithoutChildrenInput = {
    id?: string
    name: string
    parentId?: string | null
    products?: ProductUncheckedCreateNestedManyWithoutCategoryInput
    promotions?: PromotionCategoryUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryCreateOrConnectWithoutChildrenInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutChildrenInput, CategoryUncheckedCreateWithoutChildrenInput>
  }

  export type CategoryCreateWithoutParentInput = {
    id?: string
    name: string
    children?: CategoryCreateNestedManyWithoutParentInput
    products?: ProductCreateNestedManyWithoutCategoryInput
    promotions?: PromotionCategoryCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUncheckedCreateWithoutParentInput = {
    id?: string
    name: string
    children?: CategoryUncheckedCreateNestedManyWithoutParentInput
    products?: ProductUncheckedCreateNestedManyWithoutCategoryInput
    promotions?: PromotionCategoryUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryCreateOrConnectWithoutParentInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutParentInput, CategoryUncheckedCreateWithoutParentInput>
  }

  export type CategoryCreateManyParentInputEnvelope = {
    data: CategoryCreateManyParentInput | CategoryCreateManyParentInput[]
    skipDuplicates?: boolean
  }

  export type ProductCreateWithoutCategoryInput = {
    id?: string
    name: string
    description: string
    basePrice: number
    stock: number
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    seller?: SellerCreateNestedOneWithoutProductsInput
    enterprise?: EnterpriseCreateNestedOneWithoutProductsInput
    variants?: ProductVariantCreateNestedManyWithoutProductInput
    reviews?: ReviewCreateNestedManyWithoutProductInput
    orderItems?: OrderItemCreateNestedManyWithoutProductInput
    behaviors?: UserBehaviorCreateNestedManyWithoutProductInput
    promotions?: PromotionProductCreateNestedManyWithoutProductInput
    sellerProducts?: SellerProductCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutCategoryInput = {
    id?: string
    name: string
    description: string
    sellerId?: string | null
    enterpriseId?: string | null
    basePrice: number
    stock: number
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    variants?: ProductVariantUncheckedCreateNestedManyWithoutProductInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutProductInput
    orderItems?: OrderItemUncheckedCreateNestedManyWithoutProductInput
    behaviors?: UserBehaviorUncheckedCreateNestedManyWithoutProductInput
    promotions?: PromotionProductUncheckedCreateNestedManyWithoutProductInput
    sellerProducts?: SellerProductUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutCategoryInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutCategoryInput, ProductUncheckedCreateWithoutCategoryInput>
  }

  export type ProductCreateManyCategoryInputEnvelope = {
    data: ProductCreateManyCategoryInput | ProductCreateManyCategoryInput[]
    skipDuplicates?: boolean
  }

  export type PromotionCategoryCreateWithoutCategoryInput = {
    id?: string
    promotion: PromotionCreateNestedOneWithoutCategoriesInput
  }

  export type PromotionCategoryUncheckedCreateWithoutCategoryInput = {
    id?: string
    promotionId: string
  }

  export type PromotionCategoryCreateOrConnectWithoutCategoryInput = {
    where: PromotionCategoryWhereUniqueInput
    create: XOR<PromotionCategoryCreateWithoutCategoryInput, PromotionCategoryUncheckedCreateWithoutCategoryInput>
  }

  export type PromotionCategoryCreateManyCategoryInputEnvelope = {
    data: PromotionCategoryCreateManyCategoryInput | PromotionCategoryCreateManyCategoryInput[]
    skipDuplicates?: boolean
  }

  export type CategoryUpsertWithoutChildrenInput = {
    update: XOR<CategoryUpdateWithoutChildrenInput, CategoryUncheckedUpdateWithoutChildrenInput>
    create: XOR<CategoryCreateWithoutChildrenInput, CategoryUncheckedCreateWithoutChildrenInput>
    where?: CategoryWhereInput
  }

  export type CategoryUpdateToOneWithWhereWithoutChildrenInput = {
    where?: CategoryWhereInput
    data: XOR<CategoryUpdateWithoutChildrenInput, CategoryUncheckedUpdateWithoutChildrenInput>
  }

  export type CategoryUpdateWithoutChildrenInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    parent?: CategoryUpdateOneWithoutChildrenNestedInput
    products?: ProductUpdateManyWithoutCategoryNestedInput
    promotions?: PromotionCategoryUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateWithoutChildrenInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    products?: ProductUncheckedUpdateManyWithoutCategoryNestedInput
    promotions?: PromotionCategoryUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUpsertWithWhereUniqueWithoutParentInput = {
    where: CategoryWhereUniqueInput
    update: XOR<CategoryUpdateWithoutParentInput, CategoryUncheckedUpdateWithoutParentInput>
    create: XOR<CategoryCreateWithoutParentInput, CategoryUncheckedCreateWithoutParentInput>
  }

  export type CategoryUpdateWithWhereUniqueWithoutParentInput = {
    where: CategoryWhereUniqueInput
    data: XOR<CategoryUpdateWithoutParentInput, CategoryUncheckedUpdateWithoutParentInput>
  }

  export type CategoryUpdateManyWithWhereWithoutParentInput = {
    where: CategoryScalarWhereInput
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyWithoutParentInput>
  }

  export type CategoryScalarWhereInput = {
    AND?: CategoryScalarWhereInput | CategoryScalarWhereInput[]
    OR?: CategoryScalarWhereInput[]
    NOT?: CategoryScalarWhereInput | CategoryScalarWhereInput[]
    id?: StringFilter<"Category"> | string
    name?: StringFilter<"Category"> | string
    parentId?: StringNullableFilter<"Category"> | string | null
  }

  export type ProductUpsertWithWhereUniqueWithoutCategoryInput = {
    where: ProductWhereUniqueInput
    update: XOR<ProductUpdateWithoutCategoryInput, ProductUncheckedUpdateWithoutCategoryInput>
    create: XOR<ProductCreateWithoutCategoryInput, ProductUncheckedCreateWithoutCategoryInput>
  }

  export type ProductUpdateWithWhereUniqueWithoutCategoryInput = {
    where: ProductWhereUniqueInput
    data: XOR<ProductUpdateWithoutCategoryInput, ProductUncheckedUpdateWithoutCategoryInput>
  }

  export type ProductUpdateManyWithWhereWithoutCategoryInput = {
    where: ProductScalarWhereInput
    data: XOR<ProductUpdateManyMutationInput, ProductUncheckedUpdateManyWithoutCategoryInput>
  }

  export type PromotionCategoryUpsertWithWhereUniqueWithoutCategoryInput = {
    where: PromotionCategoryWhereUniqueInput
    update: XOR<PromotionCategoryUpdateWithoutCategoryInput, PromotionCategoryUncheckedUpdateWithoutCategoryInput>
    create: XOR<PromotionCategoryCreateWithoutCategoryInput, PromotionCategoryUncheckedCreateWithoutCategoryInput>
  }

  export type PromotionCategoryUpdateWithWhereUniqueWithoutCategoryInput = {
    where: PromotionCategoryWhereUniqueInput
    data: XOR<PromotionCategoryUpdateWithoutCategoryInput, PromotionCategoryUncheckedUpdateWithoutCategoryInput>
  }

  export type PromotionCategoryUpdateManyWithWhereWithoutCategoryInput = {
    where: PromotionCategoryScalarWhereInput
    data: XOR<PromotionCategoryUpdateManyMutationInput, PromotionCategoryUncheckedUpdateManyWithoutCategoryInput>
  }

  export type PromotionCategoryScalarWhereInput = {
    AND?: PromotionCategoryScalarWhereInput | PromotionCategoryScalarWhereInput[]
    OR?: PromotionCategoryScalarWhereInput[]
    NOT?: PromotionCategoryScalarWhereInput | PromotionCategoryScalarWhereInput[]
    id?: StringFilter<"PromotionCategory"> | string
    promotionId?: StringFilter<"PromotionCategory"> | string
    categoryId?: StringFilter<"PromotionCategory"> | string
  }

  export type SellerCreateWithoutSellerProductsInput = {
    id?: string
    storeName: string
    verified?: boolean
    rating?: number | null
    user: UserCreateNestedOneWithoutSellerInput
    products?: ProductCreateNestedManyWithoutSellerInput
  }

  export type SellerUncheckedCreateWithoutSellerProductsInput = {
    id?: string
    userId: string
    storeName: string
    verified?: boolean
    rating?: number | null
    products?: ProductUncheckedCreateNestedManyWithoutSellerInput
  }

  export type SellerCreateOrConnectWithoutSellerProductsInput = {
    where: SellerWhereUniqueInput
    create: XOR<SellerCreateWithoutSellerProductsInput, SellerUncheckedCreateWithoutSellerProductsInput>
  }

  export type ProductCreateWithoutSellerProductsInput = {
    id?: string
    name: string
    description: string
    basePrice: number
    stock: number
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    category: CategoryCreateNestedOneWithoutProductsInput
    seller?: SellerCreateNestedOneWithoutProductsInput
    enterprise?: EnterpriseCreateNestedOneWithoutProductsInput
    variants?: ProductVariantCreateNestedManyWithoutProductInput
    reviews?: ReviewCreateNestedManyWithoutProductInput
    orderItems?: OrderItemCreateNestedManyWithoutProductInput
    behaviors?: UserBehaviorCreateNestedManyWithoutProductInput
    promotions?: PromotionProductCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutSellerProductsInput = {
    id?: string
    name: string
    description: string
    categoryId: string
    sellerId?: string | null
    enterpriseId?: string | null
    basePrice: number
    stock: number
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    variants?: ProductVariantUncheckedCreateNestedManyWithoutProductInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutProductInput
    orderItems?: OrderItemUncheckedCreateNestedManyWithoutProductInput
    behaviors?: UserBehaviorUncheckedCreateNestedManyWithoutProductInput
    promotions?: PromotionProductUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutSellerProductsInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutSellerProductsInput, ProductUncheckedCreateWithoutSellerProductsInput>
  }

  export type SellerUpsertWithoutSellerProductsInput = {
    update: XOR<SellerUpdateWithoutSellerProductsInput, SellerUncheckedUpdateWithoutSellerProductsInput>
    create: XOR<SellerCreateWithoutSellerProductsInput, SellerUncheckedCreateWithoutSellerProductsInput>
    where?: SellerWhereInput
  }

  export type SellerUpdateToOneWithWhereWithoutSellerProductsInput = {
    where?: SellerWhereInput
    data: XOR<SellerUpdateWithoutSellerProductsInput, SellerUncheckedUpdateWithoutSellerProductsInput>
  }

  export type SellerUpdateWithoutSellerProductsInput = {
    id?: StringFieldUpdateOperationsInput | string
    storeName?: StringFieldUpdateOperationsInput | string
    verified?: BoolFieldUpdateOperationsInput | boolean
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    user?: UserUpdateOneRequiredWithoutSellerNestedInput
    products?: ProductUpdateManyWithoutSellerNestedInput
  }

  export type SellerUncheckedUpdateWithoutSellerProductsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    storeName?: StringFieldUpdateOperationsInput | string
    verified?: BoolFieldUpdateOperationsInput | boolean
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    products?: ProductUncheckedUpdateManyWithoutSellerNestedInput
  }

  export type ProductUpsertWithoutSellerProductsInput = {
    update: XOR<ProductUpdateWithoutSellerProductsInput, ProductUncheckedUpdateWithoutSellerProductsInput>
    create: XOR<ProductCreateWithoutSellerProductsInput, ProductUncheckedCreateWithoutSellerProductsInput>
    where?: ProductWhereInput
  }

  export type ProductUpdateToOneWithWhereWithoutSellerProductsInput = {
    where?: ProductWhereInput
    data: XOR<ProductUpdateWithoutSellerProductsInput, ProductUncheckedUpdateWithoutSellerProductsInput>
  }

  export type ProductUpdateWithoutSellerProductsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    basePrice?: FloatFieldUpdateOperationsInput | number
    stock?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: CategoryUpdateOneRequiredWithoutProductsNestedInput
    seller?: SellerUpdateOneWithoutProductsNestedInput
    enterprise?: EnterpriseUpdateOneWithoutProductsNestedInput
    variants?: ProductVariantUpdateManyWithoutProductNestedInput
    reviews?: ReviewUpdateManyWithoutProductNestedInput
    orderItems?: OrderItemUpdateManyWithoutProductNestedInput
    behaviors?: UserBehaviorUpdateManyWithoutProductNestedInput
    promotions?: PromotionProductUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutSellerProductsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    sellerId?: NullableStringFieldUpdateOperationsInput | string | null
    enterpriseId?: NullableStringFieldUpdateOperationsInput | string | null
    basePrice?: FloatFieldUpdateOperationsInput | number
    stock?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    variants?: ProductVariantUncheckedUpdateManyWithoutProductNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutProductNestedInput
    orderItems?: OrderItemUncheckedUpdateManyWithoutProductNestedInput
    behaviors?: UserBehaviorUncheckedUpdateManyWithoutProductNestedInput
    promotions?: PromotionProductUncheckedUpdateManyWithoutProductNestedInput
  }

  export type ProductCreateWithoutReviewsInput = {
    id?: string
    name: string
    description: string
    basePrice: number
    stock: number
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    category: CategoryCreateNestedOneWithoutProductsInput
    seller?: SellerCreateNestedOneWithoutProductsInput
    enterprise?: EnterpriseCreateNestedOneWithoutProductsInput
    variants?: ProductVariantCreateNestedManyWithoutProductInput
    orderItems?: OrderItemCreateNestedManyWithoutProductInput
    behaviors?: UserBehaviorCreateNestedManyWithoutProductInput
    promotions?: PromotionProductCreateNestedManyWithoutProductInput
    sellerProducts?: SellerProductCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutReviewsInput = {
    id?: string
    name: string
    description: string
    categoryId: string
    sellerId?: string | null
    enterpriseId?: string | null
    basePrice: number
    stock: number
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    variants?: ProductVariantUncheckedCreateNestedManyWithoutProductInput
    orderItems?: OrderItemUncheckedCreateNestedManyWithoutProductInput
    behaviors?: UserBehaviorUncheckedCreateNestedManyWithoutProductInput
    promotions?: PromotionProductUncheckedCreateNestedManyWithoutProductInput
    sellerProducts?: SellerProductUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutReviewsInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutReviewsInput, ProductUncheckedCreateWithoutReviewsInput>
  }

  export type UserCreateWithoutReviewsInput = {
    id?: string
    email: string
    password: string
    name: string
    avatar?: string | null
    phone?: string | null
    role: $Enums.Role
    isVerified?: boolean
    verificationToken?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    seller?: SellerCreateNestedOneWithoutUserInput
    enterprise?: EnterpriseCreateNestedOneWithoutUserInput
    logistics?: LogisticsPartnerCreateNestedOneWithoutUserInput
    addresses?: AddressCreateNestedManyWithoutUserInput
    orders?: OrderCreateNestedManyWithoutUserInput
    behaviors?: UserBehaviorCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutReviewsInput = {
    id?: string
    email: string
    password: string
    name: string
    avatar?: string | null
    phone?: string | null
    role: $Enums.Role
    isVerified?: boolean
    verificationToken?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    seller?: SellerUncheckedCreateNestedOneWithoutUserInput
    enterprise?: EnterpriseUncheckedCreateNestedOneWithoutUserInput
    logistics?: LogisticsPartnerUncheckedCreateNestedOneWithoutUserInput
    addresses?: AddressUncheckedCreateNestedManyWithoutUserInput
    orders?: OrderUncheckedCreateNestedManyWithoutUserInput
    behaviors?: UserBehaviorUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutReviewsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReviewsInput, UserUncheckedCreateWithoutReviewsInput>
  }

  export type ProductUpsertWithoutReviewsInput = {
    update: XOR<ProductUpdateWithoutReviewsInput, ProductUncheckedUpdateWithoutReviewsInput>
    create: XOR<ProductCreateWithoutReviewsInput, ProductUncheckedCreateWithoutReviewsInput>
    where?: ProductWhereInput
  }

  export type ProductUpdateToOneWithWhereWithoutReviewsInput = {
    where?: ProductWhereInput
    data: XOR<ProductUpdateWithoutReviewsInput, ProductUncheckedUpdateWithoutReviewsInput>
  }

  export type ProductUpdateWithoutReviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    basePrice?: FloatFieldUpdateOperationsInput | number
    stock?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: CategoryUpdateOneRequiredWithoutProductsNestedInput
    seller?: SellerUpdateOneWithoutProductsNestedInput
    enterprise?: EnterpriseUpdateOneWithoutProductsNestedInput
    variants?: ProductVariantUpdateManyWithoutProductNestedInput
    orderItems?: OrderItemUpdateManyWithoutProductNestedInput
    behaviors?: UserBehaviorUpdateManyWithoutProductNestedInput
    promotions?: PromotionProductUpdateManyWithoutProductNestedInput
    sellerProducts?: SellerProductUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutReviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    sellerId?: NullableStringFieldUpdateOperationsInput | string | null
    enterpriseId?: NullableStringFieldUpdateOperationsInput | string | null
    basePrice?: FloatFieldUpdateOperationsInput | number
    stock?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    variants?: ProductVariantUncheckedUpdateManyWithoutProductNestedInput
    orderItems?: OrderItemUncheckedUpdateManyWithoutProductNestedInput
    behaviors?: UserBehaviorUncheckedUpdateManyWithoutProductNestedInput
    promotions?: PromotionProductUncheckedUpdateManyWithoutProductNestedInput
    sellerProducts?: SellerProductUncheckedUpdateManyWithoutProductNestedInput
  }

  export type UserUpsertWithoutReviewsInput = {
    update: XOR<UserUpdateWithoutReviewsInput, UserUncheckedUpdateWithoutReviewsInput>
    create: XOR<UserCreateWithoutReviewsInput, UserUncheckedCreateWithoutReviewsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutReviewsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutReviewsInput, UserUncheckedUpdateWithoutReviewsInput>
  }

  export type UserUpdateWithoutReviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    seller?: SellerUpdateOneWithoutUserNestedInput
    enterprise?: EnterpriseUpdateOneWithoutUserNestedInput
    logistics?: LogisticsPartnerUpdateOneWithoutUserNestedInput
    addresses?: AddressUpdateManyWithoutUserNestedInput
    orders?: OrderUpdateManyWithoutUserNestedInput
    behaviors?: UserBehaviorUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutReviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    seller?: SellerUncheckedUpdateOneWithoutUserNestedInput
    enterprise?: EnterpriseUncheckedUpdateOneWithoutUserNestedInput
    logistics?: LogisticsPartnerUncheckedUpdateOneWithoutUserNestedInput
    addresses?: AddressUncheckedUpdateManyWithoutUserNestedInput
    orders?: OrderUncheckedUpdateManyWithoutUserNestedInput
    behaviors?: UserBehaviorUncheckedUpdateManyWithoutUserNestedInput
  }

  export type OrderCreateWithoutVoucherInput = {
    id?: string
    totalAmount: number
    status?: $Enums.OrderStatus
    paymentId?: string | null
    shippingId?: string | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutOrdersInput
    payment?: PaymentCreateNestedOneWithoutOrderInput
    orderItems?: OrderItemCreateNestedManyWithoutOrderInput
    logisticsOrders?: LogisticsOrderCreateNestedManyWithoutOrderInput
  }

  export type OrderUncheckedCreateWithoutVoucherInput = {
    id?: string
    userId: string
    totalAmount: number
    status?: $Enums.OrderStatus
    paymentId?: string | null
    shippingId?: string | null
    createdAt?: Date | string
    payment?: PaymentUncheckedCreateNestedOneWithoutOrderInput
    orderItems?: OrderItemUncheckedCreateNestedManyWithoutOrderInput
    logisticsOrders?: LogisticsOrderUncheckedCreateNestedManyWithoutOrderInput
  }

  export type OrderCreateOrConnectWithoutVoucherInput = {
    where: OrderWhereUniqueInput
    create: XOR<OrderCreateWithoutVoucherInput, OrderUncheckedCreateWithoutVoucherInput>
  }

  export type OrderCreateManyVoucherInputEnvelope = {
    data: OrderCreateManyVoucherInput | OrderCreateManyVoucherInput[]
    skipDuplicates?: boolean
  }

  export type OrderUpsertWithWhereUniqueWithoutVoucherInput = {
    where: OrderWhereUniqueInput
    update: XOR<OrderUpdateWithoutVoucherInput, OrderUncheckedUpdateWithoutVoucherInput>
    create: XOR<OrderCreateWithoutVoucherInput, OrderUncheckedCreateWithoutVoucherInput>
  }

  export type OrderUpdateWithWhereUniqueWithoutVoucherInput = {
    where: OrderWhereUniqueInput
    data: XOR<OrderUpdateWithoutVoucherInput, OrderUncheckedUpdateWithoutVoucherInput>
  }

  export type OrderUpdateManyWithWhereWithoutVoucherInput = {
    where: OrderScalarWhereInput
    data: XOR<OrderUpdateManyMutationInput, OrderUncheckedUpdateManyWithoutVoucherInput>
  }

  export type UserCreateWithoutOrdersInput = {
    id?: string
    email: string
    password: string
    name: string
    avatar?: string | null
    phone?: string | null
    role: $Enums.Role
    isVerified?: boolean
    verificationToken?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    seller?: SellerCreateNestedOneWithoutUserInput
    enterprise?: EnterpriseCreateNestedOneWithoutUserInput
    logistics?: LogisticsPartnerCreateNestedOneWithoutUserInput
    addresses?: AddressCreateNestedManyWithoutUserInput
    reviews?: ReviewCreateNestedManyWithoutUserInput
    behaviors?: UserBehaviorCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutOrdersInput = {
    id?: string
    email: string
    password: string
    name: string
    avatar?: string | null
    phone?: string | null
    role: $Enums.Role
    isVerified?: boolean
    verificationToken?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    seller?: SellerUncheckedCreateNestedOneWithoutUserInput
    enterprise?: EnterpriseUncheckedCreateNestedOneWithoutUserInput
    logistics?: LogisticsPartnerUncheckedCreateNestedOneWithoutUserInput
    addresses?: AddressUncheckedCreateNestedManyWithoutUserInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutUserInput
    behaviors?: UserBehaviorUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutOrdersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutOrdersInput, UserUncheckedCreateWithoutOrdersInput>
  }

  export type VoucherCreateWithoutOrdersInput = {
    id?: string
    code: string
    discountType: $Enums.DiscountType
    discountValue: number
    minOrderValue?: number | null
    startDate: Date | string
    endDate: Date | string
    usageLimit?: number | null
    usedCount?: number
  }

  export type VoucherUncheckedCreateWithoutOrdersInput = {
    id?: string
    code: string
    discountType: $Enums.DiscountType
    discountValue: number
    minOrderValue?: number | null
    startDate: Date | string
    endDate: Date | string
    usageLimit?: number | null
    usedCount?: number
  }

  export type VoucherCreateOrConnectWithoutOrdersInput = {
    where: VoucherWhereUniqueInput
    create: XOR<VoucherCreateWithoutOrdersInput, VoucherUncheckedCreateWithoutOrdersInput>
  }

  export type PaymentCreateWithoutOrderInput = {
    id?: string
    method: $Enums.PaymentMethod
    status?: $Enums.PaymentStatus
    transactionId?: string | null
    createdAt?: Date | string
  }

  export type PaymentUncheckedCreateWithoutOrderInput = {
    id?: string
    method: $Enums.PaymentMethod
    status?: $Enums.PaymentStatus
    transactionId?: string | null
    createdAt?: Date | string
  }

  export type PaymentCreateOrConnectWithoutOrderInput = {
    where: PaymentWhereUniqueInput
    create: XOR<PaymentCreateWithoutOrderInput, PaymentUncheckedCreateWithoutOrderInput>
  }

  export type OrderItemCreateWithoutOrderInput = {
    id?: string
    variantId?: string | null
    quantity: number
    price: number
    product: ProductCreateNestedOneWithoutOrderItemsInput
  }

  export type OrderItemUncheckedCreateWithoutOrderInput = {
    id?: string
    productId: string
    variantId?: string | null
    quantity: number
    price: number
  }

  export type OrderItemCreateOrConnectWithoutOrderInput = {
    where: OrderItemWhereUniqueInput
    create: XOR<OrderItemCreateWithoutOrderInput, OrderItemUncheckedCreateWithoutOrderInput>
  }

  export type OrderItemCreateManyOrderInputEnvelope = {
    data: OrderItemCreateManyOrderInput | OrderItemCreateManyOrderInput[]
    skipDuplicates?: boolean
  }

  export type LogisticsOrderCreateWithoutOrderInput = {
    id?: string
    trackingCode: string
    status?: $Enums.LogisticsStatus
    pickupAddress: string
    deliveryAddress: string
    pickupLocation?: NullableJsonNullValueInput | InputJsonValue
    deliveryLocation?: NullableJsonNullValueInput | InputJsonValue
    distance?: number | null
    estimatedTime?: number | null
    estimatedDelivery?: Date | string | null
    pickupTime?: Date | string | null
    deliveredTime?: Date | string | null
    notes?: string | null
    deliveryAttempts?: number
    customerSignature?: string | null
    proofOfDelivery?: LogisticsOrderCreateproofOfDeliveryInput | string[]
    updatedAt?: Date | string
    cancelReason?: string | null
    rating?: number | null
    feedback?: string | null
    logisticsPartner: LogisticsPartnerCreateNestedOneWithoutOrdersInput
    shipper?: ShipperCreateNestedOneWithoutAssignedOrdersInput
  }

  export type LogisticsOrderUncheckedCreateWithoutOrderInput = {
    id?: string
    logisticsPartnerId: string
    shipperId?: string | null
    trackingCode: string
    status?: $Enums.LogisticsStatus
    pickupAddress: string
    deliveryAddress: string
    pickupLocation?: NullableJsonNullValueInput | InputJsonValue
    deliveryLocation?: NullableJsonNullValueInput | InputJsonValue
    distance?: number | null
    estimatedTime?: number | null
    estimatedDelivery?: Date | string | null
    pickupTime?: Date | string | null
    deliveredTime?: Date | string | null
    notes?: string | null
    deliveryAttempts?: number
    customerSignature?: string | null
    proofOfDelivery?: LogisticsOrderCreateproofOfDeliveryInput | string[]
    updatedAt?: Date | string
    cancelReason?: string | null
    rating?: number | null
    feedback?: string | null
  }

  export type LogisticsOrderCreateOrConnectWithoutOrderInput = {
    where: LogisticsOrderWhereUniqueInput
    create: XOR<LogisticsOrderCreateWithoutOrderInput, LogisticsOrderUncheckedCreateWithoutOrderInput>
  }

  export type LogisticsOrderCreateManyOrderInputEnvelope = {
    data: LogisticsOrderCreateManyOrderInput | LogisticsOrderCreateManyOrderInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutOrdersInput = {
    update: XOR<UserUpdateWithoutOrdersInput, UserUncheckedUpdateWithoutOrdersInput>
    create: XOR<UserCreateWithoutOrdersInput, UserUncheckedCreateWithoutOrdersInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutOrdersInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutOrdersInput, UserUncheckedUpdateWithoutOrdersInput>
  }

  export type UserUpdateWithoutOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    seller?: SellerUpdateOneWithoutUserNestedInput
    enterprise?: EnterpriseUpdateOneWithoutUserNestedInput
    logistics?: LogisticsPartnerUpdateOneWithoutUserNestedInput
    addresses?: AddressUpdateManyWithoutUserNestedInput
    reviews?: ReviewUpdateManyWithoutUserNestedInput
    behaviors?: UserBehaviorUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    seller?: SellerUncheckedUpdateOneWithoutUserNestedInput
    enterprise?: EnterpriseUncheckedUpdateOneWithoutUserNestedInput
    logistics?: LogisticsPartnerUncheckedUpdateOneWithoutUserNestedInput
    addresses?: AddressUncheckedUpdateManyWithoutUserNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutUserNestedInput
    behaviors?: UserBehaviorUncheckedUpdateManyWithoutUserNestedInput
  }

  export type VoucherUpsertWithoutOrdersInput = {
    update: XOR<VoucherUpdateWithoutOrdersInput, VoucherUncheckedUpdateWithoutOrdersInput>
    create: XOR<VoucherCreateWithoutOrdersInput, VoucherUncheckedCreateWithoutOrdersInput>
    where?: VoucherWhereInput
  }

  export type VoucherUpdateToOneWithWhereWithoutOrdersInput = {
    where?: VoucherWhereInput
    data: XOR<VoucherUpdateWithoutOrdersInput, VoucherUncheckedUpdateWithoutOrdersInput>
  }

  export type VoucherUpdateWithoutOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    discountType?: EnumDiscountTypeFieldUpdateOperationsInput | $Enums.DiscountType
    discountValue?: FloatFieldUpdateOperationsInput | number
    minOrderValue?: NullableFloatFieldUpdateOperationsInput | number | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    usageLimit?: NullableIntFieldUpdateOperationsInput | number | null
    usedCount?: IntFieldUpdateOperationsInput | number
  }

  export type VoucherUncheckedUpdateWithoutOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    discountType?: EnumDiscountTypeFieldUpdateOperationsInput | $Enums.DiscountType
    discountValue?: FloatFieldUpdateOperationsInput | number
    minOrderValue?: NullableFloatFieldUpdateOperationsInput | number | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    usageLimit?: NullableIntFieldUpdateOperationsInput | number | null
    usedCount?: IntFieldUpdateOperationsInput | number
  }

  export type PaymentUpsertWithoutOrderInput = {
    update: XOR<PaymentUpdateWithoutOrderInput, PaymentUncheckedUpdateWithoutOrderInput>
    create: XOR<PaymentCreateWithoutOrderInput, PaymentUncheckedCreateWithoutOrderInput>
    where?: PaymentWhereInput
  }

  export type PaymentUpdateToOneWithWhereWithoutOrderInput = {
    where?: PaymentWhereInput
    data: XOR<PaymentUpdateWithoutOrderInput, PaymentUncheckedUpdateWithoutOrderInput>
  }

  export type PaymentUpdateWithoutOrderInput = {
    id?: StringFieldUpdateOperationsInput | string
    method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    transactionId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentUncheckedUpdateWithoutOrderInput = {
    id?: StringFieldUpdateOperationsInput | string
    method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    transactionId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderItemUpsertWithWhereUniqueWithoutOrderInput = {
    where: OrderItemWhereUniqueInput
    update: XOR<OrderItemUpdateWithoutOrderInput, OrderItemUncheckedUpdateWithoutOrderInput>
    create: XOR<OrderItemCreateWithoutOrderInput, OrderItemUncheckedCreateWithoutOrderInput>
  }

  export type OrderItemUpdateWithWhereUniqueWithoutOrderInput = {
    where: OrderItemWhereUniqueInput
    data: XOR<OrderItemUpdateWithoutOrderInput, OrderItemUncheckedUpdateWithoutOrderInput>
  }

  export type OrderItemUpdateManyWithWhereWithoutOrderInput = {
    where: OrderItemScalarWhereInput
    data: XOR<OrderItemUpdateManyMutationInput, OrderItemUncheckedUpdateManyWithoutOrderInput>
  }

  export type LogisticsOrderUpsertWithWhereUniqueWithoutOrderInput = {
    where: LogisticsOrderWhereUniqueInput
    update: XOR<LogisticsOrderUpdateWithoutOrderInput, LogisticsOrderUncheckedUpdateWithoutOrderInput>
    create: XOR<LogisticsOrderCreateWithoutOrderInput, LogisticsOrderUncheckedCreateWithoutOrderInput>
  }

  export type LogisticsOrderUpdateWithWhereUniqueWithoutOrderInput = {
    where: LogisticsOrderWhereUniqueInput
    data: XOR<LogisticsOrderUpdateWithoutOrderInput, LogisticsOrderUncheckedUpdateWithoutOrderInput>
  }

  export type LogisticsOrderUpdateManyWithWhereWithoutOrderInput = {
    where: LogisticsOrderScalarWhereInput
    data: XOR<LogisticsOrderUpdateManyMutationInput, LogisticsOrderUncheckedUpdateManyWithoutOrderInput>
  }

  export type LogisticsOrderScalarWhereInput = {
    AND?: LogisticsOrderScalarWhereInput | LogisticsOrderScalarWhereInput[]
    OR?: LogisticsOrderScalarWhereInput[]
    NOT?: LogisticsOrderScalarWhereInput | LogisticsOrderScalarWhereInput[]
    id?: StringFilter<"LogisticsOrder"> | string
    orderId?: StringFilter<"LogisticsOrder"> | string
    logisticsPartnerId?: StringFilter<"LogisticsOrder"> | string
    shipperId?: StringNullableFilter<"LogisticsOrder"> | string | null
    trackingCode?: StringFilter<"LogisticsOrder"> | string
    status?: EnumLogisticsStatusFilter<"LogisticsOrder"> | $Enums.LogisticsStatus
    pickupAddress?: StringFilter<"LogisticsOrder"> | string
    deliveryAddress?: StringFilter<"LogisticsOrder"> | string
    pickupLocation?: JsonNullableFilter<"LogisticsOrder">
    deliveryLocation?: JsonNullableFilter<"LogisticsOrder">
    distance?: FloatNullableFilter<"LogisticsOrder"> | number | null
    estimatedTime?: IntNullableFilter<"LogisticsOrder"> | number | null
    estimatedDelivery?: DateTimeNullableFilter<"LogisticsOrder"> | Date | string | null
    pickupTime?: DateTimeNullableFilter<"LogisticsOrder"> | Date | string | null
    deliveredTime?: DateTimeNullableFilter<"LogisticsOrder"> | Date | string | null
    notes?: StringNullableFilter<"LogisticsOrder"> | string | null
    deliveryAttempts?: IntFilter<"LogisticsOrder"> | number
    customerSignature?: StringNullableFilter<"LogisticsOrder"> | string | null
    proofOfDelivery?: StringNullableListFilter<"LogisticsOrder">
    updatedAt?: DateTimeFilter<"LogisticsOrder"> | Date | string
    cancelReason?: StringNullableFilter<"LogisticsOrder"> | string | null
    rating?: IntNullableFilter<"LogisticsOrder"> | number | null
    feedback?: StringNullableFilter<"LogisticsOrder"> | string | null
  }

  export type OrderCreateWithoutOrderItemsInput = {
    id?: string
    totalAmount: number
    status?: $Enums.OrderStatus
    paymentId?: string | null
    shippingId?: string | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutOrdersInput
    voucher?: VoucherCreateNestedOneWithoutOrdersInput
    payment?: PaymentCreateNestedOneWithoutOrderInput
    logisticsOrders?: LogisticsOrderCreateNestedManyWithoutOrderInput
  }

  export type OrderUncheckedCreateWithoutOrderItemsInput = {
    id?: string
    userId: string
    totalAmount: number
    status?: $Enums.OrderStatus
    paymentId?: string | null
    shippingId?: string | null
    voucherId?: string | null
    createdAt?: Date | string
    payment?: PaymentUncheckedCreateNestedOneWithoutOrderInput
    logisticsOrders?: LogisticsOrderUncheckedCreateNestedManyWithoutOrderInput
  }

  export type OrderCreateOrConnectWithoutOrderItemsInput = {
    where: OrderWhereUniqueInput
    create: XOR<OrderCreateWithoutOrderItemsInput, OrderUncheckedCreateWithoutOrderItemsInput>
  }

  export type ProductCreateWithoutOrderItemsInput = {
    id?: string
    name: string
    description: string
    basePrice: number
    stock: number
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    category: CategoryCreateNestedOneWithoutProductsInput
    seller?: SellerCreateNestedOneWithoutProductsInput
    enterprise?: EnterpriseCreateNestedOneWithoutProductsInput
    variants?: ProductVariantCreateNestedManyWithoutProductInput
    reviews?: ReviewCreateNestedManyWithoutProductInput
    behaviors?: UserBehaviorCreateNestedManyWithoutProductInput
    promotions?: PromotionProductCreateNestedManyWithoutProductInput
    sellerProducts?: SellerProductCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutOrderItemsInput = {
    id?: string
    name: string
    description: string
    categoryId: string
    sellerId?: string | null
    enterpriseId?: string | null
    basePrice: number
    stock: number
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    variants?: ProductVariantUncheckedCreateNestedManyWithoutProductInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutProductInput
    behaviors?: UserBehaviorUncheckedCreateNestedManyWithoutProductInput
    promotions?: PromotionProductUncheckedCreateNestedManyWithoutProductInput
    sellerProducts?: SellerProductUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutOrderItemsInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutOrderItemsInput, ProductUncheckedCreateWithoutOrderItemsInput>
  }

  export type OrderUpsertWithoutOrderItemsInput = {
    update: XOR<OrderUpdateWithoutOrderItemsInput, OrderUncheckedUpdateWithoutOrderItemsInput>
    create: XOR<OrderCreateWithoutOrderItemsInput, OrderUncheckedCreateWithoutOrderItemsInput>
    where?: OrderWhereInput
  }

  export type OrderUpdateToOneWithWhereWithoutOrderItemsInput = {
    where?: OrderWhereInput
    data: XOR<OrderUpdateWithoutOrderItemsInput, OrderUncheckedUpdateWithoutOrderItemsInput>
  }

  export type OrderUpdateWithoutOrderItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    totalAmount?: FloatFieldUpdateOperationsInput | number
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    shippingId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutOrdersNestedInput
    voucher?: VoucherUpdateOneWithoutOrdersNestedInput
    payment?: PaymentUpdateOneWithoutOrderNestedInput
    logisticsOrders?: LogisticsOrderUpdateManyWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateWithoutOrderItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    totalAmount?: FloatFieldUpdateOperationsInput | number
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    shippingId?: NullableStringFieldUpdateOperationsInput | string | null
    voucherId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    payment?: PaymentUncheckedUpdateOneWithoutOrderNestedInput
    logisticsOrders?: LogisticsOrderUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type ProductUpsertWithoutOrderItemsInput = {
    update: XOR<ProductUpdateWithoutOrderItemsInput, ProductUncheckedUpdateWithoutOrderItemsInput>
    create: XOR<ProductCreateWithoutOrderItemsInput, ProductUncheckedCreateWithoutOrderItemsInput>
    where?: ProductWhereInput
  }

  export type ProductUpdateToOneWithWhereWithoutOrderItemsInput = {
    where?: ProductWhereInput
    data: XOR<ProductUpdateWithoutOrderItemsInput, ProductUncheckedUpdateWithoutOrderItemsInput>
  }

  export type ProductUpdateWithoutOrderItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    basePrice?: FloatFieldUpdateOperationsInput | number
    stock?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: CategoryUpdateOneRequiredWithoutProductsNestedInput
    seller?: SellerUpdateOneWithoutProductsNestedInput
    enterprise?: EnterpriseUpdateOneWithoutProductsNestedInput
    variants?: ProductVariantUpdateManyWithoutProductNestedInput
    reviews?: ReviewUpdateManyWithoutProductNestedInput
    behaviors?: UserBehaviorUpdateManyWithoutProductNestedInput
    promotions?: PromotionProductUpdateManyWithoutProductNestedInput
    sellerProducts?: SellerProductUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutOrderItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    sellerId?: NullableStringFieldUpdateOperationsInput | string | null
    enterpriseId?: NullableStringFieldUpdateOperationsInput | string | null
    basePrice?: FloatFieldUpdateOperationsInput | number
    stock?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    variants?: ProductVariantUncheckedUpdateManyWithoutProductNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutProductNestedInput
    behaviors?: UserBehaviorUncheckedUpdateManyWithoutProductNestedInput
    promotions?: PromotionProductUncheckedUpdateManyWithoutProductNestedInput
    sellerProducts?: SellerProductUncheckedUpdateManyWithoutProductNestedInput
  }

  export type OrderCreateWithoutPaymentInput = {
    id?: string
    totalAmount: number
    status?: $Enums.OrderStatus
    paymentId?: string | null
    shippingId?: string | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutOrdersInput
    voucher?: VoucherCreateNestedOneWithoutOrdersInput
    orderItems?: OrderItemCreateNestedManyWithoutOrderInput
    logisticsOrders?: LogisticsOrderCreateNestedManyWithoutOrderInput
  }

  export type OrderUncheckedCreateWithoutPaymentInput = {
    id?: string
    userId: string
    totalAmount: number
    status?: $Enums.OrderStatus
    paymentId?: string | null
    shippingId?: string | null
    voucherId?: string | null
    createdAt?: Date | string
    orderItems?: OrderItemUncheckedCreateNestedManyWithoutOrderInput
    logisticsOrders?: LogisticsOrderUncheckedCreateNestedManyWithoutOrderInput
  }

  export type OrderCreateOrConnectWithoutPaymentInput = {
    where: OrderWhereUniqueInput
    create: XOR<OrderCreateWithoutPaymentInput, OrderUncheckedCreateWithoutPaymentInput>
  }

  export type OrderUpsertWithoutPaymentInput = {
    update: XOR<OrderUpdateWithoutPaymentInput, OrderUncheckedUpdateWithoutPaymentInput>
    create: XOR<OrderCreateWithoutPaymentInput, OrderUncheckedCreateWithoutPaymentInput>
    where?: OrderWhereInput
  }

  export type OrderUpdateToOneWithWhereWithoutPaymentInput = {
    where?: OrderWhereInput
    data: XOR<OrderUpdateWithoutPaymentInput, OrderUncheckedUpdateWithoutPaymentInput>
  }

  export type OrderUpdateWithoutPaymentInput = {
    id?: StringFieldUpdateOperationsInput | string
    totalAmount?: FloatFieldUpdateOperationsInput | number
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    shippingId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutOrdersNestedInput
    voucher?: VoucherUpdateOneWithoutOrdersNestedInput
    orderItems?: OrderItemUpdateManyWithoutOrderNestedInput
    logisticsOrders?: LogisticsOrderUpdateManyWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateWithoutPaymentInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    totalAmount?: FloatFieldUpdateOperationsInput | number
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    shippingId?: NullableStringFieldUpdateOperationsInput | string | null
    voucherId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orderItems?: OrderItemUncheckedUpdateManyWithoutOrderNestedInput
    logisticsOrders?: LogisticsOrderUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type UserCreateWithoutLogisticsInput = {
    id?: string
    email: string
    password: string
    name: string
    avatar?: string | null
    phone?: string | null
    role: $Enums.Role
    isVerified?: boolean
    verificationToken?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    seller?: SellerCreateNestedOneWithoutUserInput
    enterprise?: EnterpriseCreateNestedOneWithoutUserInput
    addresses?: AddressCreateNestedManyWithoutUserInput
    orders?: OrderCreateNestedManyWithoutUserInput
    reviews?: ReviewCreateNestedManyWithoutUserInput
    behaviors?: UserBehaviorCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutLogisticsInput = {
    id?: string
    email: string
    password: string
    name: string
    avatar?: string | null
    phone?: string | null
    role: $Enums.Role
    isVerified?: boolean
    verificationToken?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    seller?: SellerUncheckedCreateNestedOneWithoutUserInput
    enterprise?: EnterpriseUncheckedCreateNestedOneWithoutUserInput
    addresses?: AddressUncheckedCreateNestedManyWithoutUserInput
    orders?: OrderUncheckedCreateNestedManyWithoutUserInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutUserInput
    behaviors?: UserBehaviorUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutLogisticsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutLogisticsInput, UserUncheckedCreateWithoutLogisticsInput>
  }

  export type ShipperCreateWithoutLogisticsPartnerInput = {
    id?: string
    email: string
    password: string
    name: string
    phone?: string | null
    avatar?: string | null
    active?: boolean
    currentLocation?: NullableJsonNullValueInput | InputJsonValue
    status?: $Enums.ShipperStatus
    rating?: number | null
    totalDeliveries?: number
    totalRatings?: number
    deliveryRange?: number
    deliveryHistory?: ShipperCreatedeliveryHistoryInput | InputJsonValue[]
    createdAt?: Date | string
    updatedAt?: Date | string
    assignedOrders?: LogisticsOrderCreateNestedManyWithoutShipperInput
  }

  export type ShipperUncheckedCreateWithoutLogisticsPartnerInput = {
    id?: string
    email: string
    password: string
    name: string
    phone?: string | null
    avatar?: string | null
    active?: boolean
    currentLocation?: NullableJsonNullValueInput | InputJsonValue
    status?: $Enums.ShipperStatus
    rating?: number | null
    totalDeliveries?: number
    totalRatings?: number
    deliveryRange?: number
    deliveryHistory?: ShipperCreatedeliveryHistoryInput | InputJsonValue[]
    createdAt?: Date | string
    updatedAt?: Date | string
    assignedOrders?: LogisticsOrderUncheckedCreateNestedManyWithoutShipperInput
  }

  export type ShipperCreateOrConnectWithoutLogisticsPartnerInput = {
    where: ShipperWhereUniqueInput
    create: XOR<ShipperCreateWithoutLogisticsPartnerInput, ShipperUncheckedCreateWithoutLogisticsPartnerInput>
  }

  export type ShipperCreateManyLogisticsPartnerInputEnvelope = {
    data: ShipperCreateManyLogisticsPartnerInput | ShipperCreateManyLogisticsPartnerInput[]
    skipDuplicates?: boolean
  }

  export type LogisticsOrderCreateWithoutLogisticsPartnerInput = {
    id?: string
    trackingCode: string
    status?: $Enums.LogisticsStatus
    pickupAddress: string
    deliveryAddress: string
    pickupLocation?: NullableJsonNullValueInput | InputJsonValue
    deliveryLocation?: NullableJsonNullValueInput | InputJsonValue
    distance?: number | null
    estimatedTime?: number | null
    estimatedDelivery?: Date | string | null
    pickupTime?: Date | string | null
    deliveredTime?: Date | string | null
    notes?: string | null
    deliveryAttempts?: number
    customerSignature?: string | null
    proofOfDelivery?: LogisticsOrderCreateproofOfDeliveryInput | string[]
    updatedAt?: Date | string
    cancelReason?: string | null
    rating?: number | null
    feedback?: string | null
    order: OrderCreateNestedOneWithoutLogisticsOrdersInput
    shipper?: ShipperCreateNestedOneWithoutAssignedOrdersInput
  }

  export type LogisticsOrderUncheckedCreateWithoutLogisticsPartnerInput = {
    id?: string
    orderId: string
    shipperId?: string | null
    trackingCode: string
    status?: $Enums.LogisticsStatus
    pickupAddress: string
    deliveryAddress: string
    pickupLocation?: NullableJsonNullValueInput | InputJsonValue
    deliveryLocation?: NullableJsonNullValueInput | InputJsonValue
    distance?: number | null
    estimatedTime?: number | null
    estimatedDelivery?: Date | string | null
    pickupTime?: Date | string | null
    deliveredTime?: Date | string | null
    notes?: string | null
    deliveryAttempts?: number
    customerSignature?: string | null
    proofOfDelivery?: LogisticsOrderCreateproofOfDeliveryInput | string[]
    updatedAt?: Date | string
    cancelReason?: string | null
    rating?: number | null
    feedback?: string | null
  }

  export type LogisticsOrderCreateOrConnectWithoutLogisticsPartnerInput = {
    where: LogisticsOrderWhereUniqueInput
    create: XOR<LogisticsOrderCreateWithoutLogisticsPartnerInput, LogisticsOrderUncheckedCreateWithoutLogisticsPartnerInput>
  }

  export type LogisticsOrderCreateManyLogisticsPartnerInputEnvelope = {
    data: LogisticsOrderCreateManyLogisticsPartnerInput | LogisticsOrderCreateManyLogisticsPartnerInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutLogisticsInput = {
    update: XOR<UserUpdateWithoutLogisticsInput, UserUncheckedUpdateWithoutLogisticsInput>
    create: XOR<UserCreateWithoutLogisticsInput, UserUncheckedCreateWithoutLogisticsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutLogisticsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutLogisticsInput, UserUncheckedUpdateWithoutLogisticsInput>
  }

  export type UserUpdateWithoutLogisticsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    seller?: SellerUpdateOneWithoutUserNestedInput
    enterprise?: EnterpriseUpdateOneWithoutUserNestedInput
    addresses?: AddressUpdateManyWithoutUserNestedInput
    orders?: OrderUpdateManyWithoutUserNestedInput
    reviews?: ReviewUpdateManyWithoutUserNestedInput
    behaviors?: UserBehaviorUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutLogisticsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    seller?: SellerUncheckedUpdateOneWithoutUserNestedInput
    enterprise?: EnterpriseUncheckedUpdateOneWithoutUserNestedInput
    addresses?: AddressUncheckedUpdateManyWithoutUserNestedInput
    orders?: OrderUncheckedUpdateManyWithoutUserNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutUserNestedInput
    behaviors?: UserBehaviorUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ShipperUpsertWithWhereUniqueWithoutLogisticsPartnerInput = {
    where: ShipperWhereUniqueInput
    update: XOR<ShipperUpdateWithoutLogisticsPartnerInput, ShipperUncheckedUpdateWithoutLogisticsPartnerInput>
    create: XOR<ShipperCreateWithoutLogisticsPartnerInput, ShipperUncheckedCreateWithoutLogisticsPartnerInput>
  }

  export type ShipperUpdateWithWhereUniqueWithoutLogisticsPartnerInput = {
    where: ShipperWhereUniqueInput
    data: XOR<ShipperUpdateWithoutLogisticsPartnerInput, ShipperUncheckedUpdateWithoutLogisticsPartnerInput>
  }

  export type ShipperUpdateManyWithWhereWithoutLogisticsPartnerInput = {
    where: ShipperScalarWhereInput
    data: XOR<ShipperUpdateManyMutationInput, ShipperUncheckedUpdateManyWithoutLogisticsPartnerInput>
  }

  export type ShipperScalarWhereInput = {
    AND?: ShipperScalarWhereInput | ShipperScalarWhereInput[]
    OR?: ShipperScalarWhereInput[]
    NOT?: ShipperScalarWhereInput | ShipperScalarWhereInput[]
    id?: StringFilter<"Shipper"> | string
    email?: StringFilter<"Shipper"> | string
    password?: StringFilter<"Shipper"> | string
    name?: StringFilter<"Shipper"> | string
    phone?: StringNullableFilter<"Shipper"> | string | null
    avatar?: StringNullableFilter<"Shipper"> | string | null
    logisticsPartnerId?: StringFilter<"Shipper"> | string
    active?: BoolFilter<"Shipper"> | boolean
    currentLocation?: JsonNullableFilter<"Shipper">
    status?: EnumShipperStatusFilter<"Shipper"> | $Enums.ShipperStatus
    rating?: FloatNullableFilter<"Shipper"> | number | null
    totalDeliveries?: IntFilter<"Shipper"> | number
    totalRatings?: IntFilter<"Shipper"> | number
    deliveryRange?: FloatFilter<"Shipper"> | number
    deliveryHistory?: JsonNullableListFilter<"Shipper">
    createdAt?: DateTimeFilter<"Shipper"> | Date | string
    updatedAt?: DateTimeFilter<"Shipper"> | Date | string
  }

  export type LogisticsOrderUpsertWithWhereUniqueWithoutLogisticsPartnerInput = {
    where: LogisticsOrderWhereUniqueInput
    update: XOR<LogisticsOrderUpdateWithoutLogisticsPartnerInput, LogisticsOrderUncheckedUpdateWithoutLogisticsPartnerInput>
    create: XOR<LogisticsOrderCreateWithoutLogisticsPartnerInput, LogisticsOrderUncheckedCreateWithoutLogisticsPartnerInput>
  }

  export type LogisticsOrderUpdateWithWhereUniqueWithoutLogisticsPartnerInput = {
    where: LogisticsOrderWhereUniqueInput
    data: XOR<LogisticsOrderUpdateWithoutLogisticsPartnerInput, LogisticsOrderUncheckedUpdateWithoutLogisticsPartnerInput>
  }

  export type LogisticsOrderUpdateManyWithWhereWithoutLogisticsPartnerInput = {
    where: LogisticsOrderScalarWhereInput
    data: XOR<LogisticsOrderUpdateManyMutationInput, LogisticsOrderUncheckedUpdateManyWithoutLogisticsPartnerInput>
  }

  export type LogisticsPartnerCreateWithoutShippersInput = {
    id?: string
    name: string
    apiEndpoint?: string | null
    baseRate: number
    rating?: number | null
    verified?: boolean
    user: UserCreateNestedOneWithoutLogisticsInput
    orders?: LogisticsOrderCreateNestedManyWithoutLogisticsPartnerInput
  }

  export type LogisticsPartnerUncheckedCreateWithoutShippersInput = {
    id?: string
    userId: string
    name: string
    apiEndpoint?: string | null
    baseRate: number
    rating?: number | null
    verified?: boolean
    orders?: LogisticsOrderUncheckedCreateNestedManyWithoutLogisticsPartnerInput
  }

  export type LogisticsPartnerCreateOrConnectWithoutShippersInput = {
    where: LogisticsPartnerWhereUniqueInput
    create: XOR<LogisticsPartnerCreateWithoutShippersInput, LogisticsPartnerUncheckedCreateWithoutShippersInput>
  }

  export type LogisticsOrderCreateWithoutShipperInput = {
    id?: string
    trackingCode: string
    status?: $Enums.LogisticsStatus
    pickupAddress: string
    deliveryAddress: string
    pickupLocation?: NullableJsonNullValueInput | InputJsonValue
    deliveryLocation?: NullableJsonNullValueInput | InputJsonValue
    distance?: number | null
    estimatedTime?: number | null
    estimatedDelivery?: Date | string | null
    pickupTime?: Date | string | null
    deliveredTime?: Date | string | null
    notes?: string | null
    deliveryAttempts?: number
    customerSignature?: string | null
    proofOfDelivery?: LogisticsOrderCreateproofOfDeliveryInput | string[]
    updatedAt?: Date | string
    cancelReason?: string | null
    rating?: number | null
    feedback?: string | null
    order: OrderCreateNestedOneWithoutLogisticsOrdersInput
    logisticsPartner: LogisticsPartnerCreateNestedOneWithoutOrdersInput
  }

  export type LogisticsOrderUncheckedCreateWithoutShipperInput = {
    id?: string
    orderId: string
    logisticsPartnerId: string
    trackingCode: string
    status?: $Enums.LogisticsStatus
    pickupAddress: string
    deliveryAddress: string
    pickupLocation?: NullableJsonNullValueInput | InputJsonValue
    deliveryLocation?: NullableJsonNullValueInput | InputJsonValue
    distance?: number | null
    estimatedTime?: number | null
    estimatedDelivery?: Date | string | null
    pickupTime?: Date | string | null
    deliveredTime?: Date | string | null
    notes?: string | null
    deliveryAttempts?: number
    customerSignature?: string | null
    proofOfDelivery?: LogisticsOrderCreateproofOfDeliveryInput | string[]
    updatedAt?: Date | string
    cancelReason?: string | null
    rating?: number | null
    feedback?: string | null
  }

  export type LogisticsOrderCreateOrConnectWithoutShipperInput = {
    where: LogisticsOrderWhereUniqueInput
    create: XOR<LogisticsOrderCreateWithoutShipperInput, LogisticsOrderUncheckedCreateWithoutShipperInput>
  }

  export type LogisticsOrderCreateManyShipperInputEnvelope = {
    data: LogisticsOrderCreateManyShipperInput | LogisticsOrderCreateManyShipperInput[]
    skipDuplicates?: boolean
  }

  export type LogisticsPartnerUpsertWithoutShippersInput = {
    update: XOR<LogisticsPartnerUpdateWithoutShippersInput, LogisticsPartnerUncheckedUpdateWithoutShippersInput>
    create: XOR<LogisticsPartnerCreateWithoutShippersInput, LogisticsPartnerUncheckedCreateWithoutShippersInput>
    where?: LogisticsPartnerWhereInput
  }

  export type LogisticsPartnerUpdateToOneWithWhereWithoutShippersInput = {
    where?: LogisticsPartnerWhereInput
    data: XOR<LogisticsPartnerUpdateWithoutShippersInput, LogisticsPartnerUncheckedUpdateWithoutShippersInput>
  }

  export type LogisticsPartnerUpdateWithoutShippersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    apiEndpoint?: NullableStringFieldUpdateOperationsInput | string | null
    baseRate?: FloatFieldUpdateOperationsInput | number
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutLogisticsNestedInput
    orders?: LogisticsOrderUpdateManyWithoutLogisticsPartnerNestedInput
  }

  export type LogisticsPartnerUncheckedUpdateWithoutShippersInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    apiEndpoint?: NullableStringFieldUpdateOperationsInput | string | null
    baseRate?: FloatFieldUpdateOperationsInput | number
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    orders?: LogisticsOrderUncheckedUpdateManyWithoutLogisticsPartnerNestedInput
  }

  export type LogisticsOrderUpsertWithWhereUniqueWithoutShipperInput = {
    where: LogisticsOrderWhereUniqueInput
    update: XOR<LogisticsOrderUpdateWithoutShipperInput, LogisticsOrderUncheckedUpdateWithoutShipperInput>
    create: XOR<LogisticsOrderCreateWithoutShipperInput, LogisticsOrderUncheckedCreateWithoutShipperInput>
  }

  export type LogisticsOrderUpdateWithWhereUniqueWithoutShipperInput = {
    where: LogisticsOrderWhereUniqueInput
    data: XOR<LogisticsOrderUpdateWithoutShipperInput, LogisticsOrderUncheckedUpdateWithoutShipperInput>
  }

  export type LogisticsOrderUpdateManyWithWhereWithoutShipperInput = {
    where: LogisticsOrderScalarWhereInput
    data: XOR<LogisticsOrderUpdateManyMutationInput, LogisticsOrderUncheckedUpdateManyWithoutShipperInput>
  }

  export type OrderCreateWithoutLogisticsOrdersInput = {
    id?: string
    totalAmount: number
    status?: $Enums.OrderStatus
    paymentId?: string | null
    shippingId?: string | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutOrdersInput
    voucher?: VoucherCreateNestedOneWithoutOrdersInput
    payment?: PaymentCreateNestedOneWithoutOrderInput
    orderItems?: OrderItemCreateNestedManyWithoutOrderInput
  }

  export type OrderUncheckedCreateWithoutLogisticsOrdersInput = {
    id?: string
    userId: string
    totalAmount: number
    status?: $Enums.OrderStatus
    paymentId?: string | null
    shippingId?: string | null
    voucherId?: string | null
    createdAt?: Date | string
    payment?: PaymentUncheckedCreateNestedOneWithoutOrderInput
    orderItems?: OrderItemUncheckedCreateNestedManyWithoutOrderInput
  }

  export type OrderCreateOrConnectWithoutLogisticsOrdersInput = {
    where: OrderWhereUniqueInput
    create: XOR<OrderCreateWithoutLogisticsOrdersInput, OrderUncheckedCreateWithoutLogisticsOrdersInput>
  }

  export type LogisticsPartnerCreateWithoutOrdersInput = {
    id?: string
    name: string
    apiEndpoint?: string | null
    baseRate: number
    rating?: number | null
    verified?: boolean
    user: UserCreateNestedOneWithoutLogisticsInput
    shippers?: ShipperCreateNestedManyWithoutLogisticsPartnerInput
  }

  export type LogisticsPartnerUncheckedCreateWithoutOrdersInput = {
    id?: string
    userId: string
    name: string
    apiEndpoint?: string | null
    baseRate: number
    rating?: number | null
    verified?: boolean
    shippers?: ShipperUncheckedCreateNestedManyWithoutLogisticsPartnerInput
  }

  export type LogisticsPartnerCreateOrConnectWithoutOrdersInput = {
    where: LogisticsPartnerWhereUniqueInput
    create: XOR<LogisticsPartnerCreateWithoutOrdersInput, LogisticsPartnerUncheckedCreateWithoutOrdersInput>
  }

  export type ShipperCreateWithoutAssignedOrdersInput = {
    id?: string
    email: string
    password: string
    name: string
    phone?: string | null
    avatar?: string | null
    active?: boolean
    currentLocation?: NullableJsonNullValueInput | InputJsonValue
    status?: $Enums.ShipperStatus
    rating?: number | null
    totalDeliveries?: number
    totalRatings?: number
    deliveryRange?: number
    deliveryHistory?: ShipperCreatedeliveryHistoryInput | InputJsonValue[]
    createdAt?: Date | string
    updatedAt?: Date | string
    logisticsPartner: LogisticsPartnerCreateNestedOneWithoutShippersInput
  }

  export type ShipperUncheckedCreateWithoutAssignedOrdersInput = {
    id?: string
    email: string
    password: string
    name: string
    phone?: string | null
    avatar?: string | null
    logisticsPartnerId: string
    active?: boolean
    currentLocation?: NullableJsonNullValueInput | InputJsonValue
    status?: $Enums.ShipperStatus
    rating?: number | null
    totalDeliveries?: number
    totalRatings?: number
    deliveryRange?: number
    deliveryHistory?: ShipperCreatedeliveryHistoryInput | InputJsonValue[]
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ShipperCreateOrConnectWithoutAssignedOrdersInput = {
    where: ShipperWhereUniqueInput
    create: XOR<ShipperCreateWithoutAssignedOrdersInput, ShipperUncheckedCreateWithoutAssignedOrdersInput>
  }

  export type OrderUpsertWithoutLogisticsOrdersInput = {
    update: XOR<OrderUpdateWithoutLogisticsOrdersInput, OrderUncheckedUpdateWithoutLogisticsOrdersInput>
    create: XOR<OrderCreateWithoutLogisticsOrdersInput, OrderUncheckedCreateWithoutLogisticsOrdersInput>
    where?: OrderWhereInput
  }

  export type OrderUpdateToOneWithWhereWithoutLogisticsOrdersInput = {
    where?: OrderWhereInput
    data: XOR<OrderUpdateWithoutLogisticsOrdersInput, OrderUncheckedUpdateWithoutLogisticsOrdersInput>
  }

  export type OrderUpdateWithoutLogisticsOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    totalAmount?: FloatFieldUpdateOperationsInput | number
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    shippingId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutOrdersNestedInput
    voucher?: VoucherUpdateOneWithoutOrdersNestedInput
    payment?: PaymentUpdateOneWithoutOrderNestedInput
    orderItems?: OrderItemUpdateManyWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateWithoutLogisticsOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    totalAmount?: FloatFieldUpdateOperationsInput | number
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    shippingId?: NullableStringFieldUpdateOperationsInput | string | null
    voucherId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    payment?: PaymentUncheckedUpdateOneWithoutOrderNestedInput
    orderItems?: OrderItemUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type LogisticsPartnerUpsertWithoutOrdersInput = {
    update: XOR<LogisticsPartnerUpdateWithoutOrdersInput, LogisticsPartnerUncheckedUpdateWithoutOrdersInput>
    create: XOR<LogisticsPartnerCreateWithoutOrdersInput, LogisticsPartnerUncheckedCreateWithoutOrdersInput>
    where?: LogisticsPartnerWhereInput
  }

  export type LogisticsPartnerUpdateToOneWithWhereWithoutOrdersInput = {
    where?: LogisticsPartnerWhereInput
    data: XOR<LogisticsPartnerUpdateWithoutOrdersInput, LogisticsPartnerUncheckedUpdateWithoutOrdersInput>
  }

  export type LogisticsPartnerUpdateWithoutOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    apiEndpoint?: NullableStringFieldUpdateOperationsInput | string | null
    baseRate?: FloatFieldUpdateOperationsInput | number
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutLogisticsNestedInput
    shippers?: ShipperUpdateManyWithoutLogisticsPartnerNestedInput
  }

  export type LogisticsPartnerUncheckedUpdateWithoutOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    apiEndpoint?: NullableStringFieldUpdateOperationsInput | string | null
    baseRate?: FloatFieldUpdateOperationsInput | number
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    shippers?: ShipperUncheckedUpdateManyWithoutLogisticsPartnerNestedInput
  }

  export type ShipperUpsertWithoutAssignedOrdersInput = {
    update: XOR<ShipperUpdateWithoutAssignedOrdersInput, ShipperUncheckedUpdateWithoutAssignedOrdersInput>
    create: XOR<ShipperCreateWithoutAssignedOrdersInput, ShipperUncheckedCreateWithoutAssignedOrdersInput>
    where?: ShipperWhereInput
  }

  export type ShipperUpdateToOneWithWhereWithoutAssignedOrdersInput = {
    where?: ShipperWhereInput
    data: XOR<ShipperUpdateWithoutAssignedOrdersInput, ShipperUncheckedUpdateWithoutAssignedOrdersInput>
  }

  export type ShipperUpdateWithoutAssignedOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    currentLocation?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumShipperStatusFieldUpdateOperationsInput | $Enums.ShipperStatus
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    totalDeliveries?: IntFieldUpdateOperationsInput | number
    totalRatings?: IntFieldUpdateOperationsInput | number
    deliveryRange?: FloatFieldUpdateOperationsInput | number
    deliveryHistory?: ShipperUpdatedeliveryHistoryInput | InputJsonValue[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    logisticsPartner?: LogisticsPartnerUpdateOneRequiredWithoutShippersNestedInput
  }

  export type ShipperUncheckedUpdateWithoutAssignedOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    logisticsPartnerId?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    currentLocation?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumShipperStatusFieldUpdateOperationsInput | $Enums.ShipperStatus
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    totalDeliveries?: IntFieldUpdateOperationsInput | number
    totalRatings?: IntFieldUpdateOperationsInput | number
    deliveryRange?: FloatFieldUpdateOperationsInput | number
    deliveryHistory?: ShipperUpdatedeliveryHistoryInput | InputJsonValue[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateWithoutBehaviorsInput = {
    id?: string
    email: string
    password: string
    name: string
    avatar?: string | null
    phone?: string | null
    role: $Enums.Role
    isVerified?: boolean
    verificationToken?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    seller?: SellerCreateNestedOneWithoutUserInput
    enterprise?: EnterpriseCreateNestedOneWithoutUserInput
    logistics?: LogisticsPartnerCreateNestedOneWithoutUserInput
    addresses?: AddressCreateNestedManyWithoutUserInput
    orders?: OrderCreateNestedManyWithoutUserInput
    reviews?: ReviewCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutBehaviorsInput = {
    id?: string
    email: string
    password: string
    name: string
    avatar?: string | null
    phone?: string | null
    role: $Enums.Role
    isVerified?: boolean
    verificationToken?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    seller?: SellerUncheckedCreateNestedOneWithoutUserInput
    enterprise?: EnterpriseUncheckedCreateNestedOneWithoutUserInput
    logistics?: LogisticsPartnerUncheckedCreateNestedOneWithoutUserInput
    addresses?: AddressUncheckedCreateNestedManyWithoutUserInput
    orders?: OrderUncheckedCreateNestedManyWithoutUserInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutBehaviorsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutBehaviorsInput, UserUncheckedCreateWithoutBehaviorsInput>
  }

  export type ProductCreateWithoutBehaviorsInput = {
    id?: string
    name: string
    description: string
    basePrice: number
    stock: number
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    category: CategoryCreateNestedOneWithoutProductsInput
    seller?: SellerCreateNestedOneWithoutProductsInput
    enterprise?: EnterpriseCreateNestedOneWithoutProductsInput
    variants?: ProductVariantCreateNestedManyWithoutProductInput
    reviews?: ReviewCreateNestedManyWithoutProductInput
    orderItems?: OrderItemCreateNestedManyWithoutProductInput
    promotions?: PromotionProductCreateNestedManyWithoutProductInput
    sellerProducts?: SellerProductCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutBehaviorsInput = {
    id?: string
    name: string
    description: string
    categoryId: string
    sellerId?: string | null
    enterpriseId?: string | null
    basePrice: number
    stock: number
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    variants?: ProductVariantUncheckedCreateNestedManyWithoutProductInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutProductInput
    orderItems?: OrderItemUncheckedCreateNestedManyWithoutProductInput
    promotions?: PromotionProductUncheckedCreateNestedManyWithoutProductInput
    sellerProducts?: SellerProductUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutBehaviorsInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutBehaviorsInput, ProductUncheckedCreateWithoutBehaviorsInput>
  }

  export type UserUpsertWithoutBehaviorsInput = {
    update: XOR<UserUpdateWithoutBehaviorsInput, UserUncheckedUpdateWithoutBehaviorsInput>
    create: XOR<UserCreateWithoutBehaviorsInput, UserUncheckedCreateWithoutBehaviorsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutBehaviorsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutBehaviorsInput, UserUncheckedUpdateWithoutBehaviorsInput>
  }

  export type UserUpdateWithoutBehaviorsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    seller?: SellerUpdateOneWithoutUserNestedInput
    enterprise?: EnterpriseUpdateOneWithoutUserNestedInput
    logistics?: LogisticsPartnerUpdateOneWithoutUserNestedInput
    addresses?: AddressUpdateManyWithoutUserNestedInput
    orders?: OrderUpdateManyWithoutUserNestedInput
    reviews?: ReviewUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutBehaviorsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    seller?: SellerUncheckedUpdateOneWithoutUserNestedInput
    enterprise?: EnterpriseUncheckedUpdateOneWithoutUserNestedInput
    logistics?: LogisticsPartnerUncheckedUpdateOneWithoutUserNestedInput
    addresses?: AddressUncheckedUpdateManyWithoutUserNestedInput
    orders?: OrderUncheckedUpdateManyWithoutUserNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ProductUpsertWithoutBehaviorsInput = {
    update: XOR<ProductUpdateWithoutBehaviorsInput, ProductUncheckedUpdateWithoutBehaviorsInput>
    create: XOR<ProductCreateWithoutBehaviorsInput, ProductUncheckedCreateWithoutBehaviorsInput>
    where?: ProductWhereInput
  }

  export type ProductUpdateToOneWithWhereWithoutBehaviorsInput = {
    where?: ProductWhereInput
    data: XOR<ProductUpdateWithoutBehaviorsInput, ProductUncheckedUpdateWithoutBehaviorsInput>
  }

  export type ProductUpdateWithoutBehaviorsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    basePrice?: FloatFieldUpdateOperationsInput | number
    stock?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: CategoryUpdateOneRequiredWithoutProductsNestedInput
    seller?: SellerUpdateOneWithoutProductsNestedInput
    enterprise?: EnterpriseUpdateOneWithoutProductsNestedInput
    variants?: ProductVariantUpdateManyWithoutProductNestedInput
    reviews?: ReviewUpdateManyWithoutProductNestedInput
    orderItems?: OrderItemUpdateManyWithoutProductNestedInput
    promotions?: PromotionProductUpdateManyWithoutProductNestedInput
    sellerProducts?: SellerProductUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutBehaviorsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    sellerId?: NullableStringFieldUpdateOperationsInput | string | null
    enterpriseId?: NullableStringFieldUpdateOperationsInput | string | null
    basePrice?: FloatFieldUpdateOperationsInput | number
    stock?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    variants?: ProductVariantUncheckedUpdateManyWithoutProductNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutProductNestedInput
    orderItems?: OrderItemUncheckedUpdateManyWithoutProductNestedInput
    promotions?: PromotionProductUncheckedUpdateManyWithoutProductNestedInput
    sellerProducts?: SellerProductUncheckedUpdateManyWithoutProductNestedInput
  }

  export type PromotionProductCreateWithoutPromotionInput = {
    id?: string
    discountPercentage: number
    quantity?: number | null
    soldQuantity?: number | null
    product: ProductCreateNestedOneWithoutPromotionsInput
  }

  export type PromotionProductUncheckedCreateWithoutPromotionInput = {
    id?: string
    productId: string
    discountPercentage: number
    quantity?: number | null
    soldQuantity?: number | null
  }

  export type PromotionProductCreateOrConnectWithoutPromotionInput = {
    where: PromotionProductWhereUniqueInput
    create: XOR<PromotionProductCreateWithoutPromotionInput, PromotionProductUncheckedCreateWithoutPromotionInput>
  }

  export type PromotionProductCreateManyPromotionInputEnvelope = {
    data: PromotionProductCreateManyPromotionInput | PromotionProductCreateManyPromotionInput[]
    skipDuplicates?: boolean
  }

  export type PromotionCategoryCreateWithoutPromotionInput = {
    id?: string
    category: CategoryCreateNestedOneWithoutPromotionsInput
  }

  export type PromotionCategoryUncheckedCreateWithoutPromotionInput = {
    id?: string
    categoryId: string
  }

  export type PromotionCategoryCreateOrConnectWithoutPromotionInput = {
    where: PromotionCategoryWhereUniqueInput
    create: XOR<PromotionCategoryCreateWithoutPromotionInput, PromotionCategoryUncheckedCreateWithoutPromotionInput>
  }

  export type PromotionCategoryCreateManyPromotionInputEnvelope = {
    data: PromotionCategoryCreateManyPromotionInput | PromotionCategoryCreateManyPromotionInput[]
    skipDuplicates?: boolean
  }

  export type PromotionProductUpsertWithWhereUniqueWithoutPromotionInput = {
    where: PromotionProductWhereUniqueInput
    update: XOR<PromotionProductUpdateWithoutPromotionInput, PromotionProductUncheckedUpdateWithoutPromotionInput>
    create: XOR<PromotionProductCreateWithoutPromotionInput, PromotionProductUncheckedCreateWithoutPromotionInput>
  }

  export type PromotionProductUpdateWithWhereUniqueWithoutPromotionInput = {
    where: PromotionProductWhereUniqueInput
    data: XOR<PromotionProductUpdateWithoutPromotionInput, PromotionProductUncheckedUpdateWithoutPromotionInput>
  }

  export type PromotionProductUpdateManyWithWhereWithoutPromotionInput = {
    where: PromotionProductScalarWhereInput
    data: XOR<PromotionProductUpdateManyMutationInput, PromotionProductUncheckedUpdateManyWithoutPromotionInput>
  }

  export type PromotionCategoryUpsertWithWhereUniqueWithoutPromotionInput = {
    where: PromotionCategoryWhereUniqueInput
    update: XOR<PromotionCategoryUpdateWithoutPromotionInput, PromotionCategoryUncheckedUpdateWithoutPromotionInput>
    create: XOR<PromotionCategoryCreateWithoutPromotionInput, PromotionCategoryUncheckedCreateWithoutPromotionInput>
  }

  export type PromotionCategoryUpdateWithWhereUniqueWithoutPromotionInput = {
    where: PromotionCategoryWhereUniqueInput
    data: XOR<PromotionCategoryUpdateWithoutPromotionInput, PromotionCategoryUncheckedUpdateWithoutPromotionInput>
  }

  export type PromotionCategoryUpdateManyWithWhereWithoutPromotionInput = {
    where: PromotionCategoryScalarWhereInput
    data: XOR<PromotionCategoryUpdateManyMutationInput, PromotionCategoryUncheckedUpdateManyWithoutPromotionInput>
  }

  export type PromotionCreateWithoutProductsInput = {
    id?: string
    type: $Enums.PromotionType
    name: string
    description?: string | null
    startDate: Date | string
    endDate: Date | string
    discountPercentage?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    categories?: PromotionCategoryCreateNestedManyWithoutPromotionInput
  }

  export type PromotionUncheckedCreateWithoutProductsInput = {
    id?: string
    type: $Enums.PromotionType
    name: string
    description?: string | null
    startDate: Date | string
    endDate: Date | string
    discountPercentage?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    categories?: PromotionCategoryUncheckedCreateNestedManyWithoutPromotionInput
  }

  export type PromotionCreateOrConnectWithoutProductsInput = {
    where: PromotionWhereUniqueInput
    create: XOR<PromotionCreateWithoutProductsInput, PromotionUncheckedCreateWithoutProductsInput>
  }

  export type ProductCreateWithoutPromotionsInput = {
    id?: string
    name: string
    description: string
    basePrice: number
    stock: number
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    category: CategoryCreateNestedOneWithoutProductsInput
    seller?: SellerCreateNestedOneWithoutProductsInput
    enterprise?: EnterpriseCreateNestedOneWithoutProductsInput
    variants?: ProductVariantCreateNestedManyWithoutProductInput
    reviews?: ReviewCreateNestedManyWithoutProductInput
    orderItems?: OrderItemCreateNestedManyWithoutProductInput
    behaviors?: UserBehaviorCreateNestedManyWithoutProductInput
    sellerProducts?: SellerProductCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutPromotionsInput = {
    id?: string
    name: string
    description: string
    categoryId: string
    sellerId?: string | null
    enterpriseId?: string | null
    basePrice: number
    stock: number
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    variants?: ProductVariantUncheckedCreateNestedManyWithoutProductInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutProductInput
    orderItems?: OrderItemUncheckedCreateNestedManyWithoutProductInput
    behaviors?: UserBehaviorUncheckedCreateNestedManyWithoutProductInput
    sellerProducts?: SellerProductUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutPromotionsInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutPromotionsInput, ProductUncheckedCreateWithoutPromotionsInput>
  }

  export type PromotionUpsertWithoutProductsInput = {
    update: XOR<PromotionUpdateWithoutProductsInput, PromotionUncheckedUpdateWithoutProductsInput>
    create: XOR<PromotionCreateWithoutProductsInput, PromotionUncheckedCreateWithoutProductsInput>
    where?: PromotionWhereInput
  }

  export type PromotionUpdateToOneWithWhereWithoutProductsInput = {
    where?: PromotionWhereInput
    data: XOR<PromotionUpdateWithoutProductsInput, PromotionUncheckedUpdateWithoutProductsInput>
  }

  export type PromotionUpdateWithoutProductsInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumPromotionTypeFieldUpdateOperationsInput | $Enums.PromotionType
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    discountPercentage?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categories?: PromotionCategoryUpdateManyWithoutPromotionNestedInput
  }

  export type PromotionUncheckedUpdateWithoutProductsInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumPromotionTypeFieldUpdateOperationsInput | $Enums.PromotionType
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    discountPercentage?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categories?: PromotionCategoryUncheckedUpdateManyWithoutPromotionNestedInput
  }

  export type ProductUpsertWithoutPromotionsInput = {
    update: XOR<ProductUpdateWithoutPromotionsInput, ProductUncheckedUpdateWithoutPromotionsInput>
    create: XOR<ProductCreateWithoutPromotionsInput, ProductUncheckedCreateWithoutPromotionsInput>
    where?: ProductWhereInput
  }

  export type ProductUpdateToOneWithWhereWithoutPromotionsInput = {
    where?: ProductWhereInput
    data: XOR<ProductUpdateWithoutPromotionsInput, ProductUncheckedUpdateWithoutPromotionsInput>
  }

  export type ProductUpdateWithoutPromotionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    basePrice?: FloatFieldUpdateOperationsInput | number
    stock?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: CategoryUpdateOneRequiredWithoutProductsNestedInput
    seller?: SellerUpdateOneWithoutProductsNestedInput
    enterprise?: EnterpriseUpdateOneWithoutProductsNestedInput
    variants?: ProductVariantUpdateManyWithoutProductNestedInput
    reviews?: ReviewUpdateManyWithoutProductNestedInput
    orderItems?: OrderItemUpdateManyWithoutProductNestedInput
    behaviors?: UserBehaviorUpdateManyWithoutProductNestedInput
    sellerProducts?: SellerProductUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutPromotionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    sellerId?: NullableStringFieldUpdateOperationsInput | string | null
    enterpriseId?: NullableStringFieldUpdateOperationsInput | string | null
    basePrice?: FloatFieldUpdateOperationsInput | number
    stock?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    variants?: ProductVariantUncheckedUpdateManyWithoutProductNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutProductNestedInput
    orderItems?: OrderItemUncheckedUpdateManyWithoutProductNestedInput
    behaviors?: UserBehaviorUncheckedUpdateManyWithoutProductNestedInput
    sellerProducts?: SellerProductUncheckedUpdateManyWithoutProductNestedInput
  }

  export type PromotionCreateWithoutCategoriesInput = {
    id?: string
    type: $Enums.PromotionType
    name: string
    description?: string | null
    startDate: Date | string
    endDate: Date | string
    discountPercentage?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    products?: PromotionProductCreateNestedManyWithoutPromotionInput
  }

  export type PromotionUncheckedCreateWithoutCategoriesInput = {
    id?: string
    type: $Enums.PromotionType
    name: string
    description?: string | null
    startDate: Date | string
    endDate: Date | string
    discountPercentage?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    products?: PromotionProductUncheckedCreateNestedManyWithoutPromotionInput
  }

  export type PromotionCreateOrConnectWithoutCategoriesInput = {
    where: PromotionWhereUniqueInput
    create: XOR<PromotionCreateWithoutCategoriesInput, PromotionUncheckedCreateWithoutCategoriesInput>
  }

  export type CategoryCreateWithoutPromotionsInput = {
    id?: string
    name: string
    parent?: CategoryCreateNestedOneWithoutChildrenInput
    children?: CategoryCreateNestedManyWithoutParentInput
    products?: ProductCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUncheckedCreateWithoutPromotionsInput = {
    id?: string
    name: string
    parentId?: string | null
    children?: CategoryUncheckedCreateNestedManyWithoutParentInput
    products?: ProductUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryCreateOrConnectWithoutPromotionsInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutPromotionsInput, CategoryUncheckedCreateWithoutPromotionsInput>
  }

  export type PromotionUpsertWithoutCategoriesInput = {
    update: XOR<PromotionUpdateWithoutCategoriesInput, PromotionUncheckedUpdateWithoutCategoriesInput>
    create: XOR<PromotionCreateWithoutCategoriesInput, PromotionUncheckedCreateWithoutCategoriesInput>
    where?: PromotionWhereInput
  }

  export type PromotionUpdateToOneWithWhereWithoutCategoriesInput = {
    where?: PromotionWhereInput
    data: XOR<PromotionUpdateWithoutCategoriesInput, PromotionUncheckedUpdateWithoutCategoriesInput>
  }

  export type PromotionUpdateWithoutCategoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumPromotionTypeFieldUpdateOperationsInput | $Enums.PromotionType
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    discountPercentage?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    products?: PromotionProductUpdateManyWithoutPromotionNestedInput
  }

  export type PromotionUncheckedUpdateWithoutCategoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumPromotionTypeFieldUpdateOperationsInput | $Enums.PromotionType
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    discountPercentage?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    products?: PromotionProductUncheckedUpdateManyWithoutPromotionNestedInput
  }

  export type CategoryUpsertWithoutPromotionsInput = {
    update: XOR<CategoryUpdateWithoutPromotionsInput, CategoryUncheckedUpdateWithoutPromotionsInput>
    create: XOR<CategoryCreateWithoutPromotionsInput, CategoryUncheckedCreateWithoutPromotionsInput>
    where?: CategoryWhereInput
  }

  export type CategoryUpdateToOneWithWhereWithoutPromotionsInput = {
    where?: CategoryWhereInput
    data: XOR<CategoryUpdateWithoutPromotionsInput, CategoryUncheckedUpdateWithoutPromotionsInput>
  }

  export type CategoryUpdateWithoutPromotionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    parent?: CategoryUpdateOneWithoutChildrenNestedInput
    children?: CategoryUpdateManyWithoutParentNestedInput
    products?: ProductUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateWithoutPromotionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    children?: CategoryUncheckedUpdateManyWithoutParentNestedInput
    products?: ProductUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type AddressCreateManyUserInput = {
    id?: string
    label?: string | null
    fullName: string
    phone: string
    province: string
    district: string
    ward: string
    street: string
    isDefault?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OrderCreateManyUserInput = {
    id?: string
    totalAmount: number
    status?: $Enums.OrderStatus
    paymentId?: string | null
    shippingId?: string | null
    voucherId?: string | null
    createdAt?: Date | string
  }

  export type ReviewCreateManyUserInput = {
    id?: string
    productId: string
    rating: number
    comment?: string | null
    createdAt?: Date | string
  }

  export type UserBehaviorCreateManyUserInput = {
    id?: string
    productId: string
    type: $Enums.BehaviorType
    createdAt?: Date | string
  }

  export type AddressUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: NullableStringFieldUpdateOperationsInput | string | null
    fullName?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    province?: StringFieldUpdateOperationsInput | string
    district?: StringFieldUpdateOperationsInput | string
    ward?: StringFieldUpdateOperationsInput | string
    street?: StringFieldUpdateOperationsInput | string
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AddressUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: NullableStringFieldUpdateOperationsInput | string | null
    fullName?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    province?: StringFieldUpdateOperationsInput | string
    district?: StringFieldUpdateOperationsInput | string
    ward?: StringFieldUpdateOperationsInput | string
    street?: StringFieldUpdateOperationsInput | string
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AddressUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: NullableStringFieldUpdateOperationsInput | string | null
    fullName?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    province?: StringFieldUpdateOperationsInput | string
    district?: StringFieldUpdateOperationsInput | string
    ward?: StringFieldUpdateOperationsInput | string
    street?: StringFieldUpdateOperationsInput | string
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    totalAmount?: FloatFieldUpdateOperationsInput | number
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    shippingId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    voucher?: VoucherUpdateOneWithoutOrdersNestedInput
    payment?: PaymentUpdateOneWithoutOrderNestedInput
    orderItems?: OrderItemUpdateManyWithoutOrderNestedInput
    logisticsOrders?: LogisticsOrderUpdateManyWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    totalAmount?: FloatFieldUpdateOperationsInput | number
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    shippingId?: NullableStringFieldUpdateOperationsInput | string | null
    voucherId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    payment?: PaymentUncheckedUpdateOneWithoutOrderNestedInput
    orderItems?: OrderItemUncheckedUpdateManyWithoutOrderNestedInput
    logisticsOrders?: LogisticsOrderUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    totalAmount?: FloatFieldUpdateOperationsInput | number
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    shippingId?: NullableStringFieldUpdateOperationsInput | string | null
    voucherId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReviewUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    product?: ProductUpdateOneRequiredWithoutReviewsNestedInput
  }

  export type ReviewUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReviewUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserBehaviorUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumBehaviorTypeFieldUpdateOperationsInput | $Enums.BehaviorType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    product?: ProductUpdateOneRequiredWithoutBehaviorsNestedInput
  }

  export type UserBehaviorUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    type?: EnumBehaviorTypeFieldUpdateOperationsInput | $Enums.BehaviorType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserBehaviorUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    type?: EnumBehaviorTypeFieldUpdateOperationsInput | $Enums.BehaviorType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductCreateManySellerInput = {
    id?: string
    name: string
    description: string
    categoryId: string
    enterpriseId?: string | null
    basePrice: number
    stock: number
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SellerProductCreateManySellerInput = {
    id?: string
    productId: string
    price: number
    stock: number
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProductUpdateWithoutSellerInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    basePrice?: FloatFieldUpdateOperationsInput | number
    stock?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: CategoryUpdateOneRequiredWithoutProductsNestedInput
    enterprise?: EnterpriseUpdateOneWithoutProductsNestedInput
    variants?: ProductVariantUpdateManyWithoutProductNestedInput
    reviews?: ReviewUpdateManyWithoutProductNestedInput
    orderItems?: OrderItemUpdateManyWithoutProductNestedInput
    behaviors?: UserBehaviorUpdateManyWithoutProductNestedInput
    promotions?: PromotionProductUpdateManyWithoutProductNestedInput
    sellerProducts?: SellerProductUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutSellerInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    enterpriseId?: NullableStringFieldUpdateOperationsInput | string | null
    basePrice?: FloatFieldUpdateOperationsInput | number
    stock?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    variants?: ProductVariantUncheckedUpdateManyWithoutProductNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutProductNestedInput
    orderItems?: OrderItemUncheckedUpdateManyWithoutProductNestedInput
    behaviors?: UserBehaviorUncheckedUpdateManyWithoutProductNestedInput
    promotions?: PromotionProductUncheckedUpdateManyWithoutProductNestedInput
    sellerProducts?: SellerProductUncheckedUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateManyWithoutSellerInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    enterpriseId?: NullableStringFieldUpdateOperationsInput | string | null
    basePrice?: FloatFieldUpdateOperationsInput | number
    stock?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SellerProductUpdateWithoutSellerInput = {
    id?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    stock?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    product?: ProductUpdateOneRequiredWithoutSellerProductsNestedInput
  }

  export type SellerProductUncheckedUpdateWithoutSellerInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    stock?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SellerProductUncheckedUpdateManyWithoutSellerInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    stock?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductCreateManyEnterpriseInput = {
    id?: string
    name: string
    description: string
    categoryId: string
    sellerId?: string | null
    basePrice: number
    stock: number
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProductUpdateWithoutEnterpriseInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    basePrice?: FloatFieldUpdateOperationsInput | number
    stock?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: CategoryUpdateOneRequiredWithoutProductsNestedInput
    seller?: SellerUpdateOneWithoutProductsNestedInput
    variants?: ProductVariantUpdateManyWithoutProductNestedInput
    reviews?: ReviewUpdateManyWithoutProductNestedInput
    orderItems?: OrderItemUpdateManyWithoutProductNestedInput
    behaviors?: UserBehaviorUpdateManyWithoutProductNestedInput
    promotions?: PromotionProductUpdateManyWithoutProductNestedInput
    sellerProducts?: SellerProductUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutEnterpriseInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    sellerId?: NullableStringFieldUpdateOperationsInput | string | null
    basePrice?: FloatFieldUpdateOperationsInput | number
    stock?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    variants?: ProductVariantUncheckedUpdateManyWithoutProductNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutProductNestedInput
    orderItems?: OrderItemUncheckedUpdateManyWithoutProductNestedInput
    behaviors?: UserBehaviorUncheckedUpdateManyWithoutProductNestedInput
    promotions?: PromotionProductUncheckedUpdateManyWithoutProductNestedInput
    sellerProducts?: SellerProductUncheckedUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateManyWithoutEnterpriseInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    sellerId?: NullableStringFieldUpdateOperationsInput | string | null
    basePrice?: FloatFieldUpdateOperationsInput | number
    stock?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductVariantCreateManyProductInput = {
    id?: string
    color?: string | null
    size?: string | null
    price: number
    stock: number
  }

  export type ReviewCreateManyProductInput = {
    id?: string
    userId: string
    rating: number
    comment?: string | null
    createdAt?: Date | string
  }

  export type OrderItemCreateManyProductInput = {
    id?: string
    orderId: string
    variantId?: string | null
    quantity: number
    price: number
  }

  export type UserBehaviorCreateManyProductInput = {
    id?: string
    userId: string
    type: $Enums.BehaviorType
    createdAt?: Date | string
  }

  export type PromotionProductCreateManyProductInput = {
    id?: string
    promotionId: string
    discountPercentage: number
    quantity?: number | null
    soldQuantity?: number | null
  }

  export type SellerProductCreateManyProductInput = {
    id?: string
    sellerId: string
    price: number
    stock: number
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProductVariantUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    color?: NullableStringFieldUpdateOperationsInput | string | null
    size?: NullableStringFieldUpdateOperationsInput | string | null
    price?: FloatFieldUpdateOperationsInput | number
    stock?: IntFieldUpdateOperationsInput | number
  }

  export type ProductVariantUncheckedUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    color?: NullableStringFieldUpdateOperationsInput | string | null
    size?: NullableStringFieldUpdateOperationsInput | string | null
    price?: FloatFieldUpdateOperationsInput | number
    stock?: IntFieldUpdateOperationsInput | number
  }

  export type ProductVariantUncheckedUpdateManyWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    color?: NullableStringFieldUpdateOperationsInput | string | null
    size?: NullableStringFieldUpdateOperationsInput | string | null
    price?: FloatFieldUpdateOperationsInput | number
    stock?: IntFieldUpdateOperationsInput | number
  }

  export type ReviewUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutReviewsNestedInput
  }

  export type ReviewUncheckedUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReviewUncheckedUpdateManyWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderItemUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    variantId?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    order?: OrderUpdateOneRequiredWithoutOrderItemsNestedInput
  }

  export type OrderItemUncheckedUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderId?: StringFieldUpdateOperationsInput | string
    variantId?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
  }

  export type OrderItemUncheckedUpdateManyWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderId?: StringFieldUpdateOperationsInput | string
    variantId?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
  }

  export type UserBehaviorUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumBehaviorTypeFieldUpdateOperationsInput | $Enums.BehaviorType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutBehaviorsNestedInput
  }

  export type UserBehaviorUncheckedUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: EnumBehaviorTypeFieldUpdateOperationsInput | $Enums.BehaviorType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserBehaviorUncheckedUpdateManyWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: EnumBehaviorTypeFieldUpdateOperationsInput | $Enums.BehaviorType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PromotionProductUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    discountPercentage?: FloatFieldUpdateOperationsInput | number
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    soldQuantity?: NullableIntFieldUpdateOperationsInput | number | null
    promotion?: PromotionUpdateOneRequiredWithoutProductsNestedInput
  }

  export type PromotionProductUncheckedUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    promotionId?: StringFieldUpdateOperationsInput | string
    discountPercentage?: FloatFieldUpdateOperationsInput | number
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    soldQuantity?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PromotionProductUncheckedUpdateManyWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    promotionId?: StringFieldUpdateOperationsInput | string
    discountPercentage?: FloatFieldUpdateOperationsInput | number
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    soldQuantity?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type SellerProductUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    stock?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    seller?: SellerUpdateOneRequiredWithoutSellerProductsNestedInput
  }

  export type SellerProductUncheckedUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    sellerId?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    stock?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SellerProductUncheckedUpdateManyWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    sellerId?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    stock?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CategoryCreateManyParentInput = {
    id?: string
    name: string
  }

  export type ProductCreateManyCategoryInput = {
    id?: string
    name: string
    description: string
    sellerId?: string | null
    enterpriseId?: string | null
    basePrice: number
    stock: number
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PromotionCategoryCreateManyCategoryInput = {
    id?: string
    promotionId: string
  }

  export type CategoryUpdateWithoutParentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    children?: CategoryUpdateManyWithoutParentNestedInput
    products?: ProductUpdateManyWithoutCategoryNestedInput
    promotions?: PromotionCategoryUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateWithoutParentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    children?: CategoryUncheckedUpdateManyWithoutParentNestedInput
    products?: ProductUncheckedUpdateManyWithoutCategoryNestedInput
    promotions?: PromotionCategoryUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateManyWithoutParentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type ProductUpdateWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    basePrice?: FloatFieldUpdateOperationsInput | number
    stock?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    seller?: SellerUpdateOneWithoutProductsNestedInput
    enterprise?: EnterpriseUpdateOneWithoutProductsNestedInput
    variants?: ProductVariantUpdateManyWithoutProductNestedInput
    reviews?: ReviewUpdateManyWithoutProductNestedInput
    orderItems?: OrderItemUpdateManyWithoutProductNestedInput
    behaviors?: UserBehaviorUpdateManyWithoutProductNestedInput
    promotions?: PromotionProductUpdateManyWithoutProductNestedInput
    sellerProducts?: SellerProductUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    sellerId?: NullableStringFieldUpdateOperationsInput | string | null
    enterpriseId?: NullableStringFieldUpdateOperationsInput | string | null
    basePrice?: FloatFieldUpdateOperationsInput | number
    stock?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    variants?: ProductVariantUncheckedUpdateManyWithoutProductNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutProductNestedInput
    orderItems?: OrderItemUncheckedUpdateManyWithoutProductNestedInput
    behaviors?: UserBehaviorUncheckedUpdateManyWithoutProductNestedInput
    promotions?: PromotionProductUncheckedUpdateManyWithoutProductNestedInput
    sellerProducts?: SellerProductUncheckedUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateManyWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    sellerId?: NullableStringFieldUpdateOperationsInput | string | null
    enterpriseId?: NullableStringFieldUpdateOperationsInput | string | null
    basePrice?: FloatFieldUpdateOperationsInput | number
    stock?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PromotionCategoryUpdateWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    promotion?: PromotionUpdateOneRequiredWithoutCategoriesNestedInput
  }

  export type PromotionCategoryUncheckedUpdateWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    promotionId?: StringFieldUpdateOperationsInput | string
  }

  export type PromotionCategoryUncheckedUpdateManyWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    promotionId?: StringFieldUpdateOperationsInput | string
  }

  export type OrderCreateManyVoucherInput = {
    id?: string
    userId: string
    totalAmount: number
    status?: $Enums.OrderStatus
    paymentId?: string | null
    shippingId?: string | null
    createdAt?: Date | string
  }

  export type OrderUpdateWithoutVoucherInput = {
    id?: StringFieldUpdateOperationsInput | string
    totalAmount?: FloatFieldUpdateOperationsInput | number
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    shippingId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutOrdersNestedInput
    payment?: PaymentUpdateOneWithoutOrderNestedInput
    orderItems?: OrderItemUpdateManyWithoutOrderNestedInput
    logisticsOrders?: LogisticsOrderUpdateManyWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateWithoutVoucherInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    totalAmount?: FloatFieldUpdateOperationsInput | number
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    shippingId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    payment?: PaymentUncheckedUpdateOneWithoutOrderNestedInput
    orderItems?: OrderItemUncheckedUpdateManyWithoutOrderNestedInput
    logisticsOrders?: LogisticsOrderUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateManyWithoutVoucherInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    totalAmount?: FloatFieldUpdateOperationsInput | number
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    shippingId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderItemCreateManyOrderInput = {
    id?: string
    productId: string
    variantId?: string | null
    quantity: number
    price: number
  }

  export type LogisticsOrderCreateManyOrderInput = {
    id?: string
    logisticsPartnerId: string
    shipperId?: string | null
    trackingCode: string
    status?: $Enums.LogisticsStatus
    pickupAddress: string
    deliveryAddress: string
    pickupLocation?: NullableJsonNullValueInput | InputJsonValue
    deliveryLocation?: NullableJsonNullValueInput | InputJsonValue
    distance?: number | null
    estimatedTime?: number | null
    estimatedDelivery?: Date | string | null
    pickupTime?: Date | string | null
    deliveredTime?: Date | string | null
    notes?: string | null
    deliveryAttempts?: number
    customerSignature?: string | null
    proofOfDelivery?: LogisticsOrderCreateproofOfDeliveryInput | string[]
    updatedAt?: Date | string
    cancelReason?: string | null
    rating?: number | null
    feedback?: string | null
  }

  export type OrderItemUpdateWithoutOrderInput = {
    id?: StringFieldUpdateOperationsInput | string
    variantId?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    product?: ProductUpdateOneRequiredWithoutOrderItemsNestedInput
  }

  export type OrderItemUncheckedUpdateWithoutOrderInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    variantId?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
  }

  export type OrderItemUncheckedUpdateManyWithoutOrderInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    variantId?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
  }

  export type LogisticsOrderUpdateWithoutOrderInput = {
    id?: StringFieldUpdateOperationsInput | string
    trackingCode?: StringFieldUpdateOperationsInput | string
    status?: EnumLogisticsStatusFieldUpdateOperationsInput | $Enums.LogisticsStatus
    pickupAddress?: StringFieldUpdateOperationsInput | string
    deliveryAddress?: StringFieldUpdateOperationsInput | string
    pickupLocation?: NullableJsonNullValueInput | InputJsonValue
    deliveryLocation?: NullableJsonNullValueInput | InputJsonValue
    distance?: NullableFloatFieldUpdateOperationsInput | number | null
    estimatedTime?: NullableIntFieldUpdateOperationsInput | number | null
    estimatedDelivery?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pickupTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deliveredTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    deliveryAttempts?: IntFieldUpdateOperationsInput | number
    customerSignature?: NullableStringFieldUpdateOperationsInput | string | null
    proofOfDelivery?: LogisticsOrderUpdateproofOfDeliveryInput | string[]
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cancelReason?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
    logisticsPartner?: LogisticsPartnerUpdateOneRequiredWithoutOrdersNestedInput
    shipper?: ShipperUpdateOneWithoutAssignedOrdersNestedInput
  }

  export type LogisticsOrderUncheckedUpdateWithoutOrderInput = {
    id?: StringFieldUpdateOperationsInput | string
    logisticsPartnerId?: StringFieldUpdateOperationsInput | string
    shipperId?: NullableStringFieldUpdateOperationsInput | string | null
    trackingCode?: StringFieldUpdateOperationsInput | string
    status?: EnumLogisticsStatusFieldUpdateOperationsInput | $Enums.LogisticsStatus
    pickupAddress?: StringFieldUpdateOperationsInput | string
    deliveryAddress?: StringFieldUpdateOperationsInput | string
    pickupLocation?: NullableJsonNullValueInput | InputJsonValue
    deliveryLocation?: NullableJsonNullValueInput | InputJsonValue
    distance?: NullableFloatFieldUpdateOperationsInput | number | null
    estimatedTime?: NullableIntFieldUpdateOperationsInput | number | null
    estimatedDelivery?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pickupTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deliveredTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    deliveryAttempts?: IntFieldUpdateOperationsInput | number
    customerSignature?: NullableStringFieldUpdateOperationsInput | string | null
    proofOfDelivery?: LogisticsOrderUpdateproofOfDeliveryInput | string[]
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cancelReason?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type LogisticsOrderUncheckedUpdateManyWithoutOrderInput = {
    id?: StringFieldUpdateOperationsInput | string
    logisticsPartnerId?: StringFieldUpdateOperationsInput | string
    shipperId?: NullableStringFieldUpdateOperationsInput | string | null
    trackingCode?: StringFieldUpdateOperationsInput | string
    status?: EnumLogisticsStatusFieldUpdateOperationsInput | $Enums.LogisticsStatus
    pickupAddress?: StringFieldUpdateOperationsInput | string
    deliveryAddress?: StringFieldUpdateOperationsInput | string
    pickupLocation?: NullableJsonNullValueInput | InputJsonValue
    deliveryLocation?: NullableJsonNullValueInput | InputJsonValue
    distance?: NullableFloatFieldUpdateOperationsInput | number | null
    estimatedTime?: NullableIntFieldUpdateOperationsInput | number | null
    estimatedDelivery?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pickupTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deliveredTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    deliveryAttempts?: IntFieldUpdateOperationsInput | number
    customerSignature?: NullableStringFieldUpdateOperationsInput | string | null
    proofOfDelivery?: LogisticsOrderUpdateproofOfDeliveryInput | string[]
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cancelReason?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ShipperCreateManyLogisticsPartnerInput = {
    id?: string
    email: string
    password: string
    name: string
    phone?: string | null
    avatar?: string | null
    active?: boolean
    currentLocation?: NullableJsonNullValueInput | InputJsonValue
    status?: $Enums.ShipperStatus
    rating?: number | null
    totalDeliveries?: number
    totalRatings?: number
    deliveryRange?: number
    deliveryHistory?: ShipperCreatedeliveryHistoryInput | InputJsonValue[]
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LogisticsOrderCreateManyLogisticsPartnerInput = {
    id?: string
    orderId: string
    shipperId?: string | null
    trackingCode: string
    status?: $Enums.LogisticsStatus
    pickupAddress: string
    deliveryAddress: string
    pickupLocation?: NullableJsonNullValueInput | InputJsonValue
    deliveryLocation?: NullableJsonNullValueInput | InputJsonValue
    distance?: number | null
    estimatedTime?: number | null
    estimatedDelivery?: Date | string | null
    pickupTime?: Date | string | null
    deliveredTime?: Date | string | null
    notes?: string | null
    deliveryAttempts?: number
    customerSignature?: string | null
    proofOfDelivery?: LogisticsOrderCreateproofOfDeliveryInput | string[]
    updatedAt?: Date | string
    cancelReason?: string | null
    rating?: number | null
    feedback?: string | null
  }

  export type ShipperUpdateWithoutLogisticsPartnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    currentLocation?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumShipperStatusFieldUpdateOperationsInput | $Enums.ShipperStatus
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    totalDeliveries?: IntFieldUpdateOperationsInput | number
    totalRatings?: IntFieldUpdateOperationsInput | number
    deliveryRange?: FloatFieldUpdateOperationsInput | number
    deliveryHistory?: ShipperUpdatedeliveryHistoryInput | InputJsonValue[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedOrders?: LogisticsOrderUpdateManyWithoutShipperNestedInput
  }

  export type ShipperUncheckedUpdateWithoutLogisticsPartnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    currentLocation?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumShipperStatusFieldUpdateOperationsInput | $Enums.ShipperStatus
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    totalDeliveries?: IntFieldUpdateOperationsInput | number
    totalRatings?: IntFieldUpdateOperationsInput | number
    deliveryRange?: FloatFieldUpdateOperationsInput | number
    deliveryHistory?: ShipperUpdatedeliveryHistoryInput | InputJsonValue[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedOrders?: LogisticsOrderUncheckedUpdateManyWithoutShipperNestedInput
  }

  export type ShipperUncheckedUpdateManyWithoutLogisticsPartnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    currentLocation?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumShipperStatusFieldUpdateOperationsInput | $Enums.ShipperStatus
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    totalDeliveries?: IntFieldUpdateOperationsInput | number
    totalRatings?: IntFieldUpdateOperationsInput | number
    deliveryRange?: FloatFieldUpdateOperationsInput | number
    deliveryHistory?: ShipperUpdatedeliveryHistoryInput | InputJsonValue[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LogisticsOrderUpdateWithoutLogisticsPartnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    trackingCode?: StringFieldUpdateOperationsInput | string
    status?: EnumLogisticsStatusFieldUpdateOperationsInput | $Enums.LogisticsStatus
    pickupAddress?: StringFieldUpdateOperationsInput | string
    deliveryAddress?: StringFieldUpdateOperationsInput | string
    pickupLocation?: NullableJsonNullValueInput | InputJsonValue
    deliveryLocation?: NullableJsonNullValueInput | InputJsonValue
    distance?: NullableFloatFieldUpdateOperationsInput | number | null
    estimatedTime?: NullableIntFieldUpdateOperationsInput | number | null
    estimatedDelivery?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pickupTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deliveredTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    deliveryAttempts?: IntFieldUpdateOperationsInput | number
    customerSignature?: NullableStringFieldUpdateOperationsInput | string | null
    proofOfDelivery?: LogisticsOrderUpdateproofOfDeliveryInput | string[]
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cancelReason?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
    order?: OrderUpdateOneRequiredWithoutLogisticsOrdersNestedInput
    shipper?: ShipperUpdateOneWithoutAssignedOrdersNestedInput
  }

  export type LogisticsOrderUncheckedUpdateWithoutLogisticsPartnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderId?: StringFieldUpdateOperationsInput | string
    shipperId?: NullableStringFieldUpdateOperationsInput | string | null
    trackingCode?: StringFieldUpdateOperationsInput | string
    status?: EnumLogisticsStatusFieldUpdateOperationsInput | $Enums.LogisticsStatus
    pickupAddress?: StringFieldUpdateOperationsInput | string
    deliveryAddress?: StringFieldUpdateOperationsInput | string
    pickupLocation?: NullableJsonNullValueInput | InputJsonValue
    deliveryLocation?: NullableJsonNullValueInput | InputJsonValue
    distance?: NullableFloatFieldUpdateOperationsInput | number | null
    estimatedTime?: NullableIntFieldUpdateOperationsInput | number | null
    estimatedDelivery?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pickupTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deliveredTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    deliveryAttempts?: IntFieldUpdateOperationsInput | number
    customerSignature?: NullableStringFieldUpdateOperationsInput | string | null
    proofOfDelivery?: LogisticsOrderUpdateproofOfDeliveryInput | string[]
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cancelReason?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type LogisticsOrderUncheckedUpdateManyWithoutLogisticsPartnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderId?: StringFieldUpdateOperationsInput | string
    shipperId?: NullableStringFieldUpdateOperationsInput | string | null
    trackingCode?: StringFieldUpdateOperationsInput | string
    status?: EnumLogisticsStatusFieldUpdateOperationsInput | $Enums.LogisticsStatus
    pickupAddress?: StringFieldUpdateOperationsInput | string
    deliveryAddress?: StringFieldUpdateOperationsInput | string
    pickupLocation?: NullableJsonNullValueInput | InputJsonValue
    deliveryLocation?: NullableJsonNullValueInput | InputJsonValue
    distance?: NullableFloatFieldUpdateOperationsInput | number | null
    estimatedTime?: NullableIntFieldUpdateOperationsInput | number | null
    estimatedDelivery?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pickupTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deliveredTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    deliveryAttempts?: IntFieldUpdateOperationsInput | number
    customerSignature?: NullableStringFieldUpdateOperationsInput | string | null
    proofOfDelivery?: LogisticsOrderUpdateproofOfDeliveryInput | string[]
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cancelReason?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type LogisticsOrderCreateManyShipperInput = {
    id?: string
    orderId: string
    logisticsPartnerId: string
    trackingCode: string
    status?: $Enums.LogisticsStatus
    pickupAddress: string
    deliveryAddress: string
    pickupLocation?: NullableJsonNullValueInput | InputJsonValue
    deliveryLocation?: NullableJsonNullValueInput | InputJsonValue
    distance?: number | null
    estimatedTime?: number | null
    estimatedDelivery?: Date | string | null
    pickupTime?: Date | string | null
    deliveredTime?: Date | string | null
    notes?: string | null
    deliveryAttempts?: number
    customerSignature?: string | null
    proofOfDelivery?: LogisticsOrderCreateproofOfDeliveryInput | string[]
    updatedAt?: Date | string
    cancelReason?: string | null
    rating?: number | null
    feedback?: string | null
  }

  export type LogisticsOrderUpdateWithoutShipperInput = {
    id?: StringFieldUpdateOperationsInput | string
    trackingCode?: StringFieldUpdateOperationsInput | string
    status?: EnumLogisticsStatusFieldUpdateOperationsInput | $Enums.LogisticsStatus
    pickupAddress?: StringFieldUpdateOperationsInput | string
    deliveryAddress?: StringFieldUpdateOperationsInput | string
    pickupLocation?: NullableJsonNullValueInput | InputJsonValue
    deliveryLocation?: NullableJsonNullValueInput | InputJsonValue
    distance?: NullableFloatFieldUpdateOperationsInput | number | null
    estimatedTime?: NullableIntFieldUpdateOperationsInput | number | null
    estimatedDelivery?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pickupTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deliveredTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    deliveryAttempts?: IntFieldUpdateOperationsInput | number
    customerSignature?: NullableStringFieldUpdateOperationsInput | string | null
    proofOfDelivery?: LogisticsOrderUpdateproofOfDeliveryInput | string[]
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cancelReason?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
    order?: OrderUpdateOneRequiredWithoutLogisticsOrdersNestedInput
    logisticsPartner?: LogisticsPartnerUpdateOneRequiredWithoutOrdersNestedInput
  }

  export type LogisticsOrderUncheckedUpdateWithoutShipperInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderId?: StringFieldUpdateOperationsInput | string
    logisticsPartnerId?: StringFieldUpdateOperationsInput | string
    trackingCode?: StringFieldUpdateOperationsInput | string
    status?: EnumLogisticsStatusFieldUpdateOperationsInput | $Enums.LogisticsStatus
    pickupAddress?: StringFieldUpdateOperationsInput | string
    deliveryAddress?: StringFieldUpdateOperationsInput | string
    pickupLocation?: NullableJsonNullValueInput | InputJsonValue
    deliveryLocation?: NullableJsonNullValueInput | InputJsonValue
    distance?: NullableFloatFieldUpdateOperationsInput | number | null
    estimatedTime?: NullableIntFieldUpdateOperationsInput | number | null
    estimatedDelivery?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pickupTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deliveredTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    deliveryAttempts?: IntFieldUpdateOperationsInput | number
    customerSignature?: NullableStringFieldUpdateOperationsInput | string | null
    proofOfDelivery?: LogisticsOrderUpdateproofOfDeliveryInput | string[]
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cancelReason?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type LogisticsOrderUncheckedUpdateManyWithoutShipperInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderId?: StringFieldUpdateOperationsInput | string
    logisticsPartnerId?: StringFieldUpdateOperationsInput | string
    trackingCode?: StringFieldUpdateOperationsInput | string
    status?: EnumLogisticsStatusFieldUpdateOperationsInput | $Enums.LogisticsStatus
    pickupAddress?: StringFieldUpdateOperationsInput | string
    deliveryAddress?: StringFieldUpdateOperationsInput | string
    pickupLocation?: NullableJsonNullValueInput | InputJsonValue
    deliveryLocation?: NullableJsonNullValueInput | InputJsonValue
    distance?: NullableFloatFieldUpdateOperationsInput | number | null
    estimatedTime?: NullableIntFieldUpdateOperationsInput | number | null
    estimatedDelivery?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pickupTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deliveredTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    deliveryAttempts?: IntFieldUpdateOperationsInput | number
    customerSignature?: NullableStringFieldUpdateOperationsInput | string | null
    proofOfDelivery?: LogisticsOrderUpdateproofOfDeliveryInput | string[]
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cancelReason?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PromotionProductCreateManyPromotionInput = {
    id?: string
    productId: string
    discountPercentage: number
    quantity?: number | null
    soldQuantity?: number | null
  }

  export type PromotionCategoryCreateManyPromotionInput = {
    id?: string
    categoryId: string
  }

  export type PromotionProductUpdateWithoutPromotionInput = {
    id?: StringFieldUpdateOperationsInput | string
    discountPercentage?: FloatFieldUpdateOperationsInput | number
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    soldQuantity?: NullableIntFieldUpdateOperationsInput | number | null
    product?: ProductUpdateOneRequiredWithoutPromotionsNestedInput
  }

  export type PromotionProductUncheckedUpdateWithoutPromotionInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    discountPercentage?: FloatFieldUpdateOperationsInput | number
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    soldQuantity?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PromotionProductUncheckedUpdateManyWithoutPromotionInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    discountPercentage?: FloatFieldUpdateOperationsInput | number
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    soldQuantity?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PromotionCategoryUpdateWithoutPromotionInput = {
    id?: StringFieldUpdateOperationsInput | string
    category?: CategoryUpdateOneRequiredWithoutPromotionsNestedInput
  }

  export type PromotionCategoryUncheckedUpdateWithoutPromotionInput = {
    id?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
  }

  export type PromotionCategoryUncheckedUpdateManyWithoutPromotionInput = {
    id?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}