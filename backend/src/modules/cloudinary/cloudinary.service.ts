// src/cloudinary/cloudinary.service.ts
import { Injectable } from '@nestjs/common';
import {
  UploadApiErrorResponse,
  UploadApiResponse,
  v2 as cloudinary,
} from 'cloudinary';
import * as streamifier from 'streamifier';

@Injectable()
export class CloudinaryService {
  /**
   * 1. H√ÄM CHO API (Upload t·ª´ Buffer)
   */
  async uploadFile(
    file: Express.Multer.File,
    folder: string,
    options: any = {}, // üëà ƒê√£ s·ª≠a
  ): Promise<UploadApiResponse | UploadApiErrorResponse> {
    return new Promise((resolve, reject) => {
      const uploadStream = cloudinary.uploader.upload_stream(
        {
          folder: folder,
          ...options, // üëà ƒê√£ g·ªôp options
        },
        (error, result) => {
          if (error) return reject(error);
          resolve(result);
        },
      );
      streamifier.createReadStream(file.buffer).pipe(uploadStream);
    });
  }

  /**
   * 2. H√ÄM CHO SCRIPT (Upload t·ª´ Path ho·∫∑c URL)
   */
  async uploadFromPath(
    path: string, // C√≥ th·ªÉ l√† local path ho·∫∑c URL
    folder: string,
  ): Promise<UploadApiResponse | UploadApiErrorResponse> {
    try {
      return await cloudinary.uploader.upload(path, {
        folder: folder,
      });
    } catch (error) {
      console.error('L·ªói upload t·ª´ path:', error);
      throw error;
    }
  }

  /**
   * 3. H√ÄM X√ìA FILE (D√πng public_id)
   */
  async deleteFile(publicId: string): Promise<any> {
    return cloudinary.uploader.destroy(publicId);
  }

  /**
   * 4. H√ÄM HELPER (B·ªä THI·∫æU)
   * Tr√≠ch xu·∫•t public_id ƒë·ªÉ x√≥a file
   */
  getPublicIdFromUrl(imageUrl: string): string | null {
    try {
      const regex = /upload\/(?:v\d+\/)?(.*?)\.[^.]+$/;
      const match = imageUrl.match(regex);
      return match ? match[1] : null;
    } catch (error) {
      console.error('Error parsing public_id from URL:', error);
      return null;
    }
  }
}