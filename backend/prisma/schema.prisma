// This is your Prisma schema file.
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//
// ENUMS
//

enum Role {
  CUSTOMER
  SELLER
  ENTERPRISE
  LOGISTICS
  SHIPPER
  ADMIN
}

// 👈 Đã đổi tên 'PERCENT' -> 'PERCENTAGE', 'AMOUNT' -> 'FIXED_AMOUNT' cho rõ nghĩa
enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
}

// 👈 BẮT BUỘC: Thêm enum cho Voucher
enum VoucherScope {
  SHOP     // Giảm giá của người bán (Seller / Enterprise)
  PLATFORM // Giảm giá toàn sàn (Shopee)
  FREESHIP // Giảm phí vận chuyển
}

enum PaymentMethod {
  VNPAY
  PAYPAL
  COD
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}

enum OrderStatus {
  PENDING    // Chờ thanh toán / xác nhận
  PROCESSING // Đã xác nhận, chờ shop đóng gói
  SHIPPING   // Đang giao hàng
  DELIVERED  // Đã giao thành công
  CANCELLED  // Đã hủy
}

enum LogisticsStatus {
  CREATED    // Đơn hàng mới tạo (chờ shop xác nhận)
  ASSIGNED   // Đã phân công cho shipper
  PICKED_UP  // Shipper đã lấy hàng
  IN_TRANSIT // Đang giao hàng
  DELIVERED  // Đã giao hàng
  RETURNED   // Hoàn trả
  CANCELLED  // Hủy
}

enum ShipperStatus {
  AVAILABLE // Sẵn sàng nhận đơn
  BUSY      // Đang giao hàng
  OFFLINE   // Không hoạt động
}

enum BehaviorType {
  VIEW
  ADD_TO_CART
  PURCHASE
  SEARCH
}

enum PromotionType {
  FLASH_SALE
  CAMPAIGN
}

//
// MODELS
//

model User {
  id                String    @id @default(cuid())
  email             String    @unique
  password          String
  name              String
  avatar            String?
  phone             String?
  role              Role      @default(CUSTOMER) // 👈 Dùng enum Role
  isVerified        Boolean   @default(false)
  verificationToken String?
  isActive          Boolean   @default(true)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  seller            Seller?
  enterprise        Enterprise?
  logistics         LogisticsPartner?
  shipper           Shipper? // 👈 Thêm liên kết 1-1 với Shipper
  addresses         Address[]
  orders            Order[]
  reviews           Review[]
  behaviors         UserBehavior[]
  voucherClaims     VoucherDistribution[] // 👈 Voucher user đã "lưu"
}

model Address {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  label     String?
  fullName  String
  phone     String
  province  String
  district  String
  ward      String
  street    String
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

//
// SELLER
//

model Seller {
  id                  String     @id @default(cuid())
  userId              String     @unique
  user                User       @relation(fields: [userId], references: [id])
  storeName           String
  verified            Boolean    @default(false)
  rating              Float?
  logoUrl             String?
  businessDocumentUrl String?
  identityDocumentUrl String?
  addressDocumentUrl  String?
  products            Product[]
  vouchers            Voucher[] // 👈 Voucher do shop này phát hành
}

//
// ENTERPRISE
//

model Enterprise {
  id                   String    @id @default(cuid())
  userId               String    @unique
  user                 User      @relation(fields: [userId], references: [id])
  companyName          String
  taxCode              String?
  verified             Boolean   @default(false)
  officialBrand        Boolean   @default(true)
  rating               Float?
  logoUrl              String?
  businessLicenseUrl   String?
  brandRegistrationUrl String?
  taxDocumentUrl       String?
  products             Product[]
  vouchers             Voucher[] // 👈 Voucher do brand này phát hành
}

//
// PRODUCT MANAGEMENT (ĐÃ TỐI ƯU HÓA)
//

model Product {
  id           String      @id @default(cuid())
  name         String
  description  String
  categoryId   String
  category     Category    @relation(fields: [categoryId], references: [id])
  sellerId     String?
  seller       Seller?     @relation(fields: [sellerId], references: [id])
  enterpriseId String?
  enterprise   Enterprise? @relation(fields: [enterpriseId], references: [id])
  images       String[]    @default([])
  active       Boolean     @default(true)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  // 👈 Giá và kho đã chuyển xuống Variant
  variants     ProductVariant[]
  reviews      Review[]
  orderItems   OrderItem[]
  behaviors    UserBehavior[]
  promotions   PromotionProduct[]
}

model ProductVariant {
  id        String  @id @default(cuid())
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  color     String?
  size      String?
  price     Float // 👈 Giá gốc của biến thể
  stock     Int   // 👈 Tồn kho của biến thể
  sku       String? @unique
}

model Category {
  id         String              @id @default(cuid())
  name       String
  parentId   String?
  parent     Category?           @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children   Category[]          @relation("CategoryHierarchy")
  products   Product[]
  promotions PromotionCategory[]
}

model Review {
  id        String   @id @default(cuid())
  productId String
  userId    String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())

  product Product @relation(fields: [productId], references: [id])
  user    User    @relation(fields: [userId], references: [id])
}

// 🔴 BỎ Model `SellerProduct` vì đã tối ưu theo mô hình Shopee (Product thuộc về 1 Seller)

//
// VOUCHER (ĐÃ XÂY DỰNG LẠI THEO MÔ HÌNH SHOPEE)
//

model Voucher {
  id               String       @id @default(cuid())
  code             String       @unique
  title            String
  description      String?
  scope            VoucherScope // 👈 BẮT BUỘC: Phân loại voucher
  discountType     DiscountType
  discountValue    Float
  maxDiscountValue Float? // 👈 Giảm tối đa
  minOrderValue    Float?
  startDate        DateTime
  endDate          DateTime
  usageLimit       Int?
  usedCount        Int          @default(0)
  isActive         Boolean      @default(true)

  // Liên kết người phát hành (Chỉ có nếu scope = SHOP)
  sellerId         String?
  enterpriseId     String?
  seller           Seller?      @relation(fields: [sellerId], references: [id])
  enterprise       Enterprise?  @relation(fields: [enterpriseId], references: [id])

  // Quan hệ ngược
  // 👈 Quan hệ N-N với Order (Lưu lại voucher đã áp dụng)
  orders           Order[]
  // 👈 Voucher user đã lưu
  distributions    VoucherDistribution[]
  // 👈 Ngân sách của voucher (thường cho Sàn)
  budget           VoucherBudget?
}

// 👈 BẮT BUỘC: Model lưu voucher của user
model VoucherDistribution {
  id        String   @id @default(cuid())
  voucherId String
  userId    String
  claimedAt DateTime @default(now())
  used      Boolean  @default(false)
  orderId   String?  // 👈 Nối với đơn hàng đã sử dụng voucher này

  voucher Voucher @relation(fields: [voucherId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  // order     Order?    @relation(fields: [orderId], references: [id]) // (Tùy chọn)

  @@unique([voucherId, userId]) // User chỉ claim 1 voucher 1 lần
}

// 👈 BẮT BUỘC: Model ngân sách voucher
model VoucherBudget {
  id          String  @id @default(cuid())
  voucherId   String  @unique // 1 voucher chỉ có 1 ngân sách
  totalBudget Float   // tổng tiền giảm tối đa
  usedBudget  Float   @default(0)
  voucher     Voucher @relation(fields: [voucherId], references: [id], onDelete: Cascade)
}

//
// ORDER & PAYMENT (ĐÃ CẬP NHẬT)
//

model Order {
  id               String       @id @default(cuid())
  userId           String
  user             User         @relation(fields: [userId], references: [id])
  status           OrderStatus  @default(PENDING)
  paymentId        String?      @unique
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt

  // 👈 Giá trị đơn hàng (đã cập nhật)
  subtotal         Float // Tổng tiền hàng gốc
  shippingFee      Float // Phí ship gốc
  shopDiscount     Float @default(0) // Tiền giảm từ Shop Voucher
  platformDiscount Float @default(0) // Tiền giảm từ Platform Voucher
  freeshipDiscount Float @default(0) // Tiền giảm từ Freeship Voucher
  totalDiscount    Float // Tổng tiền giảm (shop + platform)
  totalAmount      Float // Tổng cuối cùng (subtotal - totalDiscount + shippingFee - freeshipDiscount)

  // 👈 Quan hệ N-N với Voucher (Lưu lại các voucher đã áp dụng)
  appliedVouchers  Voucher[]

  payment          Payment?
  orderItems       OrderItem[]
  logisticsOrders  LogisticsOrder[]
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  variantId String? // ID của ProductVariant
  quantity  Int
  price     Float   // Giá của sản phẩm TẠI THỜI ĐIỂM MUA

  // 👈 BẮT BUỘC: Item này của shop nào?
  sellerId     String?
  enterpriseId String?

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

model Payment {
  id            String        @id @default(cuid())
  orderId       String        @unique
  order         Order         @relation(fields: [orderId], references: [id])
  method        PaymentMethod
  status        PaymentStatus @default(PENDING)
  transactionId String?
  amount        Float // 👈 Thêm: Số tiền thanh toán
  createdAt     DateTime      @default(now())
}

//
// LOGISTICS (ĐÃ CẬP NHẬT)
//

model LogisticsPartner {
  id          String           @id @default(cuid())
  userId      String           @unique
  user        User             @relation(fields: [userId], references: [id])
  name        String
  apiEndpoint String?
  baseRate    Float
  rating      Float?
  verified    Boolean          @default(false)
  shippers    Shipper[]
  orders      LogisticsOrder[]
}

model Shipper {
  id                 String           @id @default(cuid())
  // 👈 Liên kết với User, xóa các trường trùng lặp
  userId             String           @unique
  user               User             @relation(fields: [userId], references: [id])
  logisticsPartnerId String
  logisticsPartner   LogisticsPartner @relation(fields: [logisticsPartnerId], references: [id])
  active             Boolean          @default(true)
  currentLocation    Json? // Lưu tọa độ lat, lng
  status             ShipperStatus    @default(AVAILABLE)
  rating             Float?
  totalDeliveries    Int              @default(0)
  totalRatings       Int              @default(0)
  deliveryRange      Float            @default(5.0) // Phạm vi giao hàng (km)
  assignedOrders     LogisticsOrder[]
  deliveryHistory    Json[] // Lưu lịch sử giao hàng
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt

  // ❌ Xóa: email, password, name, phone, avatar (đã có trong User)
}

model LogisticsOrder {
  id                 String           @id @default(cuid())
  orderId            String
  logisticsPartnerId String
  shipperId          String?
  trackingCode       String
  status             LogisticsStatus  @default(CREATED)
  pickupAddress      String // Địa chỉ lấy hàng
  deliveryAddress    String // Địa chỉ giao hàng
  pickupLocation     Json? // Tọa độ lấy hàng
  deliveryLocation   Json? // Tọa độ giao hàng
  distance           Float? // Khoảng cách vận chuyển (km)
  estimatedTime      Int? // Thời gian dự kiến (phút)
  estimatedDelivery  DateTime?
  pickupTime         DateTime?
  deliveredTime      DateTime?
  notes              String?
  deliveryAttempts   Int              @default(0)
  customerSignature  String? // Chữ ký người nhận
  proofOfDelivery    String[] // Ảnh chứng minh giao hàng
  updatedAt          DateTime         @updatedAt
  cancelReason       String?
  rating             Int? // Đánh giá từ khách hàng
  feedback           String? // Phản hồi từ khách hàng

  // 👈 BẮT BUỘC: Đơn vận này lấy hàng của shop nào?
  sellerId           String?
  enterpriseId       String?

  order              Order            @relation(fields: [orderId], references: [id])
  logisticsPartner   LogisticsPartner @relation(fields: [logisticsPartnerId], references: [id])
  shipper            Shipper?         @relation(fields: [shipperId], references: [id])
}

//
// PERSONALIZATION
//

model UserBehavior {
  id        String       @id @default(cuid())
  userId    String
  productId String
  type      BehaviorType
  createdAt DateTime     @default(now())

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

//
// PROMOTIONS
//

model Promotion {
  id                 String              @id @default(cuid())
  type               PromotionType
  name               String
  description        String?
  startDate          DateTime
  endDate            DateTime
  discountPercentage Float?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt

  products           PromotionProduct[]
  categories         PromotionCategory[]
}

model PromotionProduct {
  id                 String    @id @default(cuid())
  promotionId        String
  productId          String
  discountPercentage Float
  quantity           Int?
  soldQuantity       Int?      @default(0)

  promotion Promotion @relation(fields: [promotionId], references: [id])
  product   Product   @relation(fields: [productId], references: [id])
}

model PromotionCategory {
  id          String   @id @default(cuid())
  promotionId String
  categoryId  String

  promotion Promotion @relation(fields: [promotionId], references: [id])
  category  Category  @relation(fields: [categoryId], references: [id])
}