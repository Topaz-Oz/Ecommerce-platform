import { VoucherService } from './voucher.service';
import { CreateVoucherDto } from './dto/create-voucher.dto';
import { ApplyVoucherDto } from './dto/apply-voucher.dto';
export declare class VoucherController {
    private readonly voucherService;
    constructor(voucherService: VoucherService);
    createShopVoucher(createDto: CreateVoucherDto, req: any): Promise<{
        id: string;
        description: string | null;
        sellerId: string | null;
        enterpriseId: string | null;
        isActive: boolean;
        scope: import(".prisma/client").$Enums.VoucherScope;
        code: string;
        title: string;
        discountType: import(".prisma/client").$Enums.DiscountType;
        discountValue: number;
        maxDiscountValue: number | null;
        minOrderValue: number | null;
        startDate: Date;
        endDate: Date;
        usageLimit: number | null;
        usedCount: number;
    }>;
    createPlatformVoucher(createDto: CreateVoucherDto): Promise<{
        id: string;
        description: string | null;
        sellerId: string | null;
        enterpriseId: string | null;
        isActive: boolean;
        scope: import(".prisma/client").$Enums.VoucherScope;
        code: string;
        title: string;
        discountType: import(".prisma/client").$Enums.DiscountType;
        discountValue: number;
        maxDiscountValue: number | null;
        minOrderValue: number | null;
        startDate: Date;
        endDate: Date;
        usageLimit: number | null;
        usedCount: number;
    }>;
    createFreeShipVoucher(createDto: CreateVoucherDto): Promise<{
        id: string;
        description: string | null;
        sellerId: string | null;
        enterpriseId: string | null;
        isActive: boolean;
        scope: import(".prisma/client").$Enums.VoucherScope;
        code: string;
        title: string;
        discountType: import(".prisma/client").$Enums.DiscountType;
        discountValue: number;
        maxDiscountValue: number | null;
        minOrderValue: number | null;
        startDate: Date;
        endDate: Date;
        usageLimit: number | null;
        usedCount: number;
    }>;
    claimVoucher(id: string, req: any): Promise<{
        id: string;
        userId: string;
        orderId: string | null;
        claimedAt: Date;
        used: boolean;
        voucherId: string;
    }>;
    getAvailableVouchers(req: any, sellerIds: string[]): Promise<{
        shopVouchers: {
            id: string;
            description: string | null;
            sellerId: string | null;
            enterpriseId: string | null;
            isActive: boolean;
            scope: import(".prisma/client").$Enums.VoucherScope;
            code: string;
            title: string;
            discountType: import(".prisma/client").$Enums.DiscountType;
            discountValue: number;
            maxDiscountValue: number | null;
            minOrderValue: number | null;
            startDate: Date;
            endDate: Date;
            usageLimit: number | null;
            usedCount: number;
        }[];
        platformVouchers: {
            id: string;
            description: string | null;
            sellerId: string | null;
            enterpriseId: string | null;
            isActive: boolean;
            scope: import(".prisma/client").$Enums.VoucherScope;
            code: string;
            title: string;
            discountType: import(".prisma/client").$Enums.DiscountType;
            discountValue: number;
            maxDiscountValue: number | null;
            minOrderValue: number | null;
            startDate: Date;
            endDate: Date;
            usageLimit: number | null;
            usedCount: number;
        }[];
        freeShipVouchers: {
            id: string;
            description: string | null;
            sellerId: string | null;
            enterpriseId: string | null;
            isActive: boolean;
            scope: import(".prisma/client").$Enums.VoucherScope;
            code: string;
            title: string;
            discountType: import(".prisma/client").$Enums.DiscountType;
            discountValue: number;
            maxDiscountValue: number | null;
            minOrderValue: number | null;
            startDate: Date;
            endDate: Date;
            usageLimit: number | null;
            usedCount: number;
        }[];
    }>;
    calculateCheckout(req: any, applyDto: ApplyVoucherDto): Promise<{
        subtotal: number;
        shippingFee: number;
        shopDiscount: number;
        platformDiscount: number;
        freeShipDiscount: number;
        totalDiscount: number;
        finalTotal: number;
    }>;
}
