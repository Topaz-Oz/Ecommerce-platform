import { PrismaService } from '../../prisma/prisma.service';
import { Prisma } from '@prisma/client';
import { CreateShipperDto, UpdateShipperDto, UpdateLocationDto } from './shipper.dto';
export declare class ShipperService {
    private prisma;
    constructor(prisma: PrismaService);
    create(logisticsPartnerId: string, createShipperDto: CreateShipperDto): Promise<{
        user: {
            id: string;
            name: string;
            createdAt: Date;
            updatedAt: Date;
            email: string;
            password: string;
            avatar: string | null;
            phone: string | null;
            role: import(".prisma/client").$Enums.Role;
            isVerified: boolean;
            verificationToken: string | null;
            isActive: boolean;
        };
        id: string;
        userId: string;
        rating: number | null;
        active: boolean;
        createdAt: Date;
        updatedAt: Date;
        currentLocation: Prisma.JsonValue | null;
        status: import(".prisma/client").$Enums.ShipperStatus;
        totalDeliveries: number;
        totalRatings: number;
        deliveryRange: number;
        deliveryHistory: Prisma.JsonValue[];
        logisticsPartnerId: string;
    }>;
    update(id: string, updateShipperDto: UpdateShipperDto): Promise<{
        id: string;
        userId: string;
        rating: number | null;
        active: boolean;
        createdAt: Date;
        updatedAt: Date;
        currentLocation: Prisma.JsonValue | null;
        status: import(".prisma/client").$Enums.ShipperStatus;
        totalDeliveries: number;
        totalRatings: number;
        deliveryRange: number;
        deliveryHistory: Prisma.JsonValue[];
        logisticsPartnerId: string;
    }>;
    updateLocation(id: string, updateLocationDto: UpdateLocationDto): Promise<{
        id: string;
        userId: string;
        rating: number | null;
        active: boolean;
        createdAt: Date;
        updatedAt: Date;
        currentLocation: Prisma.JsonValue | null;
        status: import(".prisma/client").$Enums.ShipperStatus;
        totalDeliveries: number;
        totalRatings: number;
        deliveryRange: number;
        deliveryHistory: Prisma.JsonValue[];
        logisticsPartnerId: string;
    }>;
    findAll(logisticsPartnerId: string): Promise<({
        user: {
            id: string;
            name: string;
            createdAt: Date;
            updatedAt: Date;
            email: string;
            password: string;
            avatar: string | null;
            phone: string | null;
            role: import(".prisma/client").$Enums.Role;
            isVerified: boolean;
            verificationToken: string | null;
            isActive: boolean;
        };
        assignedOrders: ({
            order: {
                id: string;
                userId: string;
                createdAt: Date;
                updatedAt: Date;
                status: import(".prisma/client").$Enums.OrderStatus;
                shippingFee: number;
                paymentId: string | null;
                subtotal: number;
                shopDiscount: number;
                platformDiscount: number;
                freeshipDiscount: number;
                totalDiscount: number;
                totalAmount: number;
            };
        } & {
            id: string;
            rating: number | null;
            updatedAt: Date;
            sellerId: string | null;
            enterpriseId: string | null;
            status: import(".prisma/client").$Enums.LogisticsStatus;
            logisticsPartnerId: string;
            orderId: string;
            shipperId: string | null;
            trackingCode: string;
            pickupAddress: string;
            deliveryAddress: string;
            pickupLocation: Prisma.JsonValue | null;
            deliveryLocation: Prisma.JsonValue | null;
            distance: number | null;
            estimatedTime: number | null;
            estimatedDelivery: Date | null;
            pickupTime: Date | null;
            deliveredTime: Date | null;
            notes: string | null;
            deliveryAttempts: number;
            customerSignature: string | null;
            proofOfDelivery: string[];
            cancelReason: string | null;
            feedback: string | null;
        })[];
    } & {
        id: string;
        userId: string;
        rating: number | null;
        active: boolean;
        createdAt: Date;
        updatedAt: Date;
        currentLocation: Prisma.JsonValue | null;
        status: import(".prisma/client").$Enums.ShipperStatus;
        totalDeliveries: number;
        totalRatings: number;
        deliveryRange: number;
        deliveryHistory: Prisma.JsonValue[];
        logisticsPartnerId: string;
    })[]>;
    findOne(id: string): Promise<{
        user: {
            id: string;
            name: string;
            createdAt: Date;
            updatedAt: Date;
            email: string;
            password: string;
            avatar: string | null;
            phone: string | null;
            role: import(".prisma/client").$Enums.Role;
            isVerified: boolean;
            verificationToken: string | null;
            isActive: boolean;
        };
        assignedOrders: ({
            order: {
                id: string;
                userId: string;
                createdAt: Date;
                updatedAt: Date;
                status: import(".prisma/client").$Enums.OrderStatus;
                shippingFee: number;
                paymentId: string | null;
                subtotal: number;
                shopDiscount: number;
                platformDiscount: number;
                freeshipDiscount: number;
                totalDiscount: number;
                totalAmount: number;
            };
        } & {
            id: string;
            rating: number | null;
            updatedAt: Date;
            sellerId: string | null;
            enterpriseId: string | null;
            status: import(".prisma/client").$Enums.LogisticsStatus;
            logisticsPartnerId: string;
            orderId: string;
            shipperId: string | null;
            trackingCode: string;
            pickupAddress: string;
            deliveryAddress: string;
            pickupLocation: Prisma.JsonValue | null;
            deliveryLocation: Prisma.JsonValue | null;
            distance: number | null;
            estimatedTime: number | null;
            estimatedDelivery: Date | null;
            pickupTime: Date | null;
            deliveredTime: Date | null;
            notes: string | null;
            deliveryAttempts: number;
            customerSignature: string | null;
            proofOfDelivery: string[];
            cancelReason: string | null;
            feedback: string | null;
        })[];
    } & {
        id: string;
        userId: string;
        rating: number | null;
        active: boolean;
        createdAt: Date;
        updatedAt: Date;
        currentLocation: Prisma.JsonValue | null;
        status: import(".prisma/client").$Enums.ShipperStatus;
        totalDeliveries: number;
        totalRatings: number;
        deliveryRange: number;
        deliveryHistory: Prisma.JsonValue[];
        logisticsPartnerId: string;
    }>;
    findByEmail(email: string): Promise<{
        user: {
            id: string;
            name: string;
            createdAt: Date;
            updatedAt: Date;
            email: string;
            password: string;
            avatar: string | null;
            phone: string | null;
            role: import(".prisma/client").$Enums.Role;
            isVerified: boolean;
            verificationToken: string | null;
            isActive: boolean;
        };
    } & {
        id: string;
        userId: string;
        rating: number | null;
        active: boolean;
        createdAt: Date;
        updatedAt: Date;
        currentLocation: Prisma.JsonValue | null;
        status: import(".prisma/client").$Enums.ShipperStatus;
        totalDeliveries: number;
        totalRatings: number;
        deliveryRange: number;
        deliveryHistory: Prisma.JsonValue[];
        logisticsPartnerId: string;
    }>;
    assignOrder(orderId: string, shipperId: string): Promise<{
        id: string;
        rating: number | null;
        updatedAt: Date;
        sellerId: string | null;
        enterpriseId: string | null;
        status: import(".prisma/client").$Enums.LogisticsStatus;
        logisticsPartnerId: string;
        orderId: string;
        shipperId: string | null;
        trackingCode: string;
        pickupAddress: string;
        deliveryAddress: string;
        pickupLocation: Prisma.JsonValue | null;
        deliveryLocation: Prisma.JsonValue | null;
        distance: number | null;
        estimatedTime: number | null;
        estimatedDelivery: Date | null;
        pickupTime: Date | null;
        deliveredTime: Date | null;
        notes: string | null;
        deliveryAttempts: number;
        customerSignature: string | null;
        proofOfDelivery: string[];
        cancelReason: string | null;
        feedback: string | null;
    }>;
    completeDelivery(orderId: string): Promise<{
        id: string;
        rating: number | null;
        updatedAt: Date;
        sellerId: string | null;
        enterpriseId: string | null;
        status: import(".prisma/client").$Enums.LogisticsStatus;
        logisticsPartnerId: string;
        orderId: string;
        shipperId: string | null;
        trackingCode: string;
        pickupAddress: string;
        deliveryAddress: string;
        pickupLocation: Prisma.JsonValue | null;
        deliveryLocation: Prisma.JsonValue | null;
        distance: number | null;
        estimatedTime: number | null;
        estimatedDelivery: Date | null;
        pickupTime: Date | null;
        deliveredTime: Date | null;
        notes: string | null;
        deliveryAttempts: number;
        customerSignature: string | null;
        proofOfDelivery: string[];
        cancelReason: string | null;
        feedback: string | null;
    }>;
}
